
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

Перем мВалютаРегламентированногоУчета Экспорт;        // Содержит значение константы "Валюта регламентированного учета".
Перем мНастройкиУчетнойПолитикиТСЖ Экспорт;           // Хранит настройки учетной политики по ТСЖ.
Перем мЗапросСпискаДействующихУслуг;                  // Переменные для хранения часто выполняемых запросов. Служат для
                                                      // ускорения работы документа.
Перем мЗапросПолученияНачисленийИДолговПоЛС;          // Хранит запрос получения начислений и долгов по лицевому счету.
Перем мЗапросПолученияМесяцаНачислений;               // Хранит запрос получения месяца начислений.
Перем мЗапросТаблицыНачислений Экспорт;               // Хранит запрос получения начислений по всем объектам и услугам.
Перем мПорядокУслуг Экспорт;                          // Порядок услуг для закрытия при распределении.
Перем мУдалятьДвижения Экспорт;                       // Хранит признак новый ли это документ.
Перем мКолонкиФормированияРасшифровки;                // Хранит список колонок, используемых при формировании
                                                      // расшифровки платежа.
Перем мПечататьЧекиСРасшифровкойПоУслугам Экспорт;    // Хранит настройку программы ЖКХ: выполнять печать чеков с 
                                                      // расшифровкой по услугам или без.
Перем мПечататьЧекиИзРегистрацииОплаты Экспорт;       // Хранит настройку программы ЖКХ: выполнять печать чеков из 
                                                      // документа "Регистрация оплаты" или "ПКО"/"РКО".
Перем мПечататьЧекиПриОплатеБанковскойКартой Экспорт; // Хранит настройку программы ЖКХ: разрешать ли печать чеков при
                                                      // оплате на банковский счет пластиковой картой.
Перем мСтруктураНастроекКапРемонта Экспорт;           // Хранит структуру настроек капитального ремонта организации,
                                                      // а также вариант распределения оплат документа.
Перем НастройкиУчетаДобровольногоСтрахования;         // Хранит структуру настроек учета по добровольному страхованию:
													  // ведется ли учет начислений по добровольному страхованию и ссылку
													  // на соответствующую услугу.
Перем ВестиУчетНачисленийПоДобровольномуСтрахованию;  // Хранит признак учета начислений по добровольному страхованию.
Перем УслугаДобровольногоСтрахования;                 // Хранит ссылку на услугу добровольного страхования.

// УПЖКХ +
Перем СпДокументовОплаты;    // Хранит список видов документов оплаты.
Перем СпДокументовВозвратаОплаты;  // Хранит список видов документов возврата оплаты.
// УПЖКХ -

////////////////////////////////////////////////////////////////////////////////
// ЭКСПОРТНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ ДОКУМЕНТА

// Удаляет расшифровку по указанной строке.
//
// Параметры:
//  СтрокаТабличнойЧасти – Строка ТЧ "Лицевые счета" или лицевой счет.
//  ЗапрашиватьПодтверждение - Булево - запрашивать ли подтверждение
//                 перед выполнением.
//
Функция УдалитьРасшифровкуПоСтрокеОбъекта(СтрокаТабличнойЧасти, ЗапрашиватьПодтверждение = Ложь) Экспорт

	Если ТипЗнч(СтрокаТабличнойЧасти) = Тип("СправочникСсылка.КВП_ЛицевыеСчета") Тогда
		ТекОбъект = СтрокаТабличнойЧасти;
	Иначе
		ТекОбъект = СтрокаТабличнойЧасти.Объект;
	КонецЕсли;
	СтруктОтбор = Новый Структура("Объект", ТекОбъект);
	
	СтрокиНаУдаление = РасшифровкаПлатежа.НайтиСтроки(СтруктОтбор);

	Для Каждого ТекСтрока Из СтрокиНаУдаление Цикл
		РасшифровкаПлатежа.Удалить(ТекСтрока);
	КонецЦикла;
	
	СтрокиНаУдалениеРассрочка = РасшифровкаРассрочки.НайтиСтроки(СтруктОтбор);
	Для Каждого ТекСтрока Из СтрокиНаУдалениеРассрочка Цикл
		РасшифровкаРассрочки.Удалить(ТекСтрока);
	КонецЦикла;
	
	СтрокиНаУдалениеСтрахование = СведенияОДобровольномСтраховании.НайтиСтроки(Новый Структура("ЛицевойСчет", ТекОбъект));
	Для Каждого ТекСтрока Из СтрокиНаУдалениеСтрахование Цикл
		СведенияОДобровольномСтраховании.Удалить(ТекСтрока);
	КонецЦикла;
	
	Возврат Истина;

КонецФункции // УдалитьРасшифровкуПоСтрокеОбъекта()

// Устанавливает актуальные настройки учетной политики ТСЖ при необходимости.
//
// Параметры:
//  ФлагОбновления  - флаг обязательного обновления настроек учетной политики.
//
Процедура ОбновитьНастройкиУчетнойПолитикиТСЖ(ФлагОбновления = Истина) Экспорт

	Если ФлагОбновления ИЛИ мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата, Организация);

	КонецЕсли;

КонецПроцедуры // ОбновитьНастройкиУчетнойПолитикиТСЖ()

// Распределяет сумму из указанной строки по услугам пропорционально долгу и пени.
//
// Параметры:
//  СтрокаТабличнойЧасти – Строка ТЧ "Лицевые счета".
//  ЗапрашиватьПодтверждение - Булево - запрашивать ли подтверждение
//                 перед выполнением.
//
Процедура РаспределитьСуммуОбъекта(СтрокаТабличнойЧасти, 
								   ЗапрашиватьПодтверждение = Ложь,
								   ЭтоЗагрузкаРеестраПлатежей = Ложь,
								   ЭтоРаспределениеОднойСтроки = Ложь) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	Если НЕ УдалитьРасшифровкуПоСтрокеОбъекта(СтрокаТабличнойЧасти, ЗапрашиватьПодтверждение) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьНастройкиУчетнойПолитикиТСЖ(Ложь);
	
	Если мЗапросТаблицыНачислений = Неопределено И мНастройкиУчетнойПолитикиТСЖ.РаспределятьАвансПропорциональноНачислениям Тогда
		СформироватьЗапросТаблицыНачислений(ЭтоРаспределениеОднойСтроки, СтрокаТабличнойЧасти);
	КонецЕсли;
	
	КВП_РаспределитьСуммуОбъекта(ЭтотОбъект, СтрокаТабличнойЧасти, мНастройкиУчетнойПолитикиТСЖ, 
	                             мЗапросПолученияНачисленийИДолговПоЛС, мЗапросПолученияМесяцаНачислений, 
								 мЗапросСпискаДействующихУслуг, мПорядокУслуг, , НастройкиОплаты, 
								 мЗапросТаблицыНачислений, НастройкиУчетаДобровольногоСтрахования,
								 ЭтоЗагрузкаРеестраПлатежей);
	
	// Распределяет остатки по колонкам "Долг" и "Аванс".
	РаспределитьОстаткиВТаблицеРасшифровкиНаДолгиИАвансы();
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("РаспределениеОплатВДокументеРегистрацияОплатыЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры // РаспределитьСуммуОбъекта()

Процедура РаспределитьСуммуВсехОбъектов(СтрокиТабличнойЧасти) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из СтрокиТабличнойЧасти Цикл
		РаспределитьСуммуОбъекта(СтрокаТабличнойЧасти);
	КонецЦикла;
	
КонецПроцедуры

// Распределяет суммы остатка, изначально находящиеся в колонке "Долг", по колонкам "Долг" и "Аванс".
//
Процедура РаспределитьОстаткиВТаблицеРасшифровкиНаДолгиИАвансы()
	
	Для каждого ТекСтрокаРасшифровки из ЭтотОбъект.РасшифровкаПлатежа Цикл
		
		Если ТекСтрокаРасшифровки.ДолгСумма < 0 Тогда
			ТекСтрокаРасшифровки.АвансСумма = ТекСтрокаРасшифровки.ДолгСумма;
			ТекСтрокаРасшифровки.ДолгСумма = 0;
		КонецЕсли;
		
		Если ТекСтрокаРасшифровки.ДолгПени <0 Тогда
			ТекСтрокаРасшифровки.АвансПени = ТекСтрокаРасшифровки.ДолгПени;
			ТекСтрокаРасшифровки.ДолгПени = 0;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Возвращает запрос, содержащий начисления по лицевым счетам табличной части Лицевые счета.
Процедура СформироватьЗапросТаблицыНачислений(ЭтоРаспределениеОднойСтроки, СтрокаТабличнойЧасти)
	
	мЗапросТаблицыНачислений = Новый Запрос;
	мЗапросТаблицыНачислений.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	// Авансы на добровольное страхование не распределяются. Поэтому надо исключить соответствующую услугу.
	Если НастройкиУчетаДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
		УсловиеНаУслугу = " И НЕ Услуга = &ДобровольноеСтрахование";
		мЗапросТаблицыНачислений.УстановитьПараметр("ДобровольноеСтрахование", НастройкиУчетаДобровольногоСтрахования.УслугаДобровольногоСтрахования);
	Иначе
		УсловиеНаУслугу = "";
	КонецЕсли;
	
	мЗапросТаблицыНачислений.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_НачисленияОбороты.Услуга,
	|	УПЖКХ_НачисленияОбороты.ЛицевойСчет,
	|	УПЖКХ_НачисленияОбороты.СуммаНачисленияОборот КАК СуммаПоУслуге
	|ПОМЕСТИТЬ врТаблицаНачислений
	|ИЗ
	|	РегистрНакопления.УПЖКХ_Начисления.Обороты(
	|			&ДатаНачала,
	|			&ДатаОкончания,
	|			,
	|			Организация = &Организация
	|					И (РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеУслуг)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.Оплата)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ЗачетДолговИПереплат)
	|					И НЕ ВидНачисления = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВидыНачислений.ПерерасчетНачисления)
	|				ИЛИ РазделУчета = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_РазделыУчета.НачислениеПоПУ))
	|				И ЛицевойСчет В (&СписокЛС)" + УсловиеНаУслугу + ") КАК УПЖКХ_НачисленияОбороты";
	
	КоличествоМесяцев = мНастройкиУчетнойПолитикиТСЖ.КоличествоПериодовНачисления;
	КонецПериода = КонецМесяца(Дата);
	
	ДатаКон = КонецМесяца(ДобавитьМесяц(КонецПериода, - 1));
	ДатаНач = НачалоМесяца(ДобавитьМесяц(ДатаКон, - КоличествоМесяцев + 1));
	
	мЗапросТаблицыНачислений.УстановитьПараметр("Организация",   Организация);
	мЗапросТаблицыНачислений.УстановитьПараметр("ДатаНачала",    ДатаНач);
	мЗапросТаблицыНачислений.УстановитьПараметр("ДатаОкончания", ДатаКон);
	
	Если ЭтоРаспределениеОднойСтроки Тогда
		// Если это распределение только одной строки оплаты, то данные по начислениям
		// для распределения авансов получим только по одному объекту.
		мЗапросТаблицыНачислений.УстановитьПараметр("СписокЛС", СтрокаТабличнойЧасти.Объект);
	Иначе
		// Если же распределение всего документа, то данные получаем сразу по всем строкам оплаты.
		мЗапросТаблицыНачислений.УстановитьПараметр("СписокЛС", ЛицевыеСчета.ВыгрузитьКолонку("Объект"));
	КонецЕсли;
	
	мЗапросТаблицыНачислений.Выполнить();

КонецПроцедуры

// Выполняет распределение оплат для всей таблицы лицевых счетов.
//
Процедура ОбработатьСтрокиОплат(ЭтоЗагрузкаРеестраПлатежей, СтрокаОплаты = Неопределено) Экспорт
	
	// Общий механизм распределения оплат:
	// Вызывается, если "ФлагРедактирования" НЕ взведен в значение "Истина" (флаг взводится в "Истина" только в процедуре
	// "ЗаполнитьРасшифровкуПлатежаПоТаблице").
	
	Если СтрокаОплаты = Неопределено Тогда
		
		Для каждого ТекСтрокаОплаты из ЛицевыеСчета Цикл
			Если Не ТекСтрокаОплаты.ФлагРедактирования Тогда
				РаспределитьСуммуОбъекта(ТекСтрокаОплаты, Ложь, ЭтоЗагрузкаРеестраПлатежей);
			КонецЕсли;
		КонецЦикла;
		
	Иначе
		
		РаспределитьСуммуОбъекта(СтрокаОплаты, Ложь, ЭтоЗагрузкаРеестраПлатежей);
		
	КонецЕсли;
	
КонецПроцедуры // ОбработатьСтрокиОплат()

// Процедура заполняет "Расшифровку платежа" по переданной таблице оплат.
//
// Параметры:
//  - Объект - ссылка на лицевой счет.
//  - ТаблицаНастроекОплат - таблица значений с колонками "Услуга", "МесяцНачисления", "Сумма".
//  - ФлагРедактирования - булево - признак ручного заполнения расшифровки платежа.
//
Процедура ЗаполнитьРасшифровкуПлатежаПоТаблице(Объект, ТаблицаНастроекОплат, ФлагРедактирования)
	
	// Данная процедура вызывается только из процедуры "ДобавитьСтрокуОплатыПоОбъекту" при наличии в ней параметра
	// "НастройкиОплатыОбъекта", в котором в свою очередь УКАЗАНА настройка по УСЛУГЕ. А это возможно только из
	// обработки "Загрузка реестра платежей".
	// Процедура самостоятельно, т.е. без вызова основного механизма распределения оплат выполняет заполнение
	// табличной части "Расшифровка платежа" в соответствии с настройками строки оплаты реестра.
	// 
	// Особенности распределения оплат:
	// 1. Если в настройках оплаты помимо услуги указан также период оплаты, то вся сумма оплаты распределяется
	//    на указанный месяц по указанной услуге. Распределение выполняется даже если в указанном месяце по услуге
	//    нет долгов, и даже если услуга не назначена.
	// 2. Если в настройках оплаты указана только услуга, то сумма оплаты распределяется по услуге сверху вниз по дереву
	//    задолженности. Остаток, нераспределенный по долгам услуги, распределяется по ней же в текущем месяце начисления.
	//    При этом месяцем начисления считается месяц даты документа. Аналогично, распределение выполняется даже
	//    если долгов по услуге нет, и даже если услуга не назначена.
	// 3. Если оплата распределяется на услугу добровольного страхования, то при распределении оплаты учитываются следующие
	//    особенности:
	//     - Можно оплатить добровольное страхование только за один месяц
	//     - Сумма оплаты должна быть равна сумме начисления по добровольному страхованию.
	
	ТаблицаНастроекОплатВрем = ТаблицаНастроекОплат.Скопировать();
	
	ОбновитьНастройкиУчетнойПолитикиТСЖ(Ложь);
	
	ОпределитьНастройкиУчетаКапРемонта();
	мСтруктураНастроекКапРемонта.Вставить("ВариантРаспределенияОплатКапРемонт", ВариантРаспределенияОплатКапРемонт);
	
	// Получать дерево задолженности по лицевому счету будем только в том случае, если в расшифровке платежа
	// документа отсутствуют данные по текущему лицевому счету. Если по текущему лицевому счету присутствуют
	// строки в расшифровке платежа, значит дерево задолженностей уже было получено, и все требуемые строки
	// в расшифровке уже имеются.
	НайденныеСтрокиРасшифровкиОбъекта = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("Объект", Объект));
	Если НайденныеСтрокиРасшифровкиОбъекта.Количество() = 0 Тогда
		
		// Заполним "пустую" расшифровку платежа по текущему лицевому счету по дереву задолженности.
		// А далее будем заполнять уже суммы в имеющейся расшифровке платежа.
		ДеревоЗадолженности = Документы.КВП_РегистрацияОплаты.ПолучитьДеревоЗадолженностиПоОбъекту(Дата, Организация, ВидОперации, Объект, мСтруктураНастроекКапРемонта, Истина, РасшифровкаРассрочки, мЗапросПолученияНачисленийИДолговПоЛС, мЗапросПолученияМесяцаНачислений);
		
		Для Каждого ВеткаОбъекта ИЗ ДеревоЗадолженности.Строки Цикл
			
			Для Каждого ВеткаМесяцаНачисления ИЗ ВеткаОбъекта.Строки Цикл
				
				Для Каждого СтрокаЗадолженности ИЗ ВеткаМесяцаНачисления.Строки Цикл
					
					НоваяСтрока = РасшифровкаПлатежа.Добавить();
					НоваяСтрока.Объект          = Объект;
					НоваяСтрока.МесяцНачисления = СтрокаЗадолженности.МесяцНачисления;
					НоваяСтрока.Услуга          = СтрокаЗадолженности.Услуга;
					НоваяСтрока.ДолгСумма       = СтрокаЗадолженности.СуммаДолгаНачисления;
					НоваяСтрока.ДолгПени        = СтрокаЗадолженности.СуммаДолгаПени;
					НоваяСтрока.ДолгРассрочка   = СтрокаЗадолженности.СуммаДолгаРассрочкаТЧ;
					
				КонецЦикла;
				
			КонецЦикла;
			
		КонецЦикла;
		
		// Добавим в расшифровку сведения о начислениях по добровольному страхованию.
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И Не ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
			// Ищем начисления по страхованию за следующий месяц, т.к. начисления за текущий месяц или один из предыдущих оплачивать не имеет смысла.
			МесяцСтрахования = ДобавитьМесяц(Дата, 1);
			Если Не ТаблицаНастроекОплат.Количество() = 0 И Не ТаблицаНастроекОплат.Колонки.Найти("МесяцНачисления") = Неопределено Тогда
				СтрокаНастроекОплаты = ТаблицаНастроекОплат.Получить(0);
				Если ЗначениеЗаполнено(СтрокаНастроекОплаты.МесяцНачисления) Тогда
					// Если в настройках загрузки указан конкретный месяц, на который надо распределить оплату, то ищем начисления по страхованию, проведенные
					// именно в этом месяце. При этом, если начисляли страхование, например, в Марте, то они относятся к Маю.
					МесяцСтрахования = ДобавитьМесяц(СтрокаНастроекОплаты.МесяцНачисления, 2);
				КонецЕсли;
			КонецЕсли;
			
			НачисленияПоСтрахованию = КВП_ПолучитьНачисленияПоДобровольномуСтрахованию(Ссылка, МесяцСтрахования, Организация, Объект, УслугаДобровольногоСтрахования);
			
			Если Не НачисленияПоСтрахованию.Количество() = 0 Тогда
				КВП_ДобавитьРасшифровкуПлатежаПоСтрахованию(РасшифровкаПлатежа, НачисленияПоСтрахованию, 0, СведенияОДобровольномСтраховании);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ЕстьНастройкиПериодов = Ложь;
	
	// В текущей реализации "Таблица настроек оплат" представляет собой таблицу значений настроек оплат строки реестра.
	// Она содержит только одну строку, в которой обязательно содержится сумма оплаты, а также может содержаться
	// информация об услуге и/или месяце начисления, на которые производить распределение оплаты.
	Для Каждого СтрокаОплаты Из ТаблицаНастроекОплатВрем Цикл
		
		ПараметрыОтбора = Новый Структура;
		// В общем случае поиск в расшифровке будем производить только по лицевому счету.
		// Если же дополнительно имеются настройки распределения по услуге или по месяцу начисления,
		// то добавим их (при наличии).
		ПараметрыОтбора.Вставить("Объект", Объект);
		
		// Добавим услугу в отбор.
		// Примечание: услуга есть всегда, т.к. в данную процедуру попадаем только при наличии услуги в настройках оплаты.
		ПараметрыОтбора.Вставить("Услуга", СтрокаОплаты.Услуга);
		
		// Если в настройках распределения имеется месяц начисления, то добавим его в отбор.
		Если ЗначениеЗаполнено(СтрокаОплаты.МесяцНачисления) Тогда
			ЕстьНастройкиПериодов = Истина;
			СтрокаОплаты.МесяцНачисления = НачалоДня(КонецМесяца(СтрокаОплаты.МесяцНачисления));
			ПараметрыОтбора.Вставить("МесяцНачисления", СтрокаОплаты.МесяцНачисления);
		КонецЕсли;
		
		// Найдем в расшифровке платежа строки по текущему лицевому счету и (при наличии)
		// по услуге/месяцу начисления. Так как дерево задолженности по лицевому счету
		// получается в отсортированном по месяцам виде, то и строки расшифровки также
		// отсортированы по месяцу начисления, начиная от самого раннего.
		НайденныеСтрокиРасшифровки = РасшифровкаПлатежа.НайтиСтроки(ПараметрыОтбора);
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию И СтрокаОплаты.Услуга = УслугаДобровольногоСтрахования Тогда
			// Если оплачиваем начисления по добровольному страхованию, то:
			//  1. В расшифровке платежа может быть только 1 строка с начислениями по добровольному страхованию.
			//  2. Сумма оплаты должна быть в точности равна сумме начисления по добровольному страхованию. Т.к.:
			//    - Добровольное страхование не может быть оплачено не полностью.
			//    - Авансы на добровольное страхование распределять нельзя.
			Если СтрокаОплаты.Сумма > 0 И НайденныеСтрокиРасшифровки.Количество() = 1 Тогда
				СтрокаРасшифровки = НайденныеСтрокиРасшифровки.Получить(0);
				
				Если СтрокаРасшифровки.ДолгСумма = СтрокаОплаты.Сумма Тогда
					СтрокаРасшифровки.Сумма = СтрокаОплаты.Сумма;
					СтрокаОплаты.Сумма      = 0;
					
					// Надо зафиксировать факт оплаты в табличной части "СведенияОДобровольномСтраховании", чтобы при проведении
					// документа были сформированы записи в регистрах начисления, соответствующие начислению добровольного страхования.
					// (начисление добровольного страхования отражается в регистах начисления только в случае оплаты).
					Если Не НачисленияПоСтрахованию = Неопределено Тогда
						Для Каждого СтрокаНачисленияПоСтрахованию Из НачисленияПоСтрахованию Цикл
							ЗаполнитьЗначенияСвойств(СведенияОДобровольномСтраховании.Добавить(), СтрокаНачисленияПоСтрахованию);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			Для Каждого СтрокаРасшифровки Из НайденныеСтрокиРасшифровки Цикл
				
				Если СтрокаОплаты.Сумма <= 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаНаДолги     = 0;
				СуммаНаДолгиПени = 0;
				
				СуммаОбъекта = СтрокаОплаты.Сумма;
				
				// В общем случае возможны ситуации, когда несколько строк оплат выполняются по одному лицевому счету,
				// при этом даже возможно, что имеются одинаковые настройки оплаты (по услуге и/или месяцу начисления).
				// Может быть ситуация, что одна оплата уже частично "погасила" долг в строке расшифровки, а следующая
				// оплата также должна "гасить" долг по этой же строке расшифровки (частично или полностью). Поэтому необходимо
				// учитывать уже имеющиеся суммы погашения долгов в строках расшифровки.
				СтруктНачисленийИДолгов = Новый Структура;
				СтруктНачисленийИДолгов.Вставить("СуммаОборота",     0);
				СтруктНачисленийИДолгов.Вставить("СуммаОстатка",     СтрокаРасшифровки.ДолгСумма - СтрокаРасшифровки.Сумма);
				СтруктНачисленийИДолгов.Вставить("СуммаОборотаПени", 0);
				СтруктНачисленийИДолгов.Вставить("СуммаОстаткаПени", СтрокаРасшифровки.ДолгПени - СтрокаРасшифровки.Пени);
				
				КВП_РаспределениеСумм(мНастройкиУчетнойПолитикиТСЖ,
									  СуммаОбъекта,
									  0,
									  СуммаНаДолги,
									  0,
									  СуммаНаДолгиПени,
									  СтруктНачисленийИДолгов,
									  ,
									  Ложь);
				
				СтрокаРасшифровки.Сумма = СтрокаРасшифровки.Сумма + СуммаНаДолги;
				СтрокаРасшифровки.Пени  = СтрокаРасшифровки.Пени  + СуммаНаДолгиПени;
				
				// В случае когда в строке реестра указаны и период оплаты и услуга, то всю сумму оплаты нужно
				// распределить на текущий период по текущей услуге. Таким образом, сумму, нераспределенную на долги
				// по услуге и пени, нужно полностью распределить авансом на услугу в текущем периоде. Для этой цели
				// вводится переменная "РаспределеннаяСуммаСверхДолгов", в которую в указанных условиях помещается
				// остаток, распределенный сверхдолгов, для последующего вычитания из основной суммы оплаты строки реестра.
				РаспределеннаяСуммаСверхДолгов = 0;
				
				// Если в таблице оплат указан месяц начисления,
				// то полностью распределим суммы оплаты на текущий период по текущей услуге.
				Если ЕстьНастройкиПериодов
				   И СуммаОбъекта > 0 Тогда
					СтрокаРасшифровки.Сумма = СтрокаРасшифровки.Сумма + СуммаОбъекта;
					РаспределеннаяСуммаСверхДолгов = СуммаОбъекта;
				КонецЕсли;
				
				СтрокаОплаты.Сумма = СтрокаОплаты.Сумма - СуммаНаДолги - СуммаНаДолгиПени - РаспределеннаяСуммаСверхДолгов;
				
			КонецЦикла;
			
			ПараметрыОтбора = Новый Структура("Объект,Услуга,МесяцНачисления");
			ПараметрыОтбора.Объект = Объект;
			
			МесяцНачисленияДокумента = НачалоДня(КонецМесяца(Дата));
			
			КВП_РазделитьНачисленияИРассрочку(РасшифровкаПлатежа, Объект);
			
			// Заполним расшифровку платежа для нераспределенных оплат.
			
			// Не распределенные суммы к оплате по текущей услуге относим по периодам в соответствии с правилом:
			// 1. Если в реестре платежей указаны периоды оплаты по услугам, то относим данные нераспределенные суммы
			//    к данным указанным периодам.
			// 2. Если в реестре платежей периоды оплат не указаны, то относим данные нераспределенные суммы к периоду
			// текущего документа "Регистрация оплаты".
			
			Если СтрокаОплаты.Сумма <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			РаспределяемыеУслуги = Новый Массив;
			РаспределяемыеУслуги.Добавить(СтрокаОплаты.Услуга);
			
			ТаблицаРассрочки = Документы.УПЖКХ_ЗаявлениеНаРассрочку.ПолучитьТаблицуОстатковПоРассрочке(Организация, Объект, РаспределяемыеУслуги, Дата);
			Если Не ТаблицаРассрочки.Количество() = 0 Тогда
				КВП_РаспределитьАвансНаРассрочку(РасшифровкаПлатежа, РасшифровкаРассрочки, ТаблицаРассрочки, СтрокаОплаты.Сумма);
				
				Если СтрокаОплаты.Сумма = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(ПараметрыОтбора, СтрокаОплаты);
			Если НЕ ЕстьНастройкиПериодов Тогда
				ПараметрыОтбора.МесяцНачисления = МесяцНачисленияДокумента;
			КонецЕсли;
			
			МассивСтрокРасшифровки = РасшифровкаПлатежа.НайтиСтроки(ПараметрыОтбора);
			
			Если МассивСтрокРасшифровки.Количество() = 0 Тогда
				СтрокаРасшифровки = РасшифровкаПлатежа.Добавить();
				СтрокаРасшифровки.Объект = Объект;
				ЗаполнитьЗначенияСвойств(СтрокаРасшифровки, СтрокаОплаты);
			Иначе
				СтрокаРасшифровки = МассивСтрокРасшифровки[0];
				СтрокаРасшифровки.Сумма = СтрокаРасшифровки.Сумма + СтрокаОплаты.Сумма;
			КонецЕсли;
			
			// если настройки периода не указаны, то отнесем оплату на месяц начисления.
			Если НЕ ЕстьНастройкиПериодов Тогда
				СтрокаРасшифровки.МесяцНачисления = МесяцНачисленияДокумента;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	ФлагРедактирования = Истина;
	
КонецПроцедуры // ЗаполнитьРасшифровкуПлатежаПоТаблице()

// Возвращает результат проверки сформированных документов оплат и проведение документа регистраци оплаты
//  по переданной таблице оплат.
//
// Параметры:
// Объект - Объект - ссылка на лицевой счет.
//
Функция ЕстьСформированныеДокументыОплатИПроведен(Объект) Экспорт
	
	ЕстьДокументыОплаты = Ложь;
	Результат           = Ложь;
	
	Для Каждого СтрокаЛицевогоСчета Из Объект.ЛицевыеСчета Цикл
		
		Если ЗначениеЗаполнено(СтрокаЛицевогоСчета.ДокументОплаты) Тогда
			ЕстьДокументыОплаты = Истина;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Если Объект.Проведен И ЕстьДокументыОплаты Тогда
		Результат= Истина;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

////////////////////////////////////////////////////////////////////////////////
// ВСПОМОГАТЕЛЬНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

// Процедура определяет настройки учета кап. ремонта.
//
Процедура ОпределитьНастройкиУчетаКапРемонта()
	
	Если мСтруктураНастроекКапРемонта = Неопределено Тогда
		мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	КонецЕсли;
	
КонецПроцедуры

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ФОРМИРОВАНИЯ ДОКУМЕНТОВ ОТРАЖЕНИЯ ОПЛАТ В РЕГЛ. УЧЕТЕ

// Получает таблицу контрагентов из табличной части "Лицевые счета".
Функция ПолучитьТаблицуКонтрагентовЛС(ТолькоПустыеДокументы = Истина, ИсключитьСтрокиСПустымиСведениямиДляВзаиморасчетов = Ложь, СообщитьОбОшибках = Ложь, ЭтоОплатаПлатежнойКартой = Ложь)
	
	Запрос = Новый Запрос();
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаЛС.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЛС.Объект КАК ЛицевойСчет,
	|	ТаблицаЛС.ДокументОплаты КАК ДокументОплаты,
	|	ТаблицаЛС.Сумма КАК Сумма
	|ПОМЕСТИТЬ втЛицевыеСчета
	|ИЗ
	|	&ЛицевыеСчета КАК ТаблицаЛС
	|ГДЕ
	|	НЕ ТаблицаЛС.Объект = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|	И &УсловиеНаДокументОплаты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЛицевыеСчета.НомерСтроки,
	|	ЛицевыеСчета.ЛицевойСчет,
	|	ЛицевыеСчета.ДокументОплаты,
	|	ЛицевыеСчета.Сумма,
	|	ЕСТЬNULL(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЕСТЬNULL(УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ЛОЖЬ КАК СтороннийСчетКР
	|ПОМЕСТИТЬ втТаблицаКонтрагентов
	|ИЗ
	|	втЛицевыеСчета КАК ЛицевыеСчета
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|				&Дата,
	|				Организация = &Организация
	|					И ЛицевойСчет В
	|						(ВЫБРАТЬ
	|							втЛицевыеСчета.ЛицевойСчет
	|						ИЗ
	|							втЛицевыеСчета КАК втЛицевыеСчета)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|		ПО ЛицевыеСчета.ЛицевойСчет = УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаКонтрагентов.НомерСтроки,
	|	втТаблицаКонтрагентов.ЛицевойСчет,
	|	втТаблицаКонтрагентов.ДокументОплаты,
	|	втТаблицаКонтрагентов.Сумма,
	|	втТаблицаКонтрагентов.Контрагент,
	|	втТаблицаКонтрагентов.Договор,
	|	втТаблицаКонтрагентов.СтороннийСчетКР,
	|	ЕСТЬNULL(втТаблицаКонтрагентов.Договор.ВидВзаиморасчетов, ЗНАЧЕНИЕ(Справочник.ВидыВзаиморасчетов.ПустаяСсылка)) КАК ВидВзаиморасчетов
	|ПОМЕСТИТЬ ТаблицаКонтрагентов
	|ИЗ
	|	втТаблицаКонтрагентов КАК втТаблицаКонтрагентов";
	
	Запрос.УстановитьПараметр("Дата",         Дата);
	Запрос.УстановитьПараметр("ЛицевыеСчета", ЛицевыеСчета);
	Запрос.УстановитьПараметр("Организация",  Организация);
	
	// Условие на документы оплаты.
	ТекстУсловияНаДокументОплаты = "ИСТИНА";
	Если ТолькоПустыеДокументы Тогда
		
		// Текст условия.
		ТекстУсловияНаДокументОплаты = "ТаблицаЛС.ДокументОплаты В(&СписокПустыхСсылок)";
		
		// Определим параметр со списком пустых ссылок.
		СписокПустыхСсылок = Новый СписокЗначений();
		СписокПустыхСсылок.Добавить(Неопределено);
		
		// Пустые ссылки типов из метаданных.
		ТипыДокументов = ЭтотОбъект.Метаданные().ТабличныеЧасти.ЛицевыеСчета.Реквизиты.ДокументОплаты.Тип.Типы();
		Для Каждого ТекТип Из ТипыДокументов Цикл
			СписокПустыхСсылок.Добавить(Новый(ТекТип));
		КонецЦикла;
		
		Запрос.УстановитьПараметр("СписокПустыхСсылок", СписокПустыхСсылок);
		
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&УсловиеНаДокументОплаты", ТекстУсловияНаДокументОплаты);
	
	Запрос.Выполнить();
	
	Если ЭтоОплатаПлатежнойКартой Тогда
		
		ЗапросОплатаПлатежнойКартой = Новый Запрос;
		ЗапросОплатаПлатежнойКартой.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		
		ЗапросОплатаПлатежнойКартой.Текст =
		"ВЫБРАТЬ
		|	ТаблицаКонтрагентов.НомерСтроки,
		|	ТаблицаКонтрагентов.ЛицевойСчет,
		|	ПРЕДСТАВЛЕНИЕ(ТаблицаКонтрагентов.ЛицевойСчет) КАК ПредставлениеЛицевогоСчета,
		|	ТаблицаКонтрагентов.ДокументОплаты,
		|	ТаблицаКонтрагентов.Сумма,
		|	ТаблицаКонтрагентов.Контрагент,
		|	ТаблицаКонтрагентов.ВидВзаиморасчетов,
		|	ТаблицаКонтрагентов.Договор
		|ИЗ
		|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов";
		
		Результат = ЗапросОплатаПлатежнойКартой.Выполнить();
		
	Иначе
	
		ЗапросПоЗданиям = Новый Запрос;
		ЗапросПоЗданиям.МенеджерВременныхТаблиц = Запрос.МенеджерВременныхТаблиц;
		ЗапросПоЗданиям.Текст =
		"ВЫБРАТЬ
		|	ТаблицаРСЗданий.Здание,
		|	ТаблицаРСЗданий.РасчетныйСчетУслуг,
		|	ТаблицаРСЗданий.РасчетныйСчетУслугКапитальногоРемонта
		|ПОМЕСТИТЬ втРСЗданий
		|ИЗ
		|	РегистрСведений.УПЖКХ_СведенияОбОбслуживающихЗданияОрганизациях.СрезПоследних(&КонецМесяца, ) КАК ТаблицаРСЗданий
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ТаблицаКонтрагентов.Договор,
		|	ТаблицаКонтрагентов.ВидВзаиморасчетов,
		|	ТаблицаКонтрагентов.ДокументОплаты,
		|	ТаблицаКонтрагентов.Контрагент,
		|	ТаблицаКонтрагентов.ЛицевойСчет,
		|	ТаблицаКонтрагентов.НомерСтроки,
		|	ТаблицаКонтрагентов.Сумма,
		|	ЕСТЬNULL(втРСЗданий.РасчетныйСчетУслуг, &ОсновнойСчетОрганизации) КАК РасчетныйСчетУслуг,
		|	ВЫБОР
		|		КОГДА НЕ &ВедетсяРаздельныйУчет
		|			ТОГДА ЕСТЬNULL(втРСЗданий.РасчетныйСчетУслуг, &ОсновнойСчетОрганизации)
		|		КОГДА ЕСТЬNULL(втРСЗданий.РасчетныйСчетУслугКапитальногоРемонта, ИСТИНА) = ИСТИНА
		|			ТОГДА &ОсновнойСчетОрганизации
		|		КОГДА втРСЗданий.РасчетныйСчетУслугКапитальногоРемонта = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА втРСЗданий.РасчетныйСчетУслуг
		|		ИНАЧЕ втРСЗданий.РасчетныйСчетУслугКапитальногоРемонта
		|	КОНЕЦ КАК РасчетныйСчетУслугКапитальногоРемонта,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(втРСЗданий.РасчетныйСчетУслугКапитальногоРемонта, ИСТИНА) = ИСТИНА
		|			ТОГДА ЛОЖЬ
		|		КОГДА втРСЗданий.РасчетныйСчетУслугКапитальногоРемонта.Владелец = &Организация
		|			ТОГДА ЛОЖЬ
		|		КОГДА втРСЗданий.РасчетныйСчетУслугКапитальногоРемонта = ЗНАЧЕНИЕ(Справочник.БанковскиеСчета.ПустаяСсылка)
		|			ТОГДА ЛОЖЬ
		|		КОГДА НЕ &ВедетсяРаздельныйУчет
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК СтороннийСчетКР
		|ИЗ
		|	ТаблицаКонтрагентов КАК ТаблицаКонтрагентов
		|		ЛЕВОЕ СОЕДИНЕНИЕ втРСЗданий КАК втРСЗданий
		|		ПО (втРСЗданий.Здание = ТаблицаКонтрагентов.ЛицевойСчет.Адрес.Владелец)";
		
		Если мСтруктураНастроекКапРемонта = Неопределено Тогда
			мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
		КонецЕсли;
		ЗапросПоЗданиям.УстановитьПараметр("ВедетсяРаздельныйУчет",   мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет);
		ЗапросПоЗданиям.УстановитьПараметр("ОсновнойСчетОрганизации", Организация.ОсновнойБанковскийСчет);
		ЗапросПоЗданиям.УстановитьПараметр("КонецМесяца",             КонецМесяца(Дата));
		ЗапросПоЗданиям.УстановитьПараметр("Организация",             Организация);
		
		Результат = ЗапросПоЗданиям.Выполнить();
		
	КонецЕсли;
	
	ТаблицаКонтрагентовЛС = Результат.Выгрузить();
	
	// Дополнительно переберем полученную таблицу лицевых счетов с целью проверки
	// наличия сведений для взаиморасчетов в 2х случаях:
	// 1. Если необходимо оповестить пользователя о наличии таких лицевых счетов.
	// 2. Либо если необходимо исключить лицевые счета без сведений из полученной таблицы.
	Если ИсключитьСтрокиСПустымиСведениямиДляВзаиморасчетов Или СообщитьОбОшибках Тогда
		
		МассивСтрокДляУдаления = Новый Массив;
		Для Каждого ТекСтрока Из ТаблицаКонтрагентовЛС Цикл
			
			Если ТекСтрока.Контрагент.Пустая() Или ТекСтрока.Договор.Пустая() Тогда
				
				Если СообщитьОбОшибках Тогда
					ТекстСообщения = "Строка №" + ТекСтрока.НомерСтроки + ": по лицевому счету """ + ТекСтрока.ЛицевойСчет + """ отсутствуют сведения для взаиморасчетов.";
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекстСообщения, ТекСтрока.ЛицевойСчет);
				КонецЕсли;
				
				Если ИсключитьСтрокиСПустымиСведениямиДляВзаиморасчетов Тогда
					МассивСтрокДляУдаления.Добавить(ТекСтрока);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		// Удаление строк с незаполненными сведениями для взаиморасчетов при необходимости.
		Для Каждого СтрокаУдаления Из МассивСтрокДляУдаления Цикл
			ТаблицаКонтрагентовЛС.Удалить(СтрокаУдаления);
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТаблицаКонтрагентовЛС;
	
КонецФункции  //ПолучитьТаблицуКонтрагентовЛС()

// Процедура формирует документы "Корректировка долга" для всех строк табличной части "Лицевые счета".
// 
// Параметры:
//  ДопПараметры - структура, содержащая параметры, необходимые для формирования документов "Корректировка долга".
//
Процедура СформироватьКорректировкиДолга_ЖКХ30(ДопПараметры)
	
	// На основании данных табличной части "Лицевые счета" получим иерархическую выборку оплат, дополненную
	// сведениями для взаиморасчетов, с итогами по документу оплаты, контрагенту, договору и объекту.
	РезультатЗапроса = ПолучитьДанныеПоОплатамДляФормированияКорректировокДолга_ЖКХ30(ДопПараметры.ПерезаполнятьСформированныеДокументы);
	
	// Группировка по документу оплаты необходима, потому что в табличной части РО могут быть указаны
	// документы "Корректировка долга", которые необходимо перезаполнять, при соответствующем ответе пользователя.
	ВыборкаПоДокументу = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПоДокументу.Следующий() Цикл
		// Объединение оплат производится по совпадению контрагента и договора. При этом для разных лицевых счетов контрагент
		// может быть один и тот же, но договоры могут быть различные, поэтому используется обход обеих группировок.
		ВыборкаПоКонтрагенту = ВыборкаПоДокументу.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаПоКонтрагенту.Следующий() Цикл
			ВыборкаПоДоговору = ВыборкаПоКонтрагенту.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаПоДоговору.Следующий() Цикл
				
				// Не смотря на то, что для разных лицевых счетов при совпадении договора и контрагента формируется
				// один документ, в табличной части расшифровки данные хранятся именно в разрезе лицевых счетов.
				// Поэтому необходим обход группировки по объекту (лицевым счетам).
				ВыборкаПоОбъекту = ВыборкаПоДоговору.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				КомментарийКДокументу = "Оплата по ";
				СообщениеОбОшибке = "Строки № @ПодстрокаЗамены: не удалось сформировать документ корректировки!";
				ПодстрокаЗамены = "";
				
				Сумма = 0;
				СуммаДолга = 0;
				СуммаПениНаДолг = 0;
				
				МассивНомеровСтрок = Новый Массив;
				
				Пока ВыборкаПоОбъекту.Следующий() Цикл
					
					// Обходя выборку по объекту (по лицевым счетам), заполним комментарий к документу,
					// поочередно добавляя в текст все лицевые счета, по которым выполнена оплата;
					КомментарийКДокументу = КомментарийКДокументу + ВыборкаПоОбъекту.Объект + ", ";
					ВыборкаДеталей = ВыборкаПоОбъекту.Выбрать();
					
					Пока ВыборкаДеталей.Следующий() Цикл
						
						// Обходя выборку по детальным записям (по строкам оплат), заполним сообщение об ошибке
						// (на случай ее возникновения), поочередно добавляя в текст все номера строк табличной части,
						// по которым выполнена оплата.
						// Также заполняем вспомогательный массив "МассивНомеровСтрок", при помощи которого
						// позже будем устанавливать ссылки на сформированный документ в строках табличной части.
						ПодстрокаЗамены = ПодстрокаЗамены + ВыборкаДеталей.НомерСтроки + ", ";
						МассивНомеровСтрок.Добавить(ВыборкаДеталей.НомерСтроки);
						
					КонецЦикла;
					
					Сумма = Сумма + ВыборкаПоОбъекту.Сумма;
					
					// разделим сумму оплаты на сумму погашения долга и сумму аванса
					СтрокиРасшифровки = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("Объект", ВыборкаПоОбъекту.Объект));
					Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
						// Включим в сумму долга сумму оплаченных пени. В случае когда пени отражаются отдельно от начислений,
						// вычтем из суммы долга сумму пени.
						СуммаДолга = СуммаДолга + СтрокаРасшифровки.ДолгСумма + СтрокаРасшифровки.Пени + СтрокаРасшифровки.ДолгРассрочка;
						СуммаПениНаДолг = СуммаПениНаДолг + СтрокаРасшифровки.Пени;
					КонецЦикла;
					
				КонецЦикла;
				
				// Если по договору контрагента имеется отрицательная задолженность, т.е. аванс, то в этом случае в качестве
				// суммы долга берем нулевое значение. Это делается для того, чтобы итоговая сумма на аванс по модулю
				// не увеличилась и суммы кредиторской и дебиторской задолженности в документе корректировки долга не отличались.
				СуммаНаДолг  = Макс(0, Мин(Сумма, СуммаДолга));
				СуммаНаАванс = Сумма - СуммаНаДолг;
				
				// В формируемом сообщении об ошибке заполняем текст по номерам строк табличной части, по которым не удалось
				// сформировать документ корректировки.
				ПодстрокаЗамены = Лев(ПодстрокаЗамены, СтрДлина(ПодстрокаЗамены) - 2);
				СообщениеОбОшибке = СтрЗаменить(СообщениеОбОшибке, "@ПодстрокаЗамены", ПодстрокаЗамены);
				// В формируемом комментарии к документу отсекаем справа лишние символы.
				КомментарийКДокументу = Лев(КомментарийКДокументу, СтрДлина(КомментарийКДокументу) - 2);
				
				// Заполняем структуру параметров для передачи в функцию формирования документа "Корректировка долга".
				ДопПараметры.ДокументКорректировки = ВыборкаПоДоговору.ДокументОплаты;
				ДопПараметры.Контрагент            = ВыборкаПоДоговору.Контрагент;
				ДопПараметры.Договор               = ВыборкаПоДоговору.Договор;
				ДопПараметры.КомментарийКДокументу = КомментарийКДокументу;
				ДопПараметры.СообщениеОбОшибке     = СообщениеОбОшибке;
				ДопПараметры.Сумма                 = Сумма;
				ДопПараметры.СуммаНаДолг           = СуммаНаДолг;
				ДопПараметры.СуммаНаАванс          = СуммаНаАванс;
				ДопПараметры.СуммаПениНаДолг       = СуммаПениНаДолг;
				
				// На основании структуры параметров "ДопПараметры" формируем/перезаполняем документ "Корректировка долга".
				ТекДок = СформироватьДокументКорректировкаДолга_ЖКХ30(ДопПараметры);
				
				// Обходим вспомогательный массив "МассивНомеровСтрок" для установки в строках табличной части "Лицевые счета"
				// ссылок на сформированные документы "Корректировка долга".
				// Поиск строки в ТЧ осуществляем по номеру строки.
				Для Каждого НомерСтроки Из МассивНомеровСтрок Цикл
					
					// Устанавливаем ссылку на документ в строке табличной части.
					СтрокаТабличнойЧасти = ЛицевыеСчета.Найти(НомерСтроки, "НомерСтроки");
					СтрокаТабличнойЧасти.ДокументОплаты = ТекДок;
					
				КонецЦикла;
				
			КонецЦикла; // ВыборкаПоДоговору
		КонецЦикла; // ВыборкаПоКонтрагенту
	КонецЦикла; // ВыборкаПоДокументу
	
КонецПроцедуры // СформироватьКорректировкиДолга_ЖКХ30()

// Функция возвращает результа запроса по данным табличной части "Лицевые счета", дополненный данными
// по контрагентам и их договорам (по сведениям для взаиморасчетов), для последующего
// формирования документов "Корректировка долга".
// 
// Параметры:
//  ПерезаполнятьСформированныеДокументы - булево - признак необходимости перезаполнять созданные ранее документы.
// 
Функция ПолучитьДанныеПоОплатамДляФормированияКорректировокДолга_ЖКХ30(ПерезаполнятьСформированныеДокументы)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицевыхСчетов.НомерСтроки КАК НомерСтроки,
	|	ТаблицаЛицевыхСчетов.Объект КАК Объект,
	|	ТаблицаЛицевыхСчетов.Сумма КАК Сумма,
	|	ТаблицаЛицевыхСчетов.ДокументОплаты КАК ДокументОплаты
	|ПОМЕСТИТЬ ТаблицаЛицевыхСчетов
	|ИЗ
	|	&ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.ЛицевойСчет,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Договор,
	|	УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних.Контрагент
	|ПОМЕСТИТЬ ТаблицаСведенийДляВзаиморасчетов
	|ИЗ
	|	РегистрСведений.УПЖКХ_СведенияДляВзаиморасчетовПоЛС.СрезПоследних(
	|			&Дата,
	|			Организация = &Организация
	|				И ЛицевойСчет В
	|					(ВЫБРАТЬ
	|						ТаблицаЛицевыхСчетов.Объект
	|					ИЗ
	|						ТаблицаЛицевыхСчетов)) КАК УПЖКХ_СведенияДляВзаиморасчетовПоЛССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаЛицевыхСчетов.НомерСтроки,
	|	ТаблицаЛицевыхСчетов.Объект КАК Объект,
	|	ТаблицаЛицевыхСчетов.Сумма КАК Сумма,
	|	&ПодстрокаЗамены,
	|	ЕСТЬNULL(ТаблицаСведенийДляВзаиморасчетов.Договор, ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)) КАК Договор,
	|	ЕСТЬNULL(ТаблицаСведенийДляВзаиморасчетов.Контрагент, ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК Контрагент,
	|	ЛОЖЬ КАК СтрокаОбработана
	|ИЗ
	|	ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТаблицаСведенийДляВзаиморасчетов КАК ТаблицаСведенийДляВзаиморасчетов
	|		ПО (ТаблицаСведенийДляВзаиморасчетов.ЛицевойСчет = ТаблицаЛицевыхСчетов.Объект)
	|ГДЕ
	|	НЕ ТаблицаЛицевыхСчетов.Сумма = 0
	|ИТОГИ
	|	СУММА(Сумма)
	|ПО
	|	ДокументОплаты,
	|	Контрагент,
	|	Договор,
	|	Объект";
	
	// Если флаг "ПерезаполнятьСформированныеДокументы" установлен в значение "ИСТИНА",
	// то получаем ссылки на имеющиеся в табличной части документы Корректировки долга.
	Если ПерезаполнятьСформированныеДокументы Тогда
		
		ТекстВыборкиДокументаОплаты = "ТаблицаЛицевыхСчетов.ДокументОплаты КАК ДокументОплаты";
		
	// Если флаг "ПерезаполнятьСформированныеДокументы" установлен в значение "ЛОЖЬ",
	// то будем получать в качестве документа оплаты пустую ссылку на документ Корректировки долга,
	// чтобы создавать новые документы.
	Иначе
		ТекстВыборкиДокументаОплаты = "ЗНАЧЕНИЕ(Документ.КорректировкаДолга.ПустаяСсылка) КАК ДокументОплаты";
	КонецЕсли;
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ПодстрокаЗамены", ТекстВыборкиДокументаОплаты);
	
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетов", ЛицевыеСчета.Выгрузить());
	Запрос.УстановитьПараметр("Организация",          Организация);
	Запрос.УстановитьПараметр("Дата",                 Дата);
	
	Возврат Запрос.Выполнить();
	
КонецФункции // ПолучитьДанныеПоОплатамДляФормированияКорректировокДолга_ЖКХ30()

// Функция формирует документ "Корректировка долга" на основании структуры переданных параметров.
//
// Параметры:
//  ДопПараметры - структура, содержащая параметры, необходимые для формирования документа "Корректировка долга".
// 
Функция СформироватьДокументКорректировкаДолга_ЖКХ30(ДопПараметры)
	
	Контрагент            = ДопПараметры.Контрагент;
	ДоговорКонтрагента    = ДопПараметры.Договор;
	ДокументКорректировки = ДопПараметры.ДокументКорректировки;
	КомментарийКДокументу = ДопПараметры.КомментарийКДокументу;
	СообщениеОбОшибке     = ДопПараметры.СообщениеОбОшибке;
	Сумма                 = ДопПараметры.Сумма;
	СуммаНаДолг           = ДопПараметры.СуммаНаДолг;
	СуммаНаАванс          = ДопПараметры.СуммаНаАванс;
	СуммаПениНаДолг       = ДопПараметры.СуммаПениНаДолг;
	ВидВзаиморасчетов     = ДоговорКонтрагента.ВидВзаиморасчетов;
	
	ДоговорОператораУказан = Ложь;
	Если ДопПараметры.Свойство("ДоговорОператораПлатежей") Тогда
		Если ЗначениеЗаполнено(ДопПараметры.ДоговорОператораПлатежей) Тогда
			ДоговорОператораУказан = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДоговорОператораУказан Тогда
		ДоговорОператора = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если ЗначениеЗаполнено(ДокументРасчетаСОператоромПлатежей) Тогда
			ДоговорОператора = ДокументРасчетаСОператоромПлатежей.ДоговорКонтрагента;
		Иначе
			УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(ДоговорОператора, ОператорПлатежей, Организация);
		КонецЕсли;
		ДопПараметры.Вставить("ДоговорОператораПлатежей", ДоговорОператора);
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ПерезаполнятьСформированныеДокументы") Тогда
		ДопПараметры.Вставить("ПерезаполнятьСформированныеДокументы", Ложь);
	КонецЕсли;
	
	ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	// шапка документа
	
	// Выполним проверку на необходимость перезаполнять уже существующий документ оплаты.
	Если ЗначениеЗаполнено(ДокументКорректировки) Тогда
		Если ДопПараметры.ПерезаполнятьСформированныеДокументы 
		   И ТипЗнч(ДокументКорректировки) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ДокументОбъект = ДокументКорректировки.ПолучитьОбъект();
			ДокументОбъект.ДебиторскаяЗадолженность.Очистить();
			ДокументОбъект.КредиторскаяЗадолженность.Очистить();
		Иначе
			Если Не ДокументКорректировки = Неопределено И Не ДокументКорректировки.Пустая() Тогда
				ПометитьНаУдалениеОбъектПоСсылке(ДокументКорректировки, Истина);
			КонецЕсли;
			ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
	КонецЕсли;
	
	ДокументОбъект.Дата                     = Дата;
	ДокументОбъект.Организация              = Организация;
	ДокументОбъект.ВидОперации              = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ДокументОбъект.КонтрагентДебитор        = Контрагент;
	ДокументОбъект.КонтрагентКредитор       = ОператорПлатежей;
	ДокументОбъект.Комментарий              = КомментарийКДокументу;
	
	УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, мВалютаРегламентированногоУчета);
	
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(	Организация, 
																				Контрагент, 
																				ДоговорКонтрагента);
	
	// дебеторка по сумме долга
	Если СуммаНаДолг > 0 Тогда
		НоваяСтрока = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
		
		НоваяСтрока.ДоговорКонтрагента      = ДоговорКонтрагента;
		
		НоваяСтрока.Сумма                   = СуммаНаДолг;
		НоваяСтрока.СуммаВзаиморасчетов     = СуммаНаДолг;
		
		НоваяСтрока.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
		НоваяСтрока.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
		
		// Если отражаем оплату по капремонту, а в УП установлено, что капремонт отражается на отдельных счетах,
		// то выполним подмену счетов расчета на те, которые указаны в УП.
		Если ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт
			 И мНастройкиУчетнойПолитикиТСЖ.ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета Тогда
			СчетаУчета.СчетРасчетовПокупателя = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
			СчетаУчета.СчетАвансовПокупателя  = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
		КонецЕсли;
		
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
		
		ОтражатьПениОтдельно = Ложь;
		
		// Отразим оплату пени по капремонту на отдельных счетах, если установлена соответствующая настройка в УП.
		Если ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт
			 И мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета Тогда
			
			СчетаУчетаПени = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, ВидВзаиморасчетов, Истина);
			ОтражатьПениОтдельно = Истина;
			
		// Отразим оплату пени на отдельных счетах, если установлена соответствующая настройка в УП.
		ИначеЕсли Не ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт
				  И мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета Тогда
			
			СчетаУчетаПени = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, ВидВзаиморасчетов, Ложь);
			ОтражатьПениОтдельно = Истина;
			
		КонецЕсли;
		
		// Отразим оплату пени на отдельном счете отдельно от начислений,
		// если в Учетной политике ЖКХ установлена соответствующая настройка:
		Если ОтражатьПениОтдельно И Не СуммаПениНаДолг = 0 Тогда
			
			// Если для организации и вида взаиморасчетов имеется отдельная настройка счетов учета расчетов по пеням,
			// то отделим сумму пени строки оплаты от остальной суммы оплаты по лицевому счету:
			Если Не СчетаУчетаПени.СчетУчетаРасчетов.Пустая() Тогда
				
				// Если сумма на основной долг по услугам отлична от 0 и отличается
				// от суммы долга по пени, то добавим еще одну строку
				// дебиторской задолженности, в которой отразим сумму пени, вычтя ее из исходной
				// строки и установив счета учета по пеням.
				Если НЕ СуммаНаДолг = СуммаПениНаДолг Тогда
					// Добавляем новую строку по пеням на основании строки основного долга и меняем сумму.
					СтрокаПени = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
					ЗаполнитьЗначенияСвойств(СтрокаПени, НоваяСтрока);
					СтрокаПени.Сумма               = СуммаПениНаДолг;
					СтрокаПени.СуммаВзаиморасчетов = СуммаПениНаДолг;
					// Установим счета расчетов по пени:
					СтрокаПени.СчетУчетаРасчетов = СчетаУчетаПени.СчетУчетаРасчетов;
					
					// Уменьшим в исходной строке основной долг по услугам на сумму оплаченных пени:
					НоваяСтрока.Сумма               = НоваяСтрока.Сумма - СуммаПениНаДолг;
					НоваяСтрока.СуммаВзаиморасчетов = НоваяСтрока.СуммаВзаиморасчетов - СуммаПениНаДолг;
					
				Иначе // Сумма долга равняется сумме пени, а значит вся сумма и является пени.
					
					НоваяСтрока.СчетУчетаРасчетов = СчетаУчетаПени.СчетУчетаРасчетов;
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
	// дебеторка по сумме аванса
	Если СуммаНаАванс > 0 Тогда
		НоваяСтрока = ДокументОбъект.ДебиторскаяЗадолженность.Добавить();
		
		НоваяСтрока.ДоговорКонтрагента      = ДоговорКонтрагента;
		
		НоваяСтрока.Сумма                   = СуммаНаАванс;
		НоваяСтрока.СуммаВзаиморасчетов     = СуммаНаАванс;
		
		НоваяСтрока.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
		НоваяСтрока.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
		
		НоваяСтрока.СчетУчетаРасчетов       = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	// Документ сам подставляет необходимые счета из регистра сведений "Счета расчетов с контрагентами" и отражает факт проведения
	// взаимозачета между банком и контрагентом по л/с.
	// Подстановка счетов на закладке "Счета учета" требуется для дополнительной корреспонденции, в которой нет необходимости в нашем случае.
	//ДокументОбъект.СчетДт = СчетаУчета.СчетРасчетов;
	//ДокументОбъект.СчетКт = СчетаУчета.СчетРасчетов;
	
	// кредиторка
	НоваяСтрока = ДокументОбъект.КредиторскаяЗадолженность.Добавить();
	
	НоваяСтрока.ДоговорКонтрагента   = ДопПараметры.ДоговорОператораПлатежей;
	НоваяСтрока.Сделка               = ДокументРасчетаСОператоромПлатежей;
	
	НоваяСтрока.Сумма                = Сумма;
	НоваяСтрока.СуммаВзаиморасчетов  = Сумма;
	
	НоваяСтрока.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
	НоваяСтрока.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
	
	Если Не ДопПараметры.Свойство("СчетУчетаОператораПлатежей") Тогда
		СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(
																Организация, 
																ОператорПлатежей, 
																ДопПараметры.ДоговорОператораПлатежей);
		ДопПараметры.Вставить("СчетУчетаОператораПлатежей", СчетаУчета.СчетРасчетов);
	КонецЕсли;
	
	НоваяСтрока.СчетУчетаРасчетов = ДопПараметры.СчетУчетаОператораПлатежей;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки());
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(СообщениеОбОшибке);
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции // СформироватьДокументКорректировкаДолга_ЖКХ30()

///////////////////////////////////////
// ЖКХ 2.0 +

// Процедура устанавливает значение пометки на удаление объекта.
//
// Параметры:
//  ДокументСсылка  - ссылка на документы ДокументСсылка.СписаниеСРасчетногоСчета,
//                                        ДокументСсылка.ПоступлениеНаРасчетныйСчет,
//                                        ДокументСсылка.РасходныйКассовыйОрдер,
//                                        ДокументСсылка.КорректировкаДолга,
//                                        ДокументСсылка.ПриходныйКассовыйОрдер.
//
Процедура ПометитьНаУдалениеОбъектПоСсылке(Ссылка, Пометка) Экспорт
	
	Попытка
		ТекущийДокумент = Ссылка.ПолучитьОбъект();
		ТекущийДокумент.УстановитьПометкуУдаления(Пометка);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры // ПометитьНаУдалениеОбъектПоСсылке()

// Формирует документ "ПКО" / "РКО" для указанной строки табличной части.
//
// Параметры:
//  СтрокаТабличнойЧасти – строка табличной части.
//
// Возвращаемое значение:
//  Ссылка на сформированный ПКО.
//
Функция СформироватьДокументКассовыйОрдер(СтрокаТабличнойЧасти, ВидДокумента, ДопПараметры = Неопределено)
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура();
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ПерезаполнятьСформированныеДокументы") Тогда
		ДопПараметры.Вставить("ПерезаполнятьСформированныеДокументы", Ложь);
	КонецЕсли;
	
	ТаблицаСуммыОплатПоСтавкамНДС = Новый ТаблицаЗначений;
	
	Если ДопПараметры.Свойство("ТаблицаСуммыОплатПоСтавкамНДС") Тогда
		ТаблицаСуммыОплатПоСтавкамНДС = ДопПараметры.ТаблицаСуммыОплатПоСтавкамНДС;
	КонецЕсли;
	
	Сумма = СтрокаТабличнойЧасти.Сумма;
	
	Контрагент         = СтрокаТабличнойЧасти.Контрагент;
	ДоговорКонтрагента = СтрокаТабличнойЧасти.Договор;
	
	ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	СчетаУчета = ПолучитьСчетаУчета(Контрагент, ДоговорКонтрагента);
	
	// Выполним проверку на необходимость перезаполнять уже существующий документ оплаты.
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
		Если ДопПараметры.ПерезаполнятьСформированныеДокументы 
		 И ТипЗнч(СтрокаТабличнойЧасти.ДокументОплаты) = Тип("ДокументСсылка." + ВидДокумента) Тогда
			ДокументОбъект = СтрокаТабличнойЧасти.ДокументОплаты.ПолучитьОбъект();
		Иначе
			Если Не СтрокаТабличнойЧасти.ДокументОплаты = Неопределено И Не СтрокаТабличнойЧасти.ДокументОплаты.Пустая() Тогда
				ПометитьНаУдалениеОбъектПоСсылке(СтрокаТабличнойЧасти.ДокументОплаты, Истина);
			КонецЕсли;
			ДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы[ВидДокумента].СоздатьДокумент();
	КонецЕсли;
	
	// шапка документа
	
	Если ВидДокумента = "ПриходныйКассовыйОрдер" Тогда
		
		Если НЕ ДоговорКонтрагента = Неопределено
			И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ПрочийПриход;
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			ДокументОбъект.СубконтоКт1 = Контрагент;
			ДокументОбъект.СубконтоКт2 = ДоговорКонтрагента;
			
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
		КонецЕсли;
		
		ДокументОбъект.ПринятоОт   = Контрагент.Наименование;
		
	ИначеЕсли ВидДокумента = "РасходныйКассовыйОрдер" Тогда
		
		Если НЕ ДоговорКонтрагента = Неопределено
			И ДоговорКонтрагента.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ПрочийРасход;
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			ДокументОбъект.СубконтоДт1 = Контрагент;
			ДокументОбъект.СубконтоДт2 = ДоговорКонтрагента;
			
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратПокупателю;
		КонецЕсли;
		
		ДокументОбъект.Выдать      = Контрагент.Наименование;
		
	КонецЕсли;
	
	ДокументОбъект.Дата               = Дата;
	ДокументОбъект.Организация        = Организация;
	ДокументОбъект.Контрагент         = Контрагент;
	ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
	ДокументОбъект.СуммаДокумента     = Сумма;
	
	ДокументОбъект.Основание = ИсточникОплаты.Наименование;
	
	// Стандартное заполнение документа.
	УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОбъект, УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь(), мВалютаРегламентированногоУчета);
	
	ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
	
	ДокументОбъект.СчетКасса = ПланыСчетов.Хозрасчетный.КассаОрганизации;
	
	// расшифровка платежа
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	
	Отбор = Новый Структура("НомерСтроки", СтрокаТабличнойЧасти.НомерСтроки);
	СтрокиОплатПоСтавкамНДСДляЛС = ТаблицаСуммыОплатПоСтавкамНДС.НайтиСтроки(Отбор);
	
	Для Каждого СтрокаОплаты Из СтрокиОплатПоСтавкамНДСДляЛС Цикл
		
		СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
		
		СтрокаПлатеж.ДоговорКонтрагента = СтрокаТабличнойЧасти.Договор;
		
		СтрокаПлатеж.СуммаПлатежа        = СтрокаОплаты.Сумма;
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаОплаты.Сумма;
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		
		// Когда пени отражаются на отдельных счетах учета, то в строке с оплатой пеней подменим счета учета.
		Если СтрокаОплаты.ЭтоПениОтдельныеСчета Тогда
			
			СчетаКапремонт = (ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт);
			СтруктураСчетовУчетаРасчетовПоПени = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, СтрокаТабличнойЧасти.ВидВзаиморасчетов, СчетаКапремонт);
			
			Если Не СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаРасчетов.Пустая() Тогда
				
				// Изменим исходные счета учета расчетов контрагента на счета учета по пеням из учетной политики ЖКХ.
				СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаРасчетов;
				
				// Если отдельный счет расчетов по авансам для пеней не заполнен, то оставляем счет расчетов
				// с контрагентом, в противном случае заменяем его на счет расчетов по авансам для пеней.
				Если НЕ СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаАвансов.Пустая() Тогда
					СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаАвансов;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
		// Заполнение реквизитов НДС.
		СтрокаПлатеж.СтавкаНДС = СтрокаОплаты.СтавкаНДС;
		
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УПЖКХ_ТиповыеМетодыСервер.СтатьяДДСПоУмолчанию(ДокументОбъект.ВидОперации);
		
		Если УчетУСН.ЕстьАвансыПокупателей(ДокументОбъект.ВидОперации) Тогда
			СтрокаПлатеж.ПорядокОтраженияАванса = УПЖКХ_ТиповыеМетодыСервер.ПорядокОтраженияАванса(Организация, Дата);
		КонецЕсли;
		
	КонецЦикла;
	
	// Пересчитаем сумму НДС в каждой строке расшифровки платежа.
	Для Каждого СтрокаРасшифровкиПлатежа Из ДокументОбъект.РасшифровкаПлатежа Цикл
		Документы.КВП_РегистрацияОплаты.ПересчитатьСуммуНДС(СтрокаРасшифровкиПлатежа);
	КонецЦикла;
	
	// Вызовем типовые механизмы заполнения по УСН.
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ДокументОбъект);
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ДокументОбъект, ПараметрыУСН);
	
	СтруктураСуммКУДиР = УПЖКХ_НалоговыйУчетУСН.ПолучитьСтруктуруСуммКУДиР(Организация, Дата, ДокументОбъект, ЭтотОбъект, , мНастройкиУчетнойПолитикиТСЖ, СтрокаТабличнойЧасти.НомерСтроки);
	
	Если НЕ СтруктураСуммКУДиР = Неопределено Тогда
		ДокументОбъект.ДополнительныеСвойства.Вставить("СтруктураСуммКУДиР", СтруктураСуммКУДиР);
		ДокументОбъект.ДополнительныеСвойства.Вставить("ДанныеПоКУДиРПолны", ДокументОбъект.ЭтоНовый());
		ДокументОбъект.ДополнительныеСвойства.Вставить("РегистрацияОплаты",  ЭтотОбъект);
	КонецЕсли;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Для контрагента """ + Контрагент + """: не удалось сформировать ПКО!" + Символы.ПС + ОписаниеОшибки());
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции // СформироватьДокументКассовыйОрдер()

// Формирует документ "Корректировка долга" для указанной строки табличной части.
Функция СформироватьДокументКорректировкаДолга_ЖКХ20(СтрокаТабличнойЧасти, ДопПараметры = Неопределено)
	
	Сумма = СтрокаТабличнойЧасти.Сумма;
	
	// разделим сумму оплаты на сумму погашения долга и сумму аванса
	СуммаДолга = 0;
	СтрокиРасшифровки = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("Объект", СтрокаТабличнойЧасти.Объект));
	Для Каждого СтрокаРасшифровки Из СтрокиРасшифровки Цикл
		СуммаДолга = СуммаДолга + СтрокаРасшифровки.ДолгСумма + СтрокаРасшифровки.ДолгПени;
	КонецЦикла;
	
	// Если по лицевому счету имеется отрицательная задолженность, т.е. аванс, то в этом случае в качестве
	// суммы долга берем нулевое значение. Это делается для того, чтобы итоговая сумма на аванс по модулю
	// не увеличилась и суммы кредиторской и дебиторской задолженности в документе корректировки долга не отличались.
	СуммаНаДолг  = Макс(0, Мин(Сумма, СуммаДолга));
	СуммаНаАванс = Сумма - СуммаНаДолг;
	
	// контрагент по лицевому счету
	Контрагент         = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(СтрокаТабличнойЧасти.Объект, Организация, , "Контрагент");
	ДоговорКонтрагента = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(СтрокаТабличнойЧасти.Объект, Организация, , "Договор");
	
	// контрагент-оператор приема платежей
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура();
	КонецЕсли;
	
	ДоговорОператораУказан = Ложь;
	Если ДопПараметры.Свойство("ДоговорОператораПлатежей") Тогда
		Если ЗначениеЗаполнено(ДопПараметры.ДоговорОператораПлатежей) Тогда
			ДоговорОператораУказан = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ДоговорОператораУказан Тогда
		ДоговорОператора = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если ЗначениеЗаполнено(ДокументРасчетаСОператоромПлатежей) Тогда
			ДоговорОператора = ДокументРасчетаСОператоромПлатежей.ДоговорКонтрагента;
		Иначе
			УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(ДоговорОператора, ОператорПлатежей, Организация);
		КонецЕсли;
		ДопПараметры.Вставить("ДоговорОператораПлатежей", ДоговорОператора);
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ПерезаполнятьСформированныеДокументы") Тогда
		ДопПараметры.Вставить("ПерезаполнятьСформированныеДокументы", Ложь);
	КонецЕсли;
	
	ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	// шапка документа
	
	// Выполним проверку на необходимость перезаполнять уже существующий документ оплаты.
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
		Если ДопПараметры.ПерезаполнятьСформированныеДокументы 
		   И ТипЗнч(СтрокаТабличнойЧасти.ДокументОплаты) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			ДокументОбъект = СтрокаТабличнойЧасти.ДокументОплаты.ПолучитьОбъект();
			ДокументОбъект.СуммыДолга.Очистить();
		Иначе
			Если Не СтрокаТабличнойЧасти.ДокументОплаты = Неопределено И Не СтрокаТабличнойЧасти.ДокументОплаты.Пустая() Тогда
				ПометитьНаУдалениеОбъектПоСсылке(СтрокаТабличнойЧасти.ДокументОплаты, Истина);
			КонецЕсли;
			ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
		КонецЕсли;
	Иначе
		ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
	КонецЕсли;
	
	ДокументОбъект.Дата                     = Дата;
	ДокументОбъект.Организация              = Организация;
	ДокументОбъект.ВидОперации              = Перечисления.ВидыОперацийКорректировкаДолга.Прочее;
	ДокументОбъект.КонтрагентДебитор        = Контрагент;
	ДокументОбъект.КонтрагентКредитор       = ОператорПлатежей;
	ДокументОбъект.Комментарий              = "Оплата по " + СтрокаТабличнойЧасти.Объект;
	
	УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, мВалютаРегламентированногоУчета);
	
	// дебеторка по сумме долга
	Если СуммаНаДолг > 0 Тогда
		НоваяСтрока = ДокументОбъект.СуммыДолга.Добавить();
		
		НоваяСтрока.ВидЗадолженности        = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.ДоговорКонтрагента      = ДоговорКонтрагента;
		
		НоваяСтрока.Сумма                   = СуммаНаДолг;
		НоваяСтрока.СуммаВзаиморасчетов     = СуммаНаДолг;
		
		НоваяСтрока.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
		НоваяСтрока.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
		
		СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(
																			Организация, 
																			Контрагент, 
																			ДоговорКонтрагента);
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
	КонецЕсли;
	
	// дебеторка по сумме аванса
	Если СуммаНаАванс > 0 Тогда
		НоваяСтрока = ДокументОбъект.СуммыДолга.Добавить();
		
		НоваяСтрока.ВидЗадолженности        = Перечисления.ВидыЗадолженности.Дебиторская;
		НоваяСтрока.ДоговорКонтрагента      = ДоговорКонтрагента;
		
		НоваяСтрока.Сумма                   = СуммаНаАванс;
		НоваяСтрока.СуммаВзаиморасчетов     = СуммаНаАванс;
		
		НоваяСтрока.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
		НоваяСтрока.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
		
		СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(
																	Организация, 
																	Контрагент, 
																	ДоговорКонтрагента);
		НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетАвансовПокупателя;
	КонецЕсли;
	
	// кредиторка
	НоваяСтрока = ДокументОбъект.СуммыДолга.Добавить();
	
	НоваяСтрока.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Кредиторская;
	НоваяСтрока.ДоговорКонтрагента   = ДопПараметры.ДоговорОператораПлатежей;
	НоваяСтрока.Сделка               = ДокументРасчетаСОператоромПлатежей;
	
	НоваяСтрока.Сумма                = Сумма;
	НоваяСтрока.СуммаВзаиморасчетов  = Сумма;
	
	НоваяСтрока.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
	НоваяСтрока.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
	
	Если Не ДопПараметры.Свойство("СчетУчетаОператораПлатежей") Тогда
		СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(
																Организация, 
																ОператорПлатежей, 
																ДопПараметры.ДоговорОператораПлатежей);
		ДопПараметры.Вставить("СчетУчетаОператораПлатежей", СчетаУчета.СчетРасчетов);
	КонецЕсли;
	
	НоваяСтрока.СчетУчетаРасчетов = ДопПараметры.СчетУчетаОператораПлатежей;
	
	Попытка
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка №" + СтрокаТабличнойЧасти.НомерСтроки + ": не удалось сформировать документ корректировки!");
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции // СформироватьДокументКорректировкаДолга()

// Формирует документы "Поступление на расчетный счет" / "Списание с расчетного счета".
Процедура СформироватьДокументыДвиженияПоРасчетномуСчету(ВидДокумента, ДопПараметры = Неопределено)
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура();
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ПерезаполнятьСформированныеДокументы") Тогда
		ДопПараметры.Вставить("ПерезаполнятьСформированныеДокументы", Ложь);
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("СтатьяДвиженияДС") Тогда
		ДопПараметры.Вставить("СтатьяДвиженияДС", Неопределено);
	КонецЕсли;
	
	//ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	ТаблицаКонтрагентовЛС = ПолучитьТаблицуКонтрагентовЛС(Не ДопПараметры.ПерезаполнятьСформированныеДокументы, Истина, Истина);
	
	// Подготовим таблицу, в которой сумма каждой строки оплаты будет распределена по ставкам НДС.
	ТаблицаСуммыОплатПоСтавкамНДС = РаспределитьОплатыПоСтавкамНДС(ТаблицаКонтрагентовЛС);
	
	ЕстьНеСформированныеПРСпоКР = Ложь;
	
	// Обход по документам оплаты
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКонтрагентовЛС Цикл
		
		ФормироватьПРС = Истина;
		// Если вариант распределения оплат "по услугам капитального ремонта", то необходимо проверить каждый лицевой счет
		// на наличие расчетного счета капитального ремонта. Если расчетный счет капитального ремонта принадлежит нашей
		// организации, то формировать ПРС можно. Если же расчетный счет капитального ремонта принадлежит сторонней
		// организации/контрагенту, то формировать ПРС нельзя!
		Если ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт
		   И СтрокаТабличнойЧасти.СтороннийСчетКР Тогда
			ФормироватьПРС = Ложь;
		КонецЕсли;
		
		// Выполним проверку на необходимость перезаполнять уже существующий документ оплаты.
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
			Если ДопПараметры.ПерезаполнятьСформированныеДокументы 
			 И ТипЗнч(СтрокаТабличнойЧасти.ДокументОплаты) = Тип("ДокументСсылка." + ВидДокумента) Тогда
				
				Если ФормироватьПРС Тогда
					ОбъектДвиженияПоРС = СтрокаТабличнойЧасти.ДокументОплаты.ПолучитьОбъект();
				Иначе
					ПометитьНаУдалениеОбъектПоСсылке(СтрокаТабличнойЧасти.ДокументОплаты, Истина);
					
					СтрокаТЧ = ЛицевыеСчета.Получить(СтрокаТабличнойЧасти.НомерСтроки - 1);
					СтрокаТЧ.ДокументОплаты = ПредопределенноеЗначение("Документ." + ВидДокумента + ".ПустаяСсылка");
					
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка №" + СтрокаТабличнойЧасти.НомерСтроки + ": документ отражения удален, т.к. расчетный счет кап.ремонта принадлежит сторонней организации/контрагенту!");
					
					Продолжить;
					
				КонецЕсли;
				
			Иначе
				Если Не СтрокаТабличнойЧасти.ДокументОплаты = Неопределено И Не СтрокаТабличнойЧасти.ДокументОплаты.Пустая() Тогда
					
					ПометитьНаУдалениеОбъектПоСсылке(СтрокаТабличнойЧасти.ДокументОплаты, Истина);
					
					СтрокаТЧ = ЛицевыеСчета.Получить(СтрокаТабличнойЧасти.НомерСтроки - 1);
					СтрокаТЧ.ДокументОплаты = ПредопределенноеЗначение("Документ." + ВидДокумента + ".ПустаяСсылка");
					
				КонецЕсли;
				
				Если ФормироватьПРС Тогда
					ОбъектДвиженияПоРС = Документы[ВидДокумента].СоздатьДокумент();
				Иначе
					ЕстьНеСформированныеПРСпоКР = Истина;
					Продолжить;
				КонецЕсли;
				
			КонецЕсли;
		Иначе
			
			Если ФормироватьПРС Тогда
				ОбъектДвиженияПоРС = Документы[ВидДокумента].СоздатьДокумент();
			Иначе
				ЕстьНеСформированныеПРСпоКР = Истина;
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
		
		ОбъектДвиженияПоРС.Организация = Организация;
		ОбъектДвиженияПоРС.Дата        = Дата;
		ОбъектДвиженияПоРС.Контрагент  = СтрокаТабличнойЧасти.Контрагент;
		
		// Здесь нужно вызывать функцию модуля менеджера документа "РО".
		ОбъектДвиженияПоРС = Документы.КВП_РегистрацияОплаты.ЗаполнитьДокументыПоступленияСнятияСРасчетногоСчета(ОбъектДвиженияПоРС, Организация, СтрокаТабличнойЧасти, ВидДокумента, ВариантРаспределенияОплатКапРемонт, , мВалютаРегламентированногоУчета, ДопПараметры.СтатьяДвиженияДС, мНастройкиУчетнойПолитикиТСЖ, ТаблицаСуммыОплатПоСтавкамНДС);
		
		// Пересчитаем сумму НДС в каждой строке расшифровки платежа.
		Для Каждого СтрокаРасшифровкиПлатежа Из ОбъектДвиженияПоРС.РасшифровкаПлатежа Цикл
			Документы.КВП_РегистрацияОплаты.ПересчитатьСуммуНДС(СтрокаРасшифровкиПлатежа);
		КонецЦикла;
		
		СтруктураСуммКУДиР = УПЖКХ_НалоговыйУчетУСН.ПолучитьСтруктуруСуммКУДиР(Организация, Дата, ОбъектДвиженияПоРС, ЭтотОбъект, , мНастройкиУчетнойПолитикиТСЖ, СтрокаТабличнойЧасти.НомерСтроки);
		
		Если НЕ СтруктураСуммКУДиР = Неопределено Тогда
			ОбъектДвиженияПоРС.ДополнительныеСвойства.Вставить("СтруктураСуммКУДиР", СтруктураСуммКУДиР);
			ОбъектДвиженияПоРС.ДополнительныеСвойства.Вставить("ДанныеПоКУДиРПолны", ОбъектДвиженияПоРС.ЭтоНовый());
			ОбъектДвиженияПоРС.ДополнительныеСвойства.Вставить("РегистрацияОплаты",  ЭтотОбъект);
		КонецЕсли;
		
		Попытка
			
			ОбъектДвиженияПоРС.Записать(РежимЗаписиДокумента.Проведение);
			
			// Для каждой строки ТЧ теперь формируется отдельный типовой документ
			// (ранее формировался единый документ для оплат по одному лицевому счету).
			// Поэтому в каждой строке установим ссылку на свой документ.
			СтрокаТЧ = ЛицевыеСчета.Получить(СтрокаТабличнойЧасти.НомерСтроки - 1);
			СтрокаТЧ.ДокументОплаты = ОбъектДвиженияПоРС.Ссылка;
			
		Исключение
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Контрагент) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаТабличнойЧасти.ЛицевойСчет.Наименование + ": не заполнен контрагент.");
			ИначеЕсли НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Договор) Тогда
				УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(СтрокаТабличнойЧасти.ЛицевойСчет.Наименование + ": не заполнен договор контрагента.");
			КонецЕсли;
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(ОписаниеОшибки(), Ложь);
		КонецПопытки;
		
	КонецЦикла;
	
	Если ЕстьНеСформированныеПРСпоКР Тогда
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Документы отражения сформированы не для всех строк таблицы, т.к. расчетный счет кап.ремонта некоторых строк таблицы принадлежит сторонней организации/контрагенту!");
	КонецЕсли;
	
КонецПроцедуры  //СформироватьДокументыДвиженияПоРасчетномуСчету()

// Вызывает формирование документа отражения оплат в регл. учете для строки
// табличной части.
//
// Возвращаемое значение:
//  Ссылка на сформированный документ или Неопределено, если документ не может быть сформирован.
//
Функция СформироватьДокументыОтраженияОплатВСтрокеТЧ(СтрокаТабличнойЧасти, ДопПараметры = Неопределено) Экспорт
	
	Если СтрокаТабличнойЧасти.Сумма = 0 Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу Тогда
		ТекДок = СформироватьДокументКассовыйОрдер(СтрокаТабличнойЧасти, "ПриходныйКассовыйОрдер", ДопПараметры);
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы Тогда
		ТекДок = СформироватьДокументКассовыйОрдер(СтрокаТабличнойЧасти, "РасходныйКассовыйОрдер", ДопПараметры);
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты Тогда
		
		// Для вида операции "Поступление из автоматизированных систем приема оплаты" данная функция вызывается
		// только для ЖКХ 2.0. Для ЖКХ 3.0 формирование документов отражения оплат вызывается непосредственно
		// из процедуры "СформироватьДокументыОтраженияОплат_ЖКХ20" без прослойки через эту функцию.
		Если НЕ КВП_ПрочиеПроцедурыИФункции.Это3РедакцияБП(Метаданные.Версия) Тогда
			ТекДок = СформироватьДокументКорректировкаДолга_ЖКХ20(СтрокаТабличнойЧасти, ДопПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат ТекДок;
	
КонецФункции // СформироватьДокументыОтраженияОплатВСтрокеТЧ()

// Вызывает формирование документов отражения оплат в регл. учете.
Процедура СформироватьДокументыОтраженияОплат_ЖКХ20(ПерезаполнятьСформированныеДокументы = Ложь, СтатьяДвиженияДС = Неопределено) Экспорт
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	Отказ = Ложь;
	
	// Проверим соответствие сумм оплаты и расшифровки платежей по лицевым счетам.
	ПроверитьСоответствиеОплатИРасшифровкиПлатежа(Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// При формировании типовых документов отражения потребуются настройки
	// учетной политики ЖКХ и настройки учета по капитальному ремонту.
	ОбновитьНастройкиУчетнойПолитикиТСЖ(Ложь);
	ОпределитьНастройкиУчетаКапРемонта();
	
	// Общие параметры для передачи в последующие процедуры.
	// Отдельно для каждой процедуры параметры можно добавить непосредственно
	// перед вызовом процедуры.
	ДопПараметры = Новый Структура("ПерезаполнятьСформированныеДокументы,СтатьяДвиженияДС,ДокументКорректировки,
									|Контрагент,Договор,КомментарийКДокументу,СообщениеОбОшибке,Сумма,СуммаНаДолг,СуммаНаАванс,СуммаПениНаДолг");
	ДопПараметры.ПерезаполнятьСформированныеДокументы = ПерезаполнятьСформированныеДокументы;
	ДопПараметры.СтатьяДвиженияДС                     = СтатьяДвиженияДС;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет Тогда
		СформироватьДокументыДвиженияПоРасчетномуСчету("ПоступлениеНаРасчетныйСчет", ДопПараметры);
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета Тогда
		СформироватьДокументыДвиженияПоРасчетномуСчету("СписаниеСРасчетногоСчета", ДопПараметры);
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты Тогда
		
		ДопПараметры.Вставить("ДоговорОператораПлатежей", ДоговорОператораПлатежей);
		
		// Для вида операции "Поступление из автоматизированных систем приема оплаты" в ЖКХ 3.0 формирование документов оплат
		// будем выполнять отличным от механизма в ЖКХ 2.0 образом. В ЖКХ 2.0 для каждой строки табличной части Регистрации
		// оплаты формируется отдельный документ, а для ЖКХ 3.0 используется новый механизм, который группирует оплаты
		// по договору и контрагенту в один документ Корректировки долга. При этом совпадение лицевого счета необязательно,
		// т.е. даже оплаты по разным лицевым счетам, но с одним контрагентом и договором будут объединены в один документ.
		Если КВП_ПрочиеПроцедурыИФункции.Это3РедакцияБП(Метаданные.Версия) Тогда
			
			// Для ЖКХ 3.0 формируем документы Корректировки долга, группируя оплаты по контрагенту и договору.
			СформироватьКорректировкиДолга_ЖКХ30(ДопПараметры);
			
		Иначе
			
			// Для редакции 2.0 формируем отдельный документ Корректировки долга для каждой строки табличной части:
			Для Каждого СтрокаТабличнойЧасти Из ЛицевыеСчета Цикл
				ТекДок = СформироватьДокументыОтраженияОплатВСтрокеТЧ(СтрокаТабличнойЧасти, ДопПараметры);
				СтрокаТабличнойЧасти.ДокументОплаты = ТекДок;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты Тогда
		
		СформироватьДокументыОплатыПлатежнойКартой(ДопПараметры);
		
	Иначе
		
		ТаблицаКонтрагентовЛС = ПолучитьТаблицуКонтрагентовЛС(НЕ ПерезаполнятьСформированныеДокументы, Истина, Истина);
		
		// Подготовим таблицу, в которой сумма каждой строки оплаты будет распределена по ставкам НДС.
		ТаблицаСуммыОплатПоСтавкамНДС = РаспределитьОплатыПоСтавкамНДС(ТаблицаКонтрагентовЛС);
		
		ДопПараметры.Вставить("ТаблицаСуммыОплатПоСтавкамНДС", ТаблицаСуммыОплатПоСтавкамНДС);
		
		// Обход по строкам табличной части
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаКонтрагентовЛС Цикл
			
			ТекДок = СформироватьДокументыОтраженияОплатВСтрокеТЧ(СтрокаТабличнойЧасти, ДопПараметры);
			Если ТекДок = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Для каждой строки ТЧ теперь формируется отдельный типовой документ
			// (ранее формировался единый документ для оплат по одному лицевому счету).
			// Поэтому в каждой строке установим ссылку на свой документ.
			СтрокаТЧ = ЛицевыеСчета.Получить(СтрокаТабличнойЧасти.НомерСтроки - 1);
			СтрокаТЧ.ДокументОплаты = ТекДок;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ОтражениеОплатЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры // СформироватьДокументыОтраженияОплат_ЖКХ20()

// Формирует документы "Операция по платежной карте" с видом операции "Оплата от покупателя".
//
Процедура СформироватьДокументыОплатыПлатежнойКартой(ДопПараметры) Экспорт
	
	Если Не ТипЗнч(ДопПараметры) = Тип("Структура") Тогда
		ДопПараметры = Новый Структура();
	КонецЕсли;
	
	Если Не ДопПараметры.Свойство("ПерезаполнятьСформированныеДокументы") Тогда
		ДопПараметры.Вставить("ПерезаполнятьСформированныеДокументы", Ложь);
	КонецЕсли;
	
	ТаблицаКонтрагентовЛС = ПолучитьТаблицуКонтрагентовЛС(Не ДопПараметры.ПерезаполнятьСформированныеДокументы, Истина, Истина, Истина);
	
	// Подготовим таблицу, в которой сумма каждой строки оплаты будет распределена по ставкам НДС.
	ТаблицаСуммыОплатПоСтавкамНДС = РаспределитьОплатыПоСтавкамНДС(ТаблицаКонтрагентовЛС);
	
	// Обход по документам оплаты. Для каждой строки лицевого счета формируем свой документ оплаты по платежным картам.
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКонтрагентовЛС Цикл
		
		СчетаУчета = ПолучитьСчетаУчета(СтрокаТабличнойЧасти.Контрагент, СтрокаТабличнойЧасти.Договор);
		
		// Выполним проверку на необходимость перезаполнять уже существующий документ оплаты.
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
			Если ДопПараметры.ПерезаполнятьСформированныеДокументы 
			   И ТипЗнч(СтрокаТабличнойЧасти.ДокументОплаты) = Тип("ДокументСсылка.ОплатаПлатежнойКартой") Тогда
				
				ДокументОплатыПлатежнойКартой = СтрокаТабличнойЧасти.ДокументОплаты.ПолучитьОбъект();
				ДокументОплатыПлатежнойКартой.РасшифровкаПлатежа.Очистить();
				
			Иначе
				
				Если Не СтрокаТабличнойЧасти.ДокументОплаты = Неопределено И Не СтрокаТабличнойЧасти.ДокументОплаты.Пустая() Тогда
					
					ПометитьНаУдалениеОбъектПоСсылке(СтрокаТабличнойЧасти.ДокументОплаты, Истина);
					
					СтрокаТЧ = ЛицевыеСчета.Получить(СтрокаТабличнойЧасти.НомерСтроки - 1);
					СтрокаТЧ.ДокументОплаты = ПредопределенноеЗначение("Документ.ОплатаПлатежнойКартой.ПустаяСсылка");
					
				КонецЕсли;
				
				ДокументОплатыПлатежнойКартой = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
				
			КонецЕсли;
		Иначе
			ДокументОплатыПлатежнойКартой = Документы.ОплатаПлатежнойКартой.СоздатьДокумент();
		КонецЕсли;
		
		// Реквизиты документа.
		ДокументОплатыПлатежнойКартой.ВидОперации = Перечисления.ВидыОперацийОплатаПлатежнойКартой.ОплатаПокупателя;
		ДокументОплатыПлатежнойКартой.Организация = Организация;
		ДокументОплатыПлатежнойКартой.Дата        = Дата;
		ДокументОплатыПлатежнойКартой.Контрагент  = СтрокаТабличнойЧасти.Контрагент;
		ДокументОплатыПлатежнойКартой.ДоговорКонтрагента = СтрокаТабличнойЧасти.Договор;
		ДокументОплатыПлатежнойКартой.Комментарий        = "Оплата по " + СтрокаТабличнойЧасти.ПредставлениеЛицевогоСчета;
		
		ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
		УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОплатыПлатежнойКартой,
																	ТекПользователь, мВалютаРегламентированногоУчета);
		
		// Заполнение реквизитов контрагента - эквайера.
		ДокументОплатыПлатежнойКартой.ВидОплаты = ВидОплаты;
		
		СтруктураРеквизитов = УПЖКХ_ТиповыеМетодыСервер.ЗначенияРеквизитовОбъекта(ДокументОплатыПлатежнойКартой.ВидОплаты, 
																					"Контрагент, ДоговорКонтрагента, СчетУчетаРасчетов");
	
		ДокументОплатыПлатежнойКартой.СчетКасса         = СтруктураРеквизитов.СчетУчетаРасчетов;
		ДокументОплатыПлатежнойКартой.Эквайер           = СтруктураРеквизитов.Контрагент;
		ДокументОплатыПлатежнойКартой.ДоговорЭквайринга = СтруктураРеквизитов.ДоговорКонтрагента;
		
		ДокументОплатыПлатежнойКартой.СуммаДокумента  = СтрокаТабличнойЧасти.Сумма;
		ДокументОплатыПлатежнойКартой.ВалютаДокумента = мВалютаРегламентированногоУчета;
		
		// Расшифровка платежа.
		
		Отбор = Новый Структура("НомерСтроки", СтрокаТабличнойЧасти.НомерСтроки);
		СтрокиОплатПоСтавкамНДСДляЛС = ТаблицаСуммыОплатПоСтавкамНДС.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаОплаты Из СтрокиОплатПоСтавкамНДСДляЛС Цикл
			
			СтрокаПлатеж = ДокументОплатыПлатежнойКартой.РасшифровкаПлатежа.Добавить();
			СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
			
			СтрокаПлатеж.ДоговорКонтрагента = СтрокаТабличнойЧасти.Договор;
			
			СтрокаПлатеж.СуммаПлатежа        = СтрокаОплаты.Сумма;
			СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаОплаты.Сумма;
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			
			// Когда пени отражаются на отдельных счетах учета, то в строке с оплатой пеней подменим счета учета.
			Если СтрокаОплаты.ЭтоПениОтдельныеСчета Тогда
				
				СчетаКапремонт = (ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт);
				СтруктураСчетовУчетаРасчетовПоПени = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, СтрокаТабличнойЧасти.ВидВзаиморасчетов, СчетаКапремонт);
				
				Если Не СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаРасчетов.Пустая() Тогда
					
					// Изменим исходные счета учета расчетов контрагента на счета учета по пеням из учетной политики ЖКХ.
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаРасчетов;
					
					// Если отдельный счет расчетов по авансам для пеней не заполнен, то оставляем счет расчетов
					// с контрагентом, в противном случае заменяем его на счет расчетов по авансам для пеней.
					Если НЕ СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаАвансов.Пустая() Тогда
						СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаАвансов;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполнение реквизитов валюты.
			СтруктураКурсаВалютаДокумента = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, Дата);
			СтрокаПлатеж.КурсВзаиморасчетов        = СтруктураКурсаВалютаДокумента.Курс;
			СтрокаПлатеж.КратностьВзаиморасчетов   = СтруктураКурсаВалютаДокумента.Кратность;
			
			// Заполнение реквизитов НДС.
			СтрокаПлатеж.СтавкаНДС = СтрокаОплаты.СтавкаНДС;
			
		КонецЦикла;
		
		// Пересчитаем сумму НДС в каждой строке расшифровки платежа.
		Для Каждого СтрокаРасшифровкиПлатежа Из ДокументОплатыПлатежнойКартой.РасшифровкаПлатежа Цикл
			Документы.КВП_РегистрацияОплаты.ПересчитатьСуммуНДС(СтрокаРасшифровкиПлатежа);
		КонецЦикла;
		
		// Заполнение реквизитов КУДИР.
		СтруктураСуммКУДиР = УПЖКХ_НалоговыйУчетУСН.ПолучитьСтруктуруСуммКУДиР(Организация, Дата, ДокументОплатыПлатежнойКартой, ЭтотОбъект, , мНастройкиУчетнойПолитикиТСЖ, СтрокаТабличнойЧасти.НомерСтроки);
		Если НЕ СтруктураСуммКУДиР = Неопределено Тогда
			ДокументОплатыПлатежнойКартой.ДополнительныеСвойства.Вставить("СтруктураСуммКУДиР", СтруктураСуммКУДиР);
			ДокументОплатыПлатежнойКартой.ДополнительныеСвойства.Вставить("ДанныеПоКУДиРПолны", ДокументОплатыПлатежнойКартой.ЭтоНовый());
			ДокументОплатыПлатежнойКартой.ДополнительныеСвойства.Вставить("РегистрацияОплаты",  ЭтотОбъект);
		КонецЕсли;
		
		// Запись сформированного документа.
		Если КВП_ЗаписатьОбъект(ДокументОплатыПлатежнойКартой, РежимЗаписиДокумента.Проведение) Тогда
			
			// Заполнение ссылки в ТЧ "Лицевые счета" на созданный документ.
			СтрокаТЧ = ЛицевыеСчета.Получить(СтрокаТабличнойЧасти.НомерСтроки - 1);
			СтрокаТЧ.ДокументОплаты = ДокументОплатыПлатежнойКартой.Ссылка;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДокументыОплатыПлатежнойКартой()

// ЖКХ 2.0 -
///////////////////////////////////////

///////////////////////////////////////
// УПЖКХ +

// Формирует КО для указанной строки ТЧ "Лицевые счета".
//
// Параметры:
//  СтрокаТабличнойЧасти – строка табличной части.
//
// Возвращаемое значение:
//  Ссылка на сформированный ПКО.
//
Функция СформироватьКОвСтрокеТЧ(СтрокаТабличнойЧасти, ДокОплатыСформирован, ТипКО) Экспорт

	Сумма      = СтрокаТабличнойЧасти.Сумма;
	Если Сумма = 0 Тогда
		Если ТипКО = "ПКО" Тогда
			Возврат Документы.ПриходныйКассовыйОрдер.ПустаяСсылка();
		ИначеЕсли ТипКО = "РКО" Тогда
			Возврат Документы.РасходныйКассовыйОрдер.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

	Контрагент         = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(СтрокаТабличнойЧасти.Объект, Организация, Дата, "Контрагент");
	ДоговорКонтрагента = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(СтрокаТабличнойЧасти.Объект, Организация, Дата, "Договор");

	ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();

	Если ТипКО = "ПКО" Тогда
		ДокументОбъект = Документы.ПриходныйКассовыйОрдер.СоздатьДокумент();
		ДокументОбъект.Комментарий = "Оплата по л/с " + СтрокаТабличнойЧасти.Объект;
		ДокументОбъект.ПринятоОт   = Контрагент.Наименование;
		ДокументОбъект.ВидОперации        = Перечисления.ВидыОперацийПКО.ОплатаПокупателя;
	ИначеЕсли ТипКО = "РКО" Тогда
		ДокументОбъект = Документы.РасходныйКассовыйОрдер.СоздатьДокумент();
		ДокументОбъект.Комментарий = "Возврат оплаты по л/с " + СтрокаТабличнойЧасти.Объект;
		ДокументОбъект.Выдать      = Контрагент.Наименование;
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийРКО.ВозвратДенежныхСредствПокупателю;
	КонецЕсли;

	ДокументОбъект.Дата               = Дата;
	ДокументОбъект.Организация        = Организация;
	ДокументОбъект.Контрагент         = Контрагент;
	ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;

	ОтражатьВУправленческомУчете = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВУправленческомУчете");
	ДокументОбъект.ОтражатьВУправленческомУчете = ОтражатьВУправленческомУчете; 
	ДокументОбъект.ОтраженоВОперУчете           = ОтражатьВУправленческомУчете;
	ДокументОбъект.Оплачено                     = ОтражатьВУправленческомУчете;

	ФлагОтражатьВБухгалтерскомУчете = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВБухгалтерскомУчете");
	ДокументОбъект.ОтражатьВБухгалтерскомУчете = ФлагОтражатьВБухгалтерскомУчете;
	Если ФлагОтражатьВБухгалтерскомУчете Тогда
		ДокументОбъект.ОтражатьВНалоговомУчете = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
	Иначе
		ДокументОбъект.ОтражатьВНалоговомУчете = ФлагОтражатьВБухгалтерскомУчете;
	КонецЕсли;

	ДокументОбъект.СуммаДокумента = Сумма;
	ДокументОбъект.Касса          = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяКасса");

	ДокументОбъект.Основание = ИсточникОплаты.Наименование;

	СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();

	УПЖКХ_ТиповыеМетодыСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ДокументОбъект, ТекПользователь, 
																		мВалютаРегламентированногоУчета, ДокументОбъект.РасшифровкаПлатежа);

	СтрокаПлатеж.СуммаПлатежа         = Сумма;
	СтрокаПлатеж.СуммаВзаиморасчетов  = Сумма;

	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
	СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
	СтрокаПлатеж.ДоговорКонтрагента   = ДоговорКонтрагента;

	СтруктураКурсаВалютаДокумента = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДокументОбъект.Дата);
	СтрокаПлатеж.КурсВзаиморасчетов        = СтруктураКурсаВалютаДокумента.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов   = СтруктураКурсаВалютаДокумента.Кратность;

	УПЖКХ_ТиповыеМетодыСервер.ПересчитатьСуммуНДС(СтрокаПлатеж);

	Попытка
		Если ТипКО = "ПКО" Тогда
			ДокументОбъект.Записать(?(ПравоДоступа("Проведение", Метаданные.Документы.ПриходныйКассовыйОрдер),
			                          РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		ИначеЕсли ТипКО = "РКО" Тогда
			ДокументОбъект.Записать(?(ПравоДоступа("Проведение", Метаданные.Документы.РасходныйКассовыйОрдер),
			                          РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		КонецЕсли;
		ДокОплатыСформирован = Истина;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка №" + СтрокаТабличнойЧасти.НомерСтроки + ": не удалось сформировать " + ТипКО + "!");
	КонецПопытки;

	Возврат ДокументОбъект.Ссылка;

КонецФункции // СформироватьКОвСтрокеТЧ()

// Формирует документ "Приходный кассовый ордер" / "Расходный кассовый ордер".
Процедура СформироватьКО(ДокОплатыСформирован, ТипКО)
	
	Для Каждого СтрокаТабличнойЧасти Из ЛицевыеСчета Цикл
		
		Если Не СтрокаТабличнойЧасти.ДокументОплаты = Неопределено И Не СтрокаТабличнойЧасти.ДокументОплаты.Пустая() Тогда
			ПометитьНаУдалениеОбъектПоСсылке(СтрокаТабличнойЧасти.ДокументОплаты, Истина);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
			СтрокаТабличнойЧасти.ДокументОплаты = СформироватьКОвСтрокеТЧ(СтрокаТабличнойЧасти, ДокОплатыСформирован, ТипКО);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры  //СформироватьКО()

// Формирует в зависимости от выбранного значения один из документов:
//  - Платежное поручение входящее;
//  - Платежный ордер на поступление денежных средств;
//  - Платежное поручение исходящее;
//  - Платежный ордер на списание денежных средств.
//
Процедура СформироватьПлатежноеПоручениеОрдер(ВидДокумента, ДокОплатыСформирован) Экспорт
	
	ТаблицаКонтрагентовЛС = ПолучитьТаблицуКонтрагентовЛС();
	
	Для Каждого СтрокаТабличнойЧасти Из ТаблицаКонтрагентовЛС Цикл
		
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" Тогда
			ОбъектПлПоручение = Документы.ПлатежноеПоручениеВходящее.СоздатьДокумент();
			НаименованиеДокумента = "ПлатежноеПоручениеВходящее";
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерВходящий" Тогда
			ОбъектПлПоручение = Документы.ПлатежныйОрдерПоступлениеДенежныхСредств.СоздатьДокумент();
			НаименованиеДокумента = "ПлатежныйОрдерПоступлениеДенежныхСредств";
		ИначеЕсли ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
			ОбъектПлПоручение = Документы.ПлатежноеПоручениеИсходящее.СоздатьДокумент();
			НаименованиеДокумента = "ПлатежноеПоручениеИсходящее";
		ИначеЕсли ВидДокумента = "ПлатежныйОрдерИсходящий" Тогда
			ОбъектПлПоручение = Документы.ПлатежныйОрдерСписаниеДенежныхСредств.СоздатьДокумент();
			НаименованиеДокумента = "ПлатежныйОрдерСписаниеДенежныхСредств";
		КонецЕсли;
		
		Если ВидДокумента = "ПлатежноеПоручениеВходящее" ИЛИ ВидДокумента = "ПлатежныйОрдерВходящий" Тогда
			ОбъектПлПоручение.ВидОперации = Перечисления.ВидыОперацийПоступлениеБезналичныхДенежныхСредств.ОплатаПокупателя;
		ИначеЕсли ВидДокумента = "ПлатежноеПоручениеИсходящее" Тогда
			ОбъектПлПоручение.ВидОперации = Перечисления.ВидыОперацийППИсходящее.ВозвратДенежныхСредствПокупателю;
		ИначеЕсли  ВидДокумента = "ПлатежныйОрдерИсходящий" Тогда
			ОбъектПлПоручение.ВидОперации = Перечисления.ВидыОперацийСписаниеБезналичныхДенежныхСредств.ВозвратДенежныхСредствПокупателю;
		КонецЕсли;
		
		ОбъектПлПоручение.Организация = Организация;
		ОбъектПлПоручение.Дата        = ОбщегоНазначения.ПолучитьРабочуюДату();
		ОбъектПлПоручение.Контрагент  = СтрокаТабличнойЧасти.Контрагент;
		
		ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
		ОбъектПлПоручение.ОтражатьВНалоговомУчете = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОтражатьДокументыВНалоговомУчете");
		СтавкаНДС = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьЗначениеПоУмолчанию(ТекПользователь, "ОсновнаяСтавкаНДС");
		УПЖКХ_ТиповыеМетодыСервер.ЗаполнитьРеквизитыРасчетногоДокумента(ОбъектПлПоручение, ТекПользователь, мВалютаРегламентированногоУчета, ОбъектПлПоручение.РасшифровкаПлатежа);
		
		СуммаДокумента = 0;
		
		ОбъектПлПоручение.РасшифровкаПлатежа.Очистить();
			
		СтрокаПлатеж = ОбъектПлПоручение.РасшифровкаПлатежа.Добавить();
		СтрокаПлатеж.ДоговорКонтрагента = СтрокаТабличнойЧасти.Договор;
		
		СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, ОбъектПлПоручение.Контрагент, СтрокаТабличнойЧасти.Договор);
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета["СчетРасчетовПокупателя"];
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета["СчетАвансов"];
		
		СтрокаПлатеж.СуммаПлатежа = СтрокаТабличнойЧасти.Сумма;
		СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаТабличнойЧасти.Сумма;
		
		ЗначениеСтавкиНДС      = УчетНДС.ПолучитьСтавкуНДС(СтавкаНДС);
		СтрокаПлатеж.СтавкаНДС = СтавкаНДС;
		СтрокаПлатеж.СуммаНДС  = СтрокаПлатеж.СуммаПлатежа*ЗначениеСтавкиНДС/(100+ЗначениеСтавкиНДС);
		
		СтруктураКурсаВзаиморасчетов         = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, КонецДня(ОбъектПлПоручение.Дата));
		СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
		СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
		
		СуммаДокумента = СуммаДокумента + СтрокаТабличнойЧасти.Сумма;
		
		ОбъектПлПоручение.СуммаДокумента = СуммаДокумента;
		
		ОбъектПлПоручение.Оплачено   = Истина;
		ОбъектПлПоручение.ДатаОплаты = ОбъектПлПоручение.Дата;
		
		НайденныеСтроки = ТаблицаКонтрагентовЛС.НайтиСтроки(Новый Структура("Контрагент", СтрокаТабличнойЧасти.Контрагент));
		
		Попытка
			ОбъектПлПоручение.Записать(?(ПравоДоступа("Проведение", Метаданные.Документы[НаименованиеДокумента]), 
			                               РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
			НайденныеСтроки = ТаблицаКонтрагентовЛС.НайтиСтроки(Новый Структура("Контрагент", СтрокаТабличнойЧасти.Контрагент));
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				СтрокаТЧ = ЛицевыеСчета.Получить(ТекСтрока.НомерСтроки - 1);
				Если Не СтрокаТЧ.ДокументОплаты = Неопределено И Не СтрокаТЧ.ДокументОплаты.Пустая() Тогда
					ПометитьНаУдалениеОбъектПоСсылке(СтрокаТЧ.ДокументОплаты, Истина);
				КонецЕсли;
				СтрокаТЧ.ДокументОплаты = ОбъектПлПоручение.Ссылка;
			КонецЦикла;
			ДокОплатыСформирован = Истина;
		Исключение
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекСтрока.ЛицевойСчет.Наименование + ": не заполнен контрагент.");
				ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.Договор) Тогда
					УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю(ТекСтрока.ЛицевойСчет.Наименование + ": не заполнен договор контрагента.");
				КонецЕсли;
			КонецЦикла;
			ТекстСообщения = ОписаниеОшибки();
			ОбщегоНазначения.СообщитьОбОшибке( , , , , Ложь);
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры  //СформироватьПлатежноеПоручениеОрдер()

// Формирует документ "Корректировка долга" для указанной строки табличной части.
Функция СформироватьДокументКорректировкаДолгаВСтрокеТЧ(ДокОплатыСформирован, СтрокаТабличнойЧасти, ДопПараметры = Неопределено)
	
	Сумма = СтрокаТабличнойЧасти.Сумма;
	
	// контрагент по лицевому счету
	Контрагент         = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(СтрокаТабличнойЧасти.Объект, Организация, , "Контрагент");
	ДоговорКонтрагента = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(СтрокаТабличнойЧасти.Объект, Организация, , "Договор");
	
	// контрагент-оператор приема платежей
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		ДопПараметры = Новый Структура();
	КонецЕсли;

	ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	// Заглушка для исключения ошибки при проверке в ЖКХ 2.0.
	ДоговорОператораПлатежей = ЭтотОбъект.ДоговорОператораПлатежей;
	
	// шапка документа
	ДокументОбъект = Документы.КорректировкаДолга.СоздатьДокумент();
	ДокументОбъект.Дата                     = Дата;
	ДокументОбъект.Организация              = Организация;
	ДокументОбъект.ВидОперации              = Перечисления.ВидыОперацийКорректировкаДолга.ПереносЗадолженности;
	ДокументОбъект.КонтрагентДебитор        = Контрагент;
	ДокументОбъект.КонтрагентКредитор       = ОператорПлатежей;
	ДокументОбъект.ДоговорКонтрагента       = ДоговорОператораПлатежей;
	ДокументОбъект.Комментарий              = "Оплата по " + СтрокаТабличнойЧасти.Объект;
	
	ЗаполнениеДокументов.ЗаполнитьШапкуДокумента(ДокументОбъект);
	
	Если НЕ ДопПараметры.Свойство("СчетУчетаОператораПлатежей") Тогда
		СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(
																Организация, 
																ОператорПлатежей, 
																ДоговорОператораПлатежей);
		ДопПараметры.Вставить("СчетУчетаОператораПлатежей", СчетаУчета.СчетРасчетов);
	КонецЕсли;
	ДокументОбъект.СчетДт = ДопПараметры.СчетУчетаОператораПлатежей;
	ДокументОбъект.СчетКт = ДопПараметры.СчетУчетаОператораПлатежей;
	
	НоваяСтрока = ДокументОбъект.СуммыДолга.Добавить();
	
	НоваяСтрока.ВидЗадолженности     = Перечисления.ВидыЗадолженности.Дебиторская;
	НоваяСтрока.ДоговорКонтрагента   = ДоговорКонтрагента;
	
	НоваяСтрока.Сумма                = Сумма;
	НоваяСтрока.СуммаРегл            = Сумма;
	
	НоваяСтрока.КурсВзаиморасчетов      = ДокументОбъект.КурсДокумента;
	НоваяСтрока.КратностьВзаиморасчетов = ДокументОбъект.КратностьДокумента;
	
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(
																Организация, 
																Контрагент, 
																ДоговорКонтрагента);
	
	НоваяСтрока.СчетУчетаРасчетов = СчетаУчета.СчетРасчетовПокупателя;
	НоваяСтрока.СчетУчетаАвансов  = СчетаУчета.СчетАвансовПокупателя;
	
	Попытка
		ДокументОбъект.Записать(?(ПравоДоступа("Проведение", Метаданные.Документы.КорректировкаДолга), 
			                               РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись));
		ДокОплатыСформирован = Истина;
	Исключение
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Строка №" + СтрокаТабличнойЧасти.НомерСтроки + ": не удалось сформировать документ корректировки!");
	КонецПопытки;
	
	Возврат ДокументОбъект.Ссылка;
	
КонецФункции // СформироватьДокументКорректировкаДолгаВСтрокеТЧ()

// Формирует документ "Корректировка долга".
Процедура СформироватьДокументКорректировкаДолга_УПЖКХ(ДокОплатыСформирован, ДопПараметры = Неопределено) Экспорт
	
	Для Каждого СтрокаТабличнойЧасти Из ЛицевыеСчета Цикл
		
		Если Не СтрокаТабличнойЧасти.ДокументОплаты = Неопределено И Не СтрокаТабличнойЧасти.ДокументОплаты.Пустая() Тогда
			ПометитьНаУдалениеОбъектПоСсылке(СтрокаТабличнойЧасти.ДокументОплаты, Истина);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.ДокументОплаты) Тогда
			СтрокаТабличнойЧасти.ДокументОплаты = СформироватьДокументКорректировкаДолгаВСтрокеТЧ(ДокОплатыСформирован, СтрокаТабличнойЧасти, ДопПараметры);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // СформироватьДокументКорректировкаДолга()

// Формирует документы отражения оплаты для каждой строки ТЧ "Лицевые счета".
Процедура СформироватьДокументыОтраженияОплат_УПЖКХ() Экспорт

	ДокОплатыСформирован = Ложь;
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет Тогда
		
		ВыбЭлемент = СпДокументовОплаты.ВыбратьЭлемент("Выберите документ оплаты", ВыбЭлемент);
		Если НЕ ВыбЭлемент = Неопределено Тогда 
			ВыбЗначение = ВыбЭлемент.Значение;
		КонецЕсли;
		
		Если ВыбЗначение = "ПлатежноеПоручениеВходящее" 
		 ИЛИ ВыбЗначение = "ПлатежныйОрдерВходящий" Тогда
			СформироватьПлатежноеПоручениеОрдер(ВыбЗначение, ДокОплатыСформирован);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета Тогда
		
		ВыбЭлемент = СпДокументовВозвратаОплаты.ВыбратьЭлемент("Выберите документ возврата оплаты", ВыбЭлемент);
		Если НЕ ВыбЭлемент = Неопределено Тогда 
			ВыбЗначение = ВыбЭлемент.Значение;
		КонецЕсли;
		
		Если ВыбЗначение = "ПлатежноеПоручениеИсходящее" 
		 ИЛИ ВыбЗначение = "ПлатежныйОрдерИсходящий" Тогда
			СформироватьПлатежноеПоручениеОрдер(ВыбЗначение, ДокОплатыСформирован);
		КонецЕсли;
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу Тогда
		
		СформироватьКО(ДокОплатыСформирован, "ПКО");
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты Тогда
		
		СформироватьДокументКорректировкаДолга_УПЖКХ(ДокОплатыСформирован);
		
	ИначеЕсли ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы тогда
		
		СформироватьКО(ДокОплатыСформирован, "РКО");
		
	КонецЕсли;
	
	Если ДокОплатыСформирован Тогда
		КВП_ЗаписатьОбъект(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры // СформироватьДокументыОтраженияОплаты()

// УПЖКХ -
///////////////////////////////////////

// Вызывает формирование документов отражения оплат в регл. учете.
Процедура СформироватьДокументыОтраженияОплат(ПерезаполнятьСформированныеДокументы = Ложь, СтатьяДвиженияДС = Неопределено) Экспорт
	
	Если УПЖКХ_ТиповыеМетодыВызовСервера.ИДКонфигурации() = "БП" Тогда
		
		СформироватьДокументыОтраженияОплат_ЖКХ20(ПерезаполнятьСформированныеДокументы, СтатьяДвиженияДС);
		
	ИначеЕсли УПЖКХ_ТиповыеМетодыВызовСервера.ИДКонфигурации() = "УПП" Тогда
		
		СформироватьДокументыОтраженияОплат_УПЖКХ();
		
	КонецЕсли;
	
КонецПроцедуры // СформироватьДокументыОтраженияОплат()

/////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ДЛЯ ОБЕСПЕЧЕНИЯ ПРОВЕДЕНИЯ ДОКУМЕНТА

// Проверяет соответствие сумм оплаты и расшифровки платежа по лицевым счетам.
Процедура ПроверитьСоответствиеОплатИРасшифровкиПлатежа(Отказ)
	
	ТаблицаЛС = ЛицевыеСчета.Выгрузить();
	ТаблицаЛС.Свернуть("Объект", "Сумма");
	
	Для Каждого СтрокаТЧ Из ТаблицаЛС Цикл
		ВсегоСумма     = 0;
		ВсегоПени      = 0;
		ВсегоРассрочка = 0;
		СтрокиРасшифровки = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("Объект", СтрокаТЧ.Объект));
		Для Каждого ТекСтрока Из СтрокиРасшифровки Цикл
			ВсегоСумма     = ВсегоСумма + ТекСтрока.Сумма;
			ВсегоПени      = ВсегоПени + ТекСтрока.Пени;
			ВсегоРассрочка = ВсегоРассрочка + ТекСтрока.Рассрочка;
		КонецЦикла;
		Если НЕ СтрокаТЧ.Сумма = ВсегоСумма + ВсегоПени + ВсегоРассрочка Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("" 
											  + СтрокаТЧ.Объект 
											  + ": сумма оплаты не соответствует расшифровке платежа.
											  | Возможно по лицевому счету нет начислений и назначенных услуг.", 
											  Отказ);
			Отказ = Истина;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьСоответствиеОплатИРасшифровкиПлатежа()

// Заполняет таблицы движений документа.
//
// Параметры:
//  СтруктураШапкиДокумента - структура с реквизитами шапки документа.
//  ТаблицаПрямогоРаспределения - таблица движений регистров начисления.
//  ТаблицаДвиженияРассрочки - таблица движений регистра "Сведения о рассрочке".
//
Процедура ЗаполнитьТаблицыДвижений(СтруктураШапкиДокумента, ТаблицаПрямогоРаспределения, ТаблицаДвиженийРассрочки, ТаблицаПрямогоРаспределенияСтрахование, ТаблицаДвиженийСтрахования)
	
	ВремТаблица = РасшифровкаПлатежа.Выгрузить();
	ВремТаблица.Свернуть("Объект, Услуга, МесяцНачисления", "Сумма, Пени, Рассрочка");
		
	Знак = ?(СтруктураШапкиДокумента.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы
	     ИЛИ СтруктураШапкиДокумента.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета, 1, -1);
	
	// Выполнен частичный отказ от договоров в оперативном учете ЖКХ. Для тех, кто использует старый механизм
	// отражения начислений в регл. учете, договор заполняется в проводках. Для тех, кто использует новый
	// механизм отражения, договор в проводках не заполняется.
	ЗаполнятьДоговорВПроводках = Не УПЖКХ_ПараметрыУчетаСервер.ИспользоватьНовыйМеханизмОтраженияНачисленийВРеглУчете(Дата);
	
	Для Каждого СтрокаТаблицы Из ВремТаблица Цикл
		
		Если НЕ СтрокаТаблицы.Сумма = 0 Тогда
			
			Если ВестиУчетНачисленийПоДобровольномуСтрахованию И СтрокаТаблицы.Услуга = УслугаДобровольногоСтрахования Тогда
				РазделУчета = Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование;
			Иначе
				Если СтрокаТаблицы.Услуга.СпособРасчета = Перечисления.КВП_СпособыРасчета.КомиссияБанка Тогда
					РазделУчета = Перечисления.УПЖКХ_РазделыУчета.КомиссияБанка;
				Иначе
					РазделУчета = Перечисления.УПЖКХ_РазделыУчета.НачислениеУслуг;
				КонецЕсли;
			КонецЕсли;
			
			Движение = ТаблицаПрямогоРаспределения.Добавить();
			Движение.Период                      = СтруктураШапкиДокумента.Дата;
			Движение.Организация                 = СтруктураШапкиДокумента.Организация;
			Движение.ЛицевойСчет                 = СтрокаТаблицы.Объект;
			Движение.Услуга                      = СтрокаТаблицы.Услуга;
			Движение.МесяцНачисления             = КонецМесяца(СтрокаТаблицы.МесяцНачисления);
			Движение.ИсточникОплаты              = СтруктураШапкиДокумента.ИсточникОплаты;
			Движение.РазделУчета                 = РазделУчета;
			Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Оплата;
			Движение.СуммаНачисления             = Знак * СтрокаТаблицы.Сумма;
			
			// Сведения о договоре, по которому проводили начисления добровольного страхования, имеются в таблице "СведенияОДобровольномСтраховании".
			// Поэтому сразу определяем договор и в последующем не ищем его повторно.
			Если ВестиУчетНачисленийПоДобровольномуСтрахованию И СтрокаТаблицы.Услуга = УслугаДобровольногоСтрахования
				И ЗаполнятьДоговорВПроводках Тогда
				СтрокиСведенийОСтраховании = СведенияОДобровольномСтраховании.НайтиСтроки(Новый Структура("ЛицевойСчет, Услуга", СтрокаТаблицы.Объект, СтрокаТаблицы.Услуга));
				Если Не СтрокиСведенийОСтраховании.Количество() = 0 Тогда
					Движение.Договор = СтрокиСведенийОСтраховании[0].Договор;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.Пени = 0 Тогда
			
			Движение = ТаблицаПрямогоРаспределения.Добавить();
			Движение.Период                      = СтруктураШапкиДокумента.Дата;
			Движение.Организация                 = СтруктураШапкиДокумента.Организация;
			Движение.ЛицевойСчет                 = СтрокаТаблицы.Объект;
			Движение.Услуга                      = СтрокаТаблицы.Услуга;
			Движение.МесяцНачисления             = КонецМесяца(СтрокаТаблицы.МесяцНачисления);
			Движение.ИсточникОплаты              = СтруктураШапкиДокумента.ИсточникОплаты;
			Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.Пени;
			Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Оплата;
			Движение.СуммаНачисления             = Знак * СтрокаТаблицы.Пени;
			
		КонецЕсли;
		
		Если Не СтрокаТаблицы.Рассрочка = 0 Тогда
			
			ОтборРассрочки = Новый Структура;
			ОтборРассрочки.Вставить("Объект",          СтрокаТаблицы.Объект);
			ОтборРассрочки.Вставить("Услуга",          СтрокаТаблицы.Услуга);
			ОтборРассрочки.Вставить("МесяцНачисления", СтрокаТаблицы.МесяцНачисления);
			
			СтрокиРассрочки = РасшифровкаРассрочки.НайтиСтроки(ОтборРассрочки);
			
			ТекСуммаОплаты = СтрокаТаблицы.Рассрочка;
			
			Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
				
				Если ТекСуммаОплаты = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаОплаты    = Мин(СтрокаРассрочки.ДолгРассрочка, ТекСуммаОплаты);
				ТекСуммаОплаты = ТекСуммаОплаты - СуммаОплаты;
				
				Если СтрокаТаблицы.МесяцНачисления = "Остаток по рассрочке" Тогда
					
					// Фиксируем "дополнительное списание" рассрочки в регистре "Начисления по рассрочке".
					ДвижениеРассрочки = ТаблицаДвиженийРассрочки.Добавить();
					ДвижениеРассрочки.Период               = СтруктураШапкиДокумента.Дата;
					ДвижениеРассрочки.Организация          = СтруктураШапкиДокумента.Организация;
					ДвижениеРассрочки.ЛицевойСчет          = СтрокаТаблицы.Объект;
					ДвижениеРассрочки.Услуга               = СтрокаТаблицы.Услуга;
					ДвижениеРассрочки.МесяцРассрочки       = СтрокаРассрочки.МесяцРассрочки;
					ДвижениеРассрочки.ВидОперации          = Перечисления.УПЖКХ_Рассрочка.Предоплата;
					ДвижениеРассрочки.СуммаНачисления      = - Знак * СуммаОплаты;
					ДвижениеРассрочки.ЗаявлениеНаРассрочку = СтрокаРассрочки.ЗаявлениеНаРассрочку;
					
					// Фиксируем "дополнительное начисление" рассрочки в регистрах начисления.
					Движение = ТаблицаПрямогоРаспределения.Добавить();
					Движение.Период                      = СтруктураШапкиДокумента.Дата;
					Движение.Организация                 = СтруктураШапкиДокумента.Организация;
					Движение.ЛицевойСчет                 = СтрокаТаблицы.Объект;
					Движение.Услуга                      = СтрокаТаблицы.Услуга;
					Движение.МесяцНачисления             = КонецМесяца(СтруктураШапкиДокумента.Дата);
					Движение.МесяцРассрочки              = СтрокаРассрочки.МесяцРассрочки;
					Движение.ИсточникОплаты              = СтруктураШапкиДокумента.ИсточникОплаты;
					Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.Рассрочка;
					Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
					Движение.СуммаНачисления             = - Знак * СуммаОплаты;
					
				КонецЕсли;
				
				Движение = ТаблицаПрямогоРаспределения.Добавить();
				Движение.Период                      = СтруктураШапкиДокумента.Дата;
				Движение.Организация                 = СтруктураШапкиДокумента.Организация;
				Движение.ЛицевойСчет                 = СтрокаТаблицы.Объект;
				Движение.Услуга                      = СтрокаТаблицы.Услуга;
				Движение.МесяцНачисления             = ?(СтрокаТаблицы.МесяцНачисления = "Остаток по рассрочке", КонецМесяца(СтруктураШапкиДокумента.Дата),
														КонецМесяца(СтрокаТаблицы.МесяцНачисления));
				Движение.МесяцРассрочки              = СтрокаРассрочки.МесяцРассрочки;
				Движение.ИсточникОплаты              = СтруктураШапкиДокумента.ИсточникОплаты;
				Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.Рассрочка;
				Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Оплата;
				Движение.СуммаНачисления             = Знак * СуммаОплаты;
					
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
	// Если были оплачены начисления по добровольному страхованию, то надо:
	// 1. Сторнировать начисления по страхованию в регистре "Начисления по добровольному страхованию" (чтобы оплаченные начисления не учитывались при повторных оплатах в текущем месяце).
	// 2. Записать в регистры с начислениями сведения о начислениях по страхованию.
	Для Каждого СтрокаСтрахования Из СведенияОДобровольномСтраховании Цикл
		/////////
		// 1.
		Движение = ТаблицаДвиженийСтрахования.Добавить();
		Движение.Период          = СтруктураШапкиДокумента.Дата;
		Движение.Организация     = СтруктураШапкиДокумента.Организация;
		Движение.ЛицевойСчет     = СтрокаСтрахования.ЛицевойСчет;
		Движение.Услуга          = СтрокаСтрахования.Услуга;
		Движение.МесяцНачисления = СтрокаСтрахования.МесяцНачисления;
		Движение.Тариф           = СтрокаСтрахования.Тариф;
		Движение.Количество      = - СтрокаСтрахования.Количество;
		Движение.СуммаНачисления = - СтрокаСтрахования.СуммаНачисления;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаСтрахования.Договор;
		КонецЕсли;
		
		/////////
		// 2.
		Движение = ТаблицаПрямогоРаспределенияСтрахование.Добавить();
		Движение.Период                      = СтруктураШапкиДокумента.Дата;
		Движение.Организация                 = СтруктураШапкиДокумента.Организация;
		Движение.ЛицевойСчет                 = СтрокаСтрахования.ЛицевойСчет;
		Движение.Услуга                      = СтрокаСтрахования.Услуга;
		Движение.МесяцНачисления             = КонецМесяца(СтрокаСтрахования.МесяцНачисления);
		Движение.ИсточникОплаты              = СтруктураШапкиДокумента.ИсточникОплаты;
		Движение.РазделУчета                 = Перечисления.УПЖКХ_РазделыУчета.ДобровольноеСтрахование;
		Движение.ВидНачисленияНаЛицевыеСчета = Перечисления.УПЖКХ_ВидыНачислений.Начисление;
		Движение.Тариф                       = СтрокаСтрахования.Тариф;
		Движение.ВидТарифа                   = Перечисления.КВП_ВидыТарифов.Общий;
		Движение.Количество                  = СтрокаСтрахования.Количество;
		Движение.СуммаНачисления             = СтрокаСтрахования.СуммаНачисления;
		
		Если ЗаполнятьДоговорВПроводках Тогда
			Движение.Договор = СтрокаСтрахования.Договор;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ЗаполнитьТаблицыДвижений()

// Функция формирует таблицу оплаты во видам платежа.
Функция СформироватьТаблицуПоВидамПлатежа()
	
	ТаблицаПоВидамПлатежа = ЛицевыеСчета.Выгрузить();
	ТаблицаПоВидамПлатежа.Свернуть("Объект", "Сумма");
	
	МассивДляУдаления = Новый Массив;
	
	// удалим строки платежей с не распределенными оплатами.
	Для Каждого ТекущийЛС Из ТаблицаПоВидамПлатежа Цикл
		СтрокиОплат = РасшифровкаПлатежа.НайтиСтроки(Новый Структура("Объект", ТекущийЛС.Объект));
		Если СтрокиОплат.Количество() = 0 Тогда
			МассивДляУдаления.Добавить(ТекущийЛС);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивДляУдаления Цикл
		ТаблицаПоВидамПлатежа.Удалить(ТекСтрока);
	КонецЦикла;
	
	Возврат ТаблицаПоВидамПлатежа;
	
КонецФункции

// Формирует движения документа по регистрам.
Процедура ДвиженияПоРегистрам(РежимПроведения, 
							  СтруктураШапкиДокумента, 
							  ТаблицаПрямогоРаспределения, 
							  ТаблицаПоВидамПлатежа, 
							  Отказ, 
							  Заголовок);
	
	Знак = ?(СтруктураШапкиДокумента.ВидОперации = 
				Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы
			ИЛИ СтруктураШапкиДокумента.ВидОперации = 
					Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета, -1, 1);
	
	// Движения по регистру КВП_ПоступлениеДенежныхСредствПоВидамПлатежей
	Для Каждого СтрокаТаблицы Из РасшифровкаПлатежа Цикл
		
		Если СтрокаТаблицы.Сумма = 0 И СтрокаТаблицы.Пени = 0 И СтрокаТаблицы.Рассрочка = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.Сумма = 0 Тогда
			
			Движение = ТаблицаПрямогоРаспределения.Добавить();
			
			Движение.Период            = Дата;
			Движение.ВидНачисления     = Перечисления.КВП_ВидыНачисленияОстатки.Начисление;
			Движение.ФактическаяОплата = Истина;
			Движение.Организация       = СтруктураШапкиДокумента.Организация;
			Движение.ЛицевойСчет       = СтрокаТаблицы.Объект;
			Движение.ВидПлатежа        = СтруктураШапкиДокумента.ИсточникОплаты;
			Движение.МесяцНачисления   = СтрокаТаблицы.МесяцНачисления;
			Движение.Услуга            = СтрокаТаблицы.Услуга;
			Движение.СуммаПлатежа      = Знак * СтрокаТаблицы.Сумма;
			
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.Пени = 0 Тогда
			
			Движение = ТаблицаПрямогоРаспределения.Добавить();
			
			Движение.Период            = Дата;
			Движение.ВидНачисления     = Перечисления.КВП_ВидыНачисленияОстатки.Пени;
			Движение.ФактическаяОплата = Истина;
			Движение.Организация       = СтруктураШапкиДокумента.Организация;
			Движение.ЛицевойСчет       = СтрокаТаблицы.Объект;
			Движение.ВидПлатежа        = СтруктураШапкиДокумента.ИсточникОплаты;
			Движение.МесяцНачисления   = СтрокаТаблицы.МесяцНачисления;
			Движение.Услуга            = СтрокаТаблицы.Услуга;
			Движение.СуммаПлатежа      = Знак * СтрокаТаблицы.Пени;
			
		КонецЕсли;
		
		Если НЕ СтрокаТаблицы.Рассрочка = 0 Тогда
			
			ОтборРассрочки = Новый Структура;
			ОтборРассрочки.Вставить("Объект",          СтрокаТаблицы.Объект);
			ОтборРассрочки.Вставить("Услуга",          СтрокаТаблицы.Услуга);
			ОтборРассрочки.Вставить("МесяцНачисления", СтрокаТаблицы.МесяцНачисления);
			
			СтрокиРассрочки = РасшифровкаРассрочки.НайтиСтроки(ОтборРассрочки);
			
			ТекСуммаОплаты = СтрокаТаблицы.Рассрочка;
			
			Для Каждого СтрокаРассрочки Из СтрокиРассрочки Цикл
				
				Если ТекСуммаОплаты = 0 Тогда
					Продолжить;
				КонецЕсли;
				
				СуммаОплаты    = Мин(СтрокаРассрочки.ДолгРассрочка, ТекСуммаОплаты);
				ТекСуммаОплаты = ТекСуммаОплаты - СуммаОплаты;
				
				Движение = ТаблицаПрямогоРаспределения.Добавить();
				
				Движение.Период            = Дата;
				Движение.ВидНачисления     = Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка;
				Движение.ФактическаяОплата = Истина;
				Движение.Организация       = СтруктураШапкиДокумента.Организация;
				Движение.ЛицевойСчет       = СтрокаТаблицы.Объект;
				Движение.ВидПлатежа        = СтруктураШапкиДокумента.ИсточникОплаты;
				Движение.МесяцНачисления   = ?(СтрокаТаблицы.МесяцНачисления = "Остаток по рассрочке", КонецМесяца(СтруктураШапкиДокумента.Дата),
												СтрокаТаблицы.МесяцНачисления);
				Движение.МесяцРассрочки    = СтрокаРассрочки.МесяцРассрочки;
				Движение.Услуга            = СтрокаТаблицы.Услуга;
				Движение.СуммаПлатежа      = Знак * СуммаОплаты;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения в регистре "Начисления по рассрочке".
//
// Параметры:
//  ТаблицаДвиженийРассрочки - таблица с движениями.
//
Процедура ДвижениеПоРегиструНачисленийПоРассрочке(ТаблицаДвиженийРассрочки)
	
	Для Каждого СтрокаДвиженийРассрочки Из ТаблицаДвиженийРассрочки Цикл
		Движение = Движения.УПЖКХ_НачисленияПоРассрочке.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаДвиженийРассрочки);
		Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	КонецЦикла;
	
КонецПроцедуры // ДвижениеПоРегиструСведенияОРассрочке()

// Проверяет, закрыт ли лицевой счет на дату документа.
//
Процедура ПроверитьДействиеЛицевыхСчетов() Экспорт
	
	// сформируем список объектов
	СписокЛицевыхСчетов =  ЛицевыеСчета.Выгрузить();
	СписокЛицевыхСчетов.Свернуть("Объект");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЛицевыеСчета", СписокЛицевыхСчетов);
	Запрос.УстановитьПараметр("Дата",         Новый Граница(Дата, ВидГраницы.Включая));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_ЛицевыеСчетаСрезПоследних.ЛицевойСчет,
	|	КВП_ЛицевыеСчетаСрезПоследних.Действует
	|ИЗ
	|	РегистрСведений.КВП_ЛицевыеСчета.СрезПоследних(
	|					   &Дата, 
	|					   ЛицевойСчет В (&ЛицевыеСчета)) КАК КВП_ЛицевыеСчетаСрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Не Выборка.Действует Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке(
				"Лицевой счет " + Выборка.ЛицевойСчет.Наименование + " закрыт на текущую дату.");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПроверитьДействиеЛицевогоСчета()

// Процедура очищает связи документа с типовыми документами отражения оплат,
// т.е. удаляет связанные записи в регистре сведений
// "Связи документов регистрации оплат и типовых документов отражения в регламентированном учете".
// 
Процедура ОчиститьСвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете()
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РегистрацияОплаты.Установить(ЭтотОбъект.Ссылка);
	КВП_ЗаписатьОбъект(НаборЗаписей);
	
КонецПроцедуры // ОчиститьСвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете()

// Процедура формирует движения по регистру сведений
// "Связи документов регистрации оплат и типовых документов отражения в регламентированном учете".
// 
Процедура СформироватьСвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете()
	
	НаборЗаписей = РегистрыСведений.УПЖКХ_СвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.РегистрацияОплаты.Установить(Ссылка);
	
	ТаблицаДокументовОтражения = ЛицевыеСчета.Выгрузить(, "ДокументОплаты");
	ТаблицаДокументовОтражения.Свернуть("ДокументОплаты");
	
	Для Каждого ТекСтрока Из ТаблицаДокументовОтражения Цикл
		
		Если ЗначениеЗаполнено(ТекСтрока.ДокументОплаты) И НЕ ТипЗнч(ТекСтрока.ДокументОплаты) = Тип("ДокументСсылка.КорректировкаДолга") Тогда
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.РегистрацияОплаты = Ссылка;
			НоваяЗапись.ДокументОтражения = ТекСтрока.ДокументОплаты;
			НоваяЗапись.Организация       = Организация;
		КонецЕсли;
		
	КонецЦикла;
	
	Если НаборЗаписей.Количество() > 0 Тогда
		КВП_ЗаписатьОбъект(НаборЗаписей);
	КонецЕсли;
	
КонецПроцедуры // СформироватьСвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете()

////////////////////////////////////////////////////////////////////////////////
// ОБРАБОТЧИКИ СОБЫТИЙ

// Процедура проведения документа.
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ВремяНачала = ОценкаПроизводительности.НачатьЗамерВремени();
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = УПЖКХ_ТиповыеМетодыВызовСервера.ПредставлениеДокументаПриПроведении(Ссылка);
	
	Если мУдалятьДвижения Тогда
		УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	КонецЕсли;
	
	// Сформируем запрос на дополнительные параметры, нужные при проведении,
	// по данным шапки документа.
	ПараметрыПроведения = Документы.КВП_РегистрацияОплаты.ПодготовитьПараметрыПроведения(Ссылка, Отказ);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураШапкиДокумента = ПараметрыПроведения.Реквизиты;
	
	// Проверим соответствие сумм оплаты и расшифровки платежей по лицевым счетам.
	ПроверитьСоответствиеОплатИРасшифровкиПлатежа(Отказ);
	
	Если Не Отказ Тогда
		
		/////////////////////////////////////////////////////////////////
		// В этой таблице надо фиксировать рассрочку в разрезе месяцев рассрочки.
		ТаблицаПрямогоРаспределения = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
		ТаблицаДвиженийРассрочки    = РегистрыНакопления.УПЖКХ_НачисленияПоРассрочке.СформироватьТаблицуДвиженийРассрочки();
		
		// Таблица движений в регистре "Начисления по добровольному страхованию". Движения предназначены для сторнирования оплаченнных начислений по добровольному страхованию.
		// Данное сторнирование необходимо для того, чтобы уже оплаченные начисления не были оплачены повторно при внесение очередной оплаты в текущем месяце.
		ТаблицаДвиженийСтрахования = РегистрыНакопления.УПЖКХ_НачисленияПоДобровольномуСтрахованию.СформироватьТаблицуДвиженийДобровольногоСтрахования();
		
		// Движения данной таблицы предназначены для отражения факта начисления добровольного страхования в регистрах начисления.
		// (факт начисления добровольного страхования отражаем только в случае оплаты).
		ТаблицаПрямогоРаспределенияСтрахование = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
		
		ЗаполнитьТаблицыДвижений(СтруктураШапкиДокумента, ТаблицаПрямогоРаспределения, ТаблицаДвиженийРассрочки, ТаблицаПрямогоРаспределенияСтрахование, ТаблицаДвиженийСтрахования);
		
		ТаблицаПоВидамПлатежа = СформироватьТаблицуПоВидамПлатежа();
		
		ТаблицаДвиженийПоступлениеДенежныхСредств = УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.КВП_СформироватьТаблицуДвижений();
		
		ДвиженияПоРегистрам(РежимПроведения, 
							СтруктураШапкиДокумента, 
							ТаблицаДвиженийПоступлениеДенежныхСредств, 
							ТаблицаПоВидамПлатежа, 
							Отказ, 
							Заголовок);
		
		УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоВзаиморасчетам(ЭтотОбъект, 
																				Новый Структура("Расход, Приход", ТаблицаПрямогоРаспределения, ТаблицаПрямогоРаспределенияСтрахование));
		
		УПЖКХ_ВзаиморасчетыПоЛицевымСчетам.СформироватьДвиженияПоПоступлениюДенежныхСредствПоВидамПлатежей(ЭтотОбъект,
																										   ТаблицаДвиженийПоступлениеДенежныхСредств);
		
		ДвижениеПоРегиструНачисленийПоРассрочке(ТаблицаДвиженийРассрочки);
		
		Если ВестиУчетНачисленийПоДобровольномуСтрахованию Тогда
			ДвижениеПоРегиструНачисленияПоДобровольномуСтрахованию(ТаблицаДвиженийСтрахования);
			
			// Если было оплачено добровольное страхование, то начисления по добровольному страхованию надо зафиксировать в регистре
			// с начислениями для отражения в регл. учете.
			СформироватьДвиженияДляОтраженияНачисленийВРеглУчете(ЭтотОбъект, , Истина);
		КонецЕсли;
		
		НастройкиУчетнойПолитикиЖКХ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(Дата,
																							   Организация);
		
		СформироватьСвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете();
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности(
	ОценкаПроизводительности.ЗакончитьЗамерВремени("ПроведениеДокументаРегистрацияОплатыЖкх", ВремяНачала);
	// СтандартныеПодсистемы.ОценкаПроизводительности)
	
КонецПроцедуры

// Обработчик события "ПередЗаписью" документа.
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	мУдалятьДвижения = НЕ ЭтоНовый();
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах.
	СуммаДокумента = КВП_ПолучитьСуммуДокументаНачисленияОплаты(ЭтотОбъект, "ЛицевыеСчета", "Сумма");
	
	// проверим действие лицевых счетов.
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		ПроверитьДействиеЛицевыхСчетов();
	КонецЕсли;
	
	// Получение настроек учета кап. ремонта.
	мСтруктураНастроекКапРемонта = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаУслугКапремонта(Организация, Истина);
	
	// Для организаций, у которых раздельный учет не ведется,
	// заполним вариант распределения оплат значением "Все услуги", если реквизит пуст.
	// Для организаций, у которых раздельный учет ведется, вариант распределения обязательно должен быть заполнен.
	Если ВариантРаспределенияОплатКапРемонт.Пустая() Тогда
		
		Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("Не заполнено ""Распределение на кап. ремонт""!", Отказ);
		Иначе
			ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.ВсеУслуги;
		КонецЕсли;
		
	КонецЕсли;
	
	мСтруктураНастроекКапРемонта.Вставить("ВариантРаспределенияОплатКапРемонт", ВариантРаспределенияОплатКапРемонт);
	
	// Однозначно неясно каким образом, но периодически появляются клиенты, у которых в расшифровке платежа
	// присутствуют строки по лицевым счетам, которые отсутствуют в основной табличной части ("фантомные расшифровки").
	// Это приводит к ошибкам при ведении учета. С этой целью добавлена проверка на соответствие данных по лицевым счетам
	// расшифровки платежа и данных по лицевым счетам основной табличной части. Если "фантомные расшифровки" обнаружены,
	// то они удаляются.
	Если НЕ Отказ И ЭтотОбъект.РасшифровкаПлатежа.Количество() > 0 Тогда
		
		СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа = Документы.КВП_РегистрацияОплаты.ПолучитьСписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа(ЭтотОбъект.ЛицевыеСчета, ЭтотОбъект.РасшифровкаПлатежа);
		
		Если СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа.Количество() > 0 Тогда
			Документы.КВП_РегистрацияОплаты.УдалитьОшибочныеРасшифровкиПлатежа(СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа, ЭтотОбъект.РасшифровкаПлатежа);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Отменяет движения документа по регистрам.
Процедура ОбработкаУдаленияПроведения(Отказ)
	
	УПЖКХ_ТиповыеМетодыВызовСервера.УдалитьДвиженияРегистратора(ЭтотОбъект, Отказ, Ложь, Ложь);
	ОчиститьСвязиДокументовРегистрацииОплатИТиповыхДокументовОтраженияВРеглУчете();
	
КонецПроцедуры

// Процедура - обработчик события "ОбработкаЗаполнения".
//
Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	// Вид операции заполняется из персональной настройки пользователя. Если настройка пользователя не определена,
	// то будет выбран самый первый в списке вид операции. При этом, если документ формируется из связанных механизмов,
	// то вид операции может быть переопределен по переданным данным заполнения.
	ВидОперации = БухгалтерскийУчетПереопределяемый.ПолучитьЗначениеПоУмолчанию("ОсновнойВидОперацииРегистрацияОплаты");
	
	УПЖКХ_ТиповыеМетодыСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// В типовом механизме заполнения документов кроме заполнения реквизитов документа происходит также заполнение
	// табличной части "РасшифровкаПлатежа", т.к. наименование табличной части идентично наименованию ТЧ типовых
	// документов поступления и списания (ПРС, СРС, ПКО, РКО и Оплата платежной картой). В типовом механизме для
	// указанных типов документов происходит добавление строки в ТЧ и в ней заполняются требуемые реквизиты.
	// В нашем же случае в ТЧ "Расшифровка платежа" нет никаких реквизитов, которые могли бы быть заполнены типовым
	// механизмом, но пустая строка в ТЧ добавляется. На учет пустая строка никак не влияет, но ее наличие в каждом
	// документе РО вызывает неоправданное увеличение размера базы. Поэтому необходимо удалить пустую строку в ТЧ,
	// добавленную типовым механизмом заполнения документов.
	Если РасшифровкаПлатежа.Количество() = 1 И НЕ ЗначениеЗаполнено(РасшифровкаПлатежа[0].Объект) Тогда
		РасшифровкаПлатежа.Удалить(0);
	КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		// заполнение шапки документа.
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения);
		
		ФормироватьДокументы = Неопределено;
		ДанныеЗаполнения.Свойство("ФормироватьДокументы", ФормироватьДокументы);
		
		ЭтоЗагрузкаРеестраПлатежей = Ложь;
		Если ДанныеЗаполнения.Свойство("ЭтоЗагрузкаРеестраПлатежей") Тогда
			ЭтоЗагрузкаРеестраПлатежей = ДанныеЗаполнения.ЭтоЗагрузкаРеестраПлатежей;
		КонецЕсли;
		
		// Если используется корректировка долга, то документы будут сформированы только для вида операции 
		// "Поступление из автоматизированных систем приема оплаты".
		КорректировкаДолга = Неопределено;
		ДанныеЗаполнения.Свойство("КорректировкаДолга", КорректировкаДолга);
		Если КорректировкаДолга = Истина 
		 И НЕ ВидОперации = 
		 		Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты Тогда
			ФормироватьДокументы = Ложь;
		КонецЕсли;
		
		// заполнение табличных частей.
		ТаблицаОплат = Неопределено;
		Если ДанныеЗаполнения.Свойство("ТаблицаОплат", ТаблицаОплат) Тогда
			
			КВП_ЗаписатьОбъект(ЭтотОбъект);
			
			ЕстьНастройкиОплат = (НЕ ТаблицаОплат.Колонки.Найти("НастройкиОплатыОбъекта") = Неопределено);
			ЕстьНастройкиРаспределенияПоУслугам = (НЕ ТаблицаОплат.Колонки.Найти("РаспределятьПоУказаннымУслугам") = Неопределено);
			
			Для Каждого СтрокаОплаты ИЗ ТаблицаОплат Цикл
				
				НастройкиОплатыОбъекта = ?(ЕстьНастройкиОплат, СтрокаОплаты.НастройкиОплатыОбъекта, Неопределено);
				НастройкаРаспределенияПоУслугам = ?(ЕстьНастройкиРаспределенияПоУслугам, 
													СтрокаОплаты.РаспределятьПоУказаннымУслугам, Неопределено);
				
				// заполнение табличной части "Лицевые счета" и "Расшифровка платежа"
				ДобавитьСтрокуОплатыПоОбъекту(СтрокаОплаты, НастройкиОплатыОбъекта, НастройкаРаспределенияПоУслугам, ЭтоЗагрузкаРеестраПлатежей);
				
			КонецЦикла;
			
			ОбработатьСтрокиОплат(ЭтоЗагрузкаРеестраПлатежей);
			
		КонецЕсли;
		
		Если ФормироватьДокументы = Истина Тогда
			СформироватьДокументыОтраженияОплат();
		КонецЕсли;
		
		Ответственный = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
		
	КонецЕсли;
	
КонецПроцедуры // ОбработкаЗаполнения()

// Процедура - обработчик события "ПриКопировании".
//
Процедура ПриКопировании(ОбъектКопирования)
	
	Для Каждого СтрокаТаблицы Из ЛицевыеСчета Цикл
		СтрокаТаблицы.НомерЧекаККМ = Неопределено;
		СтрокаТаблицы.ДокументОплаты = Неопределено;
	КонецЦикла;
	
КонецПроцедуры // ПриКопировании()

// Обработчик события "ОбработкаПроверкиЗаполнения" документа.
Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	ПроверяемыеРеквизиты.Добавить("Организация");
	ПроверяемыеРеквизиты.Добавить("ВидОперации");
	
	ОпределитьНастройкиУчетаКапРемонта();
	Если мСтруктураНастроекКапРемонта.ВедетсяРаздельныйУчет Тогда
		ПроверяемыеРеквизиты.Добавить("ВариантРаспределенияОплатКапРемонт");
	КонецЕсли;
	
	Если ВидОперации = 
			Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты Тогда
		ПроверяемыеРеквизиты.Добавить("ОператорПлатежей");
		ПроверяемыеРеквизиты.Добавить("ДоговорОператораПлатежей");
	КонецЕсли;
	
	ПроверяемыеРеквизиты.Добавить("ЛицевыеСчета.Объект");
	
	// Проверка на правильность заполнения суммы оплаты по графику.
	Для Каждого ТекСтрока Из ЛицевыеСчета Цикл
		Если Не ТекСтрока.СуммаПоГрафику = 0
		   И ТекСтрока.СуммаПоГрафику > ТекСтрока.Сумма Тогда
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьОбОшибке("В строке " 
											  + ТекСтрока.НомерСтроки 
											  + " сумма оплаты по графику больше суммы оплаты!", 
											  Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Формирует движения в регистре "Начисления по добровольному страхованию".
Процедура ДвижениеПоРегиструНачисленияПоДобровольномуСтрахованию(ТаблицаДвиженийСтрахования)
	
	Для Каждого СтрокаДвиженияСтрахование Из ТаблицаДвиженийСтрахования Цикл
		ЗаполнитьЗначенияСвойств(Движения.УПЖКХ_НачисленияПоДобровольномуСтрахованию.Добавить(), СтрокаДвиженияСтрахование);
	КонецЦикла;
	
КонецПроцедуры

// Распределяет суммы оплат по ставкам НДС. Ставки НДС определяются из номенклатур услуг,
// на которые распределилась сумма оплаты.
//
// Параметры:
//  ТаблицаЛицевыхСчетов - ТаблицаЗначений - таблица с лицевыми счетами, для которых
//                                           нужно формировать документы оплаты.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - таблица, содержащая суммы оплаты по лицевым счетам, разбитые по ставкам НДС.
//
Функция РаспределитьОплатыПоСтавкамНДС(ТаблицаЛицевыхСчетов)
	
	// 1. Из внешней таблицы лицевых счетов получаем те лицевые счета, для которых будут созданы документы оплаты.
	// 2. Для каждого из этих лицевых счетов получаем общую суммы оплаты из расшифровки, затем распределяем
	//    ее по ставкам НДС, а также установливаем признак "ЭтоПениОтдельныеСчета", если сумма должна пойти
	//    на оплату пеней, а пени отражаются на отдельных счетах учета.
	// 3. Определяем количество строк с оплатами по каждому лицевому счету в документе.
	// 4. Если по лицевому счету одна строка оплаты в документе, то сразу присоединяем к ней суммы распределенные
	//    по ставкам НДС.
	// 5. Если по лицевому счету несколько строк оплаты в документе, то далее для каждой строки оплаты будем разбивать
	//    суммы оплаты в строке по ставкам НДС.
	
	// Может возникнуть ситуация, когда по лицевому счету несколько строк оплаты, документы сформированы
	// не по всем строкам. Пользователь решает доформировать документы, при этом уже сформированные решает не заполнять.
	// Распределение работает так, что общая сумма оплаты по лицевому счету, распределенная по ставкам НДС, постепенно
	// уменьшается при обходе строк оплаты. Поэтому, чтобы оплата в строке распределилась по нужным ставкам НДС,
	// анализируем все строки оплаты по лицевому счету.
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ втТаблицаЛицевыхСчетов
	|ИЗ
	|	&ТаблицаЛицевыхСчетов КАК ТаблицаЛицевыхСчетов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Объект КАК ЛицевойСчет,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма КАК Сумма,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Рассрочка КАК Рассрочка,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени КАК Пени,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Услуга.ВидСтавкиНДС КАК ВидСтавкиНДС
	|ПОМЕСТИТЬ втРасшифровкаПлатежа
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты.РасшифровкаПлатежа КАК КВП_РегистрацияОплатыРасшифровкаПлатежа
	|ГДЕ
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка = &Ссылка
	|	И КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма + КВП_РегистрацияОплатыРасшифровкаПлатежа.Рассрочка + КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени > 0
	|	И КВП_РегистрацияОплатыРасшифровкаПлатежа.Объект В
	|			(ВЫБРАТЬ
	|				втТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет
	|			ИЗ
	|				втТаблицаЛицевыхСчетов КАК втТаблицаЛицевыхСчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.ЛицевойСчет КАК ЛицевойСчет,
	|	РасшифровкаПлатежа.Сумма + РасшифровкаПлатежа.Рассрочка КАК Сумма,
	|	РасшифровкаПлатежа.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	ЛОЖЬ КАК ЭтоПениОтдельныеСчета
	|ПОМЕСТИТЬ втДанныеПоВидамОплат
	|ИЗ
	|	втРасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Сумма + РасшифровкаПлатежа.Рассрочка > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	РасшифровкаПлатежа.ЛицевойСчет,
	|	РасшифровкаПлатежа.Пени,
	|	ВЫБОР
	|		КОГДА &ПениОтражаютсяПоСтавкеБезНДС
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)
	|		ИНАЧЕ РасшифровкаПлатежа.ВидСтавкиНДС
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА &ОплатаУслугКапремонта
	|					И &ПениКапремонтОтдельныеСчета
	|				ИЛИ НЕ &ОплатаУслугКапремонта
	|					И &ПениОтражаютсяНаОтдельныхСчетах
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ
	|ИЗ
	|	втРасшифровкаПлатежа КАК РасшифровкаПлатежа
	|ГДЕ
	|	РасшифровкаПлатежа.Пени > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеПоВидамОплат.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(втДанныеПоВидамОплат.Сумма) КАК Сумма,
	|	втДанныеПоВидамОплат.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	втДанныеПоВидамОплат.ЭтоПениОтдельныеСчета КАК ЭтоПениОтдельныеСчета
	|ПОМЕСТИТЬ втДанныеПоВидамОплатГруппировка
	|ИЗ
	|	втДанныеПоВидамОплат КАК втДанныеПоВидамОплат
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеПоВидамОплат.ЛицевойСчет,
	|	втДанныеПоВидамОплат.ВидСтавкиНДС,
	|	втДанныеПоВидамОплат.ЭтоПениОтдельныеСчета
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	КВП_РегистрацияОплатыЛицевыеСчета.НомерСтроки КАК НомерСтроки,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Объект КАК ЛицевойСчет,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Сумма КАК Сумма
	|ПОМЕСТИТЬ втСтрокиОплатПоЛС
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|ГДЕ
	|	КВП_РегистрацияОплатыЛицевыеСчета.Ссылка = &Ссылка
	|	И КВП_РегистрацияОплатыЛицевыеСчета.Объект В
	|			(ВЫБРАТЬ
	|				втТаблицаЛицевыхСчетов.ЛицевойСчет КАК ЛицевойСчет
	|			ИЗ
	|				втТаблицаЛицевыхСчетов КАК втТаблицаЛицевыхСчетов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтрокиОплатПоЛСДокумента.ЛицевойСчет КАК ЛицевойСчет,
	|	СУММА(1) КАК КоличествоСтрокОплаты
	|ПОМЕСТИТЬ втКоличествоСтрокОплатПоЛС
	|ИЗ
	|	втСтрокиОплатПоЛС КАК втСтрокиОплатПоЛСДокумента
	|
	|СГРУППИРОВАТЬ ПО
	|	втСтрокиОплатПоЛСДокумента.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтрокиОплатПоЛС.НомерСтроки КАК НомерСтроки,
	|	втСтрокиОплатПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеПоВидамОплатГруппировка.Сумма КАК Сумма,
	|	втДанныеПоВидамОплатГруппировка.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	втДанныеПоВидамОплатГруппировка.ЭтоПениОтдельныеСчета КАК ЭтоПениОтдельныеСчета
	|ИЗ
	|	втСтрокиОплатПоЛС КАК втСтрокиОплатПоЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоличествоСтрокОплатПоЛС КАК втКоличествоСтрокОплатПоЛС
	|		ПО втСтрокиОплатПоЛС.ЛицевойСчет = втКоличествоСтрокОплатПоЛС.ЛицевойСчет
	|			И (втКоличествоСтрокОплатПоЛС.КоличествоСтрокОплаты = 1)
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втДанныеПоВидамОплатГруппировка КАК втДанныеПоВидамОплатГруппировка
	|		ПО втСтрокиОплатПоЛС.ЛицевойСчет = втДанныеПоВидамОплатГруппировка.ЛицевойСчет
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСтрокиОплатПоЛС.НомерСтроки КАК НомерСтроки,
	|	втСтрокиОплатПоЛС.ЛицевойСчет КАК ЛицевойСчет,
	|	втСтрокиОплатПоЛС.Сумма КАК Сумма
	|ИЗ
	|	втСтрокиОплатПоЛС КАК втСтрокиОплатПоЛС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоличествоСтрокОплатПоЛС КАК втКоличествоСтрокОплатПоЛС
	|		ПО втСтрокиОплатПоЛС.ЛицевойСчет = втКоличествоСтрокОплатПоЛС.ЛицевойСчет
	|			И (втКоличествоСтрокОплатПоЛС.КоличествоСтрокОплаты > 1)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеПоВидамОплатГруппировка.ЛицевойСчет КАК ЛицевойСчет,
	|	втДанныеПоВидамОплатГруппировка.Сумма КАК Сумма,
	|	втДанныеПоВидамОплатГруппировка.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	втДанныеПоВидамОплатГруппировка.ЭтоПениОтдельныеСчета КАК ЭтоПениОтдельныеСчета
	|ИЗ
	|	втДанныеПоВидамОплатГруппировка КАК втДанныеПоВидамОплатГруппировка
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЛицевойСчет,
	|	ВидСтавкиНДС";
	
	Запрос.УстановитьПараметр("Ссылка",                          Ссылка);
	Запрос.УстановитьПараметр("ОплатаУслугКапремонта",           ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт);
	Запрос.УстановитьПараметр("ПениКапремонтОтдельныеСчета",     мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПениКапремонт = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета);
	Запрос.УстановитьПараметр("ПениОтражаютсяНаОтдельныхСчетах", мНастройкиУчетнойПолитикиТСЖ.СчетаУчетаДляОтраженияПени = Перечисления.УПЖКХ_СчетаУчетаДляПениПриОтраженииВРеглУчете.ОтдельныеСчета);
	Запрос.УстановитьПараметр("ПениОтражаютсяПоСтавкеБезНДС",    мНастройкиУчетнойПолитикиТСЖ.СтавкаНДСДляОтраженияПени = Перечисления.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС);
	Запрос.УстановитьПараметр("ТаблицаЛицевыхСчетов",            ТаблицаЛицевыхСчетов);
	
	ПакетыЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаСуммПоСтавкамНДС = ПакетыЗапроса[8].Выгрузить();
	
	ВыборкаЛСОднаСтрокаОплаты      = ПакетыЗапроса[6].Выбрать();
	ВыборкаЛСНесколькоСтрокОплаты  = ПакетыЗапроса[7].Выбрать();
	
	ТаблицаСуммыОплатПоСтавкамНДС = Новый ТаблицаЗначений;
	
	ТаблицаСуммыОплатПоСтавкамНДС.Колонки.Добавить("НомерСтроки");
	ТаблицаСуммыОплатПоСтавкамНДС.Колонки.Добавить("ЛицевойСчет");
	ТаблицаСуммыОплатПоСтавкамНДС.Колонки.Добавить("СтавкаНДС");
	ТаблицаСуммыОплатПоСтавкамНДС.Колонки.Добавить("Сумма");
	ТаблицаСуммыОплатПоСтавкамНДС.Колонки.Добавить("ЭтоПениОтдельныеСчета");
	
	Пока ВыборкаЛСОднаСтрокаОплаты.Следующий() Цикл
		
		НоваяСтрока = ТаблицаСуммыОплатПоСтавкамНДС.Добавить();
		
		НоваяСтрока.НомерСтроки           = ВыборкаЛСОднаСтрокаОплаты.НомерСтроки;
		НоваяСтрока.ЛицевойСчет           = ВыборкаЛСОднаСтрокаОплаты.ЛицевойСчет;
		НоваяСтрока.СтавкаНДС             = Перечисления.СтавкиНДС.СтавкаНДС(ВыборкаЛСОднаСтрокаОплаты.ВидСтавкиНДС, Дата);
		НоваяСтрока.Сумма                 = ВыборкаЛСОднаСтрокаОплаты.Сумма;
		НоваяСтрока.ЭтоПениОтдельныеСчета = ВыборкаЛСОднаСтрокаОплаты.ЭтоПениОтдельныеСчета;
		
	КонецЦикла;
	
	Пока ВыборкаЛСНесколькоСтрокОплаты.Следующий() Цикл
		
		СуммаОплатыВСтроке = ВыборкаЛСНесколькоСтрокОплаты.Сумма;
		
		СтрокиОплатПоСтавкамНДС = ТаблицаСуммПоСтавкамНДС.НайтиСтроки(Новый Структура("ЛицевойСчет", ВыборкаЛСНесколькоСтрокОплаты.ЛицевойСчет));
		
		Для Каждого СтрокаОплаты Из СтрокиОплатПоСтавкамНДС Цикл
			
			Если СтрокаОплаты.Сумма = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаСуммыОплатПоСтавкамНДС.Добавить();
			
			НоваяСтрока.НомерСтроки           = ВыборкаЛСНесколькоСтрокОплаты.НомерСтроки;
			НоваяСтрока.ЛицевойСчет           = ВыборкаЛСНесколькоСтрокОплаты.ЛицевойСчет;
			НоваяСтрока.СтавкаНДС             = Перечисления.СтавкиНДС.СтавкаНДС(СтрокаОплаты.ВидСтавкиНДС, Дата);
			НоваяСтрока.ЭтоПениОтдельныеСчета = СтрокаОплаты.ЭтоПениОтдельныеСчета;
			
			СуммаРаспределения = Мин(СуммаОплатыВСтроке, СтрокаОплаты.Сумма);
			НоваяСтрока.Сумма = СуммаРаспределения;
			
			СуммаОплатыВСтроке = СуммаОплатыВСтроке - СуммаРаспределения;
			СтрокаОплаты.Сумма = СтрокаОплаты.Сумма - СуммаРаспределения;
			
			Если СуммаОплатыВСтроке = 0 Тогда
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	// Проиндексируем таблицу, так как далее при формировании документов
	// для строк с оплатами по ней будет выполняться неоднократный поиск.
	ТаблицаСуммыОплатПоСтавкамНДС.Индексы.Добавить("НомерСтроки");
	
	Возврат ТаблицаСуммыОплатПоСтавкамНДС;
	
КонецФункции

// Возвращает счета учета расчетов с контрагентами, при необходимости счета учета
// подменяются на заданные счета расчетов по кап. ремонту.
//
Функция ПолучитьСчетаУчета(Контрагент, ДоговорКонтрагента)
	
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(Организация, Контрагент, ДоговорКонтрагента);
	
	// Если отражается оплата услуг по кап. ремонту, то счет расчетов с контрагентом по услугам КР
	// может быть задан в учетной политике. Если счет для услуг КР задан, то нужно взять его.
	Если ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
		
		// Получим настройки отражения капремонта.
		ВариантОтраженияВзаиморасчетовПоКапремонту = мНастройкиУчетнойПолитикиТСЖ.ВариантОтраженияВзаиморасчетовПоКапремонту;
		СчетУчетаВзаиморасчетовПоКапремонту        = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
		
		// Если услуги КР отражаются на отдельном счете,
		// подменим счет расчетов в структуре на нужный.
		Если ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета Тогда
			СчетаУчета.СчетРасчетовПокупателя = СчетУчетаВзаиморасчетовПоКапремонту;
			СчетаУчета.СчетАвансовПокупателя  = СчетУчетаВзаиморасчетовПоКапремонту;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат СчетаУчета;
	
КонецФункции

// Функция добавляет новую строку в таблицу лицевых счетов и выполняет распределение.
//
// Параметры:
//  СтрокаОплаты - строка таблицы значений для добавления в табличную часть "Лицевые счета.
//  НастройкаРаспределенияПоУслугам - настройки распределения по услугам.
//  ЗаписыватьДокумент - признак необходимости записи документа.
//
// Возвращаемые параметры:
//  Строка таблицы Лицевые счета - Строка табличной части.
//
Функция ДобавитьСтрокуОплатыПоОбъекту(СтрокаОплаты,
										НастройкиОплатыОбъекта = Неопределено,
										НастройкаРаспределенияПоУслугам = Ложь,
										ЭтоЗагрузкаРеестраПлатежей = Ложь) Экспорт
	
	// Данная процедура может вызываться из:
	// 1. Из формы документа при считывании штрихкода в процедуре "ОбработатьШтрихКод";
	// 2. Из обработки заполнения документа.
	//
	// 1.1. В текущей реализации при считывании штрихкода в настройках оплаты объекта НЕ может быть указана услуга,
	// но период оплаты может быть указан. Таким образом распределение оплат всегда будет выполнено общим механизмом
	// распределения, но при наличии периода оплаты предварительно будет заполнена табличная часть "Настройки оплаты".
	//
	// 2.1. Вызов данной процедуры из обработки заполнения возможен только из обработок "Загрузка реестра платежей" и
	// "Формирования оплат на основании платежных документов".
	// 2.1.1. При вызове из обработки формирования оплат таблица настроек оплаты объекта отсутствует, а значит
	// распределение оплат будет выполнено общим механизмом распределения оплат.
	// 2.1.2. При вызове из обработки "Загрузка реестра платежей" распределение будет выполнено в зависимости от наличия
	// настроек распределения в строке оплаты реестра:
	//  - при наличии указанной услуги в строке реестра распределение будет выполнено отдельным механизмом
	//    в процедуре "ЗаполнитьРасшифровкуПлатежаПоТаблице()";
	//  - если услуга не указана, то распределение будет выполнено общим механизмом распределения оплат. При этом если
	//    в строке реестра указан период оплаты, то предварительно будет выполнено заполнение табличной части
	//    "Настройки оплаты".
	
	
	// Ранее здесь производилась запись документа, если сумма расшифровки больше нуля,
	// а документ еще не записан. Запись убрана, так как обоснование необходимости этого
	// не выявлено.
	
	// заполним настройки оплаты по текущему объекту
	ВариантРаспределения = "";
	
	// признак ручного заполнения расшифровки оплаты.
	ФлагРедактирования   = Ложь;
	
	Если ТипЗнч(НастройкиОплатыОбъекта) = Тип("ТаблицаЗначений") И НастройкиОплатыОбъекта.Количество() > 0 Тогда
		
		СписокУслуг    = Новый СписокЗначений;
		СписокПериодов = Новый СписокЗначений;
		
		// распределим настройки по типам: периоды / месяцы оплаты.
		Для Каждого СтрокаНастройки Из НастройкиОплатыОбъекта Цикл
			
			Если ЗначениеЗаполнено(СтрокаНастройки.Услуга) 
			 И СписокУслуг.НайтиПоЗначению(СтрокаНастройки.Услуга) = Неопределено Тогда
				СписокУслуг.Добавить(СтрокаНастройки.Услуга);
			КонецЕсли;
			
			Если ЗначениеЗаполнено(СтрокаНастройки.МесяцНачисления) 
			 И СписокПериодов.НайтиПоЗначению(НачалоМесяца(СтрокаНастройки.МесяцНачисления)) = Неопределено Тогда
				СписокПериодов.Добавить(НачалоМесяца(СтрокаНастройки.МесяцНачисления));
			КонецЕсли;
			
		КонецЦикла;
		
		Если НЕ СписокУслуг.Количество() = 0 Тогда
			
			// Распределение оплат из обработки "Загрузка реестра платежей" при наличии услуги в обрабатываемой строке реестра:
			// Общий механизм распределения оплат в этом случае НЕ вызывается, т.к. всё распределение происходит в процедуре
			// "ЗаполнитьРасшифровкуПлатежаПоТаблице()".
			
			Отбор = Новый Структура("Объект, Параметр", СтрокаОплаты.Объект);
			Для Каждого ТекущаяУслуга Из СписокУслуг Цикл
				Отбор.Параметр = ТекущаяУслуга.Значение;
				Если НастройкиОплаты.НайтиСтроки(Отбор).Количество() = 0 Тогда
					НоваяСтрока              = НастройкиОплаты.Добавить();
					НоваяСтрока.Использовать = Истина;
					НоваяСтрока.Объект       = СтрокаОплаты.Объект;
					НоваяСтрока.Параметр     = ТекущаяУслуга.Значение;
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьРасшифровкуПлатежаПоТаблице(СтрокаОплаты.Объект, НастройкиОплатыОбъекта, ФлагРедактирования);
			
			ВариантРаспределения = "ПоУслугам";
			
		ИначеЕсли НЕ СписокПериодов.Количество() = 0 Тогда
			
			// Подготовка табличной части "Настройки оплаты" при считывании штрихкода в форме документа, в котором указан
			// период оплаты, а также при вызове из обработки "Загрузка реестра платежей" в случае, когда услуга
			// в обрабатываемой строке реестра отсутствует, а период оплаты указан. После подготовки табличной части
			// настроек оплаты будет вызван общий механизм распределения оплат.
			
			ОпределитьНастройкиУчетаКапРемонта();
			мСтруктураНастроекКапРемонта.Вставить("ВариантРаспределенияОплатКапРемонт", ВариантРаспределенияОплатКапРемонт);
			
			// получим дерево задолженности по объекту
			ДеревоЗадолженности = Документы.КВП_РегистрацияОплаты.ПолучитьДеревоЗадолженностиПоОбъекту(Дата, Организация, ВидОперации, СтрокаОплаты.Объект, мСтруктураНастроекКапРемонта,
																									   , РасшифровкаРассрочки, мЗапросПолученияНачисленийИДолговПоЛС, мЗапросПолученияМесяцаНачислений);
			ДеревоЗадолженности.Колонки.Добавить("УчитыватьМесяц");
			
			Для Каждого СтрокаИтогов Из ДеревоЗадолженности.Строки Цикл
				
				// дополним дерево задолженности настройками оплаты с учетом имеющихся настроек
				Для Каждого СтрокаНастройки Из СписокПериодов Цикл
					
					НайденнаяСтрока = СтрокаИтогов.Строки.Найти(НачалоДня(КонецМесяца(СтрокаНастройки.Значение)), "МесяцНачисления");
					Если НайденнаяСтрока = Неопределено Тогда
						СтрокаМесяца = СтрокаИтогов.Строки.Добавить();
						СтрокаМесяца.МесяцНачисления = СтрокаНастройки.Значение;
						СтрокаМесяца.УчитыватьМесяц  = Истина;
					Иначе
						НайденнаяСтрока.УчитыватьМесяц = Истина;
					КонецЕсли;
					
				КонецЦикла;
				
				СтрокаИтогов.Строки.Сортировать("МесяцНачисления Возр", Истина);
				
				// Выполняем обход всех месяцев, которые имеются в дереве задолженности по объекту
				// и заполняем при этом табличную часть "Настройки оплаты".
				Для Каждого СтрокаМесяца Из СтрокаИтогов.Строки Цикл
					
					// Заполним табличную часть "НастройкиОплаты":
					// Заполнение происходит циклично абсолютно по всем месяцам задолженности объекта,
					// но флаг "Использовать" взводится только для текущего месяца из настроек строки оплаты реестра.
					
					СтрокиНастроекОплаты = НастройкиОплаты.НайтиСтроки(Новый Структура("Объект, Параметр", СтрокаОплаты.Объект, НачалоМесяца(СтрокаМесяца.МесяцНачисления)));
					// Проверяем наличие строки настройки по объекту и периоду оплаты в ТЧ документа,
					// чтобы не произошло дублирование строк настроек оплаты.
					Если СтрокиНастроекОплаты.Количество() = 0 Тогда
						НоваяСтрока = НастройкиОплаты.Добавить();
						НоваяСтрока.Использовать = СтрокаМесяца.УчитыватьМесяц;
						НоваяСтрока.Объект       = СтрокаОплаты.Объект;
						НоваяСтрока.Параметр     = НачалоМесяца(СтрокаМесяца.МесяцНачисления);
					Иначе
						Если СтрокаМесяца.УчитыватьМесяц = Истина Тогда
							Для Каждого СтрокаНастройкиОплаты Из СтрокиНастроекОплаты Цикл
								// Взводим флаг "Использовать" в значение "Истина" в уже добавленной ранее
								// строке табличной части настроек оплат.
								СтрокаНастройкиОплаты.Использовать = Истина;
							КонецЦикла;
						КонецЕсли;
					КонецЕсли;
					
				КонецЦикла;
				
			КонецЦикла;
			
			ВариантРаспределения = "ПоМесяцам";
			
		КонецЕсли;
		
	КонецЕсли;
	
	// Если добавляемый объект уже имеется в табличной части,
	// то получим предыдущую строку для последующего заполнения настроек оплаты.
	ПредыдущаяСтрокаОбъекта = ЛицевыеСчета.Найти(СтрокаОплаты.Объект, "Объект");
	
	НоваяСтрокаОплаты = ЛицевыеСчета.Добавить();
	ЗаполнитьЗначенияСвойств(НоваяСтрокаОплаты, СтрокаОплаты);
	
	// установим вариант распределения
	Если НЕ ПустаяСтрока(ВариантРаспределения) Тогда
		НоваяСтрокаОплаты.ВариантРаспределения = ВариантРаспределения;
	КонецЕсли;
	
	НоваяСтрокаОплаты.РаспределятьПоУказаннымУслугам = НастройкаРаспределенияПоУслугам;
	НоваяСтрокаОплаты.ФлагРедактирования             = ФлагРедактирования;
	
	// скопируем настройки из предыдущих строк по объекту.
	Если НЕ ПредыдущаяСтрокаОбъекта = Неопределено Тогда
		НоваяСтрокаОплаты.ВариантРаспределения           = ПредыдущаяСтрокаОбъекта.ВариантРаспределения;
		НоваяСтрокаОплаты.ВариантОплаты                  = ПредыдущаяСтрокаОбъекта.ВариантОплаты;
		НоваяСтрокаОплаты.РаспределятьПоУказаннымУслугам = ПредыдущаяСтрокаОбъекта.РаспределятьПоУказаннымУслугам;
	КонецЕсли;
	
	Возврат НоваяСтрокаОплаты;
	
КонецФункции // ДобавитьСтрокуОплатыПоОбъекту()

////////////////////////////////////////////////////////////////////////////////
// ПЕРЕМЕННЫЕ МОДУЛЯ

мПечататьЧекиСРасшифровкойПоУслугам    = Константы.УПЖКХ_ПечататьЧекиСРасшифровкойПоУслугам.Получить();
мПечататьЧекиИзРегистрацииОплаты       = Константы.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты.Получить();
мПечататьЧекиПриОплатеБанковскойКартой = Константы.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой.Получить();

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

мЗапросСпискаДействующихУслуг = Неопределено;
мЗапросПолученияНачисленийИДолговПоЛС = Неопределено;

НастройкиУчетаДобровольногоСтрахования        = УПЖКХ_ПараметрыУчетаСервер.ПолучитьНастройкиУчетаНачисленийПоДобровольномуСтрахованию();
ВестиУчетНачисленийПоДобровольномуСтрахованию = НастройкиУчетаДобровольногоСтрахования.ВестиУчетНачисленийПоДобровольномуСтрахованию;
УслугаДобровольногоСтрахования                = НастройкиУчетаДобровольногоСтрахования.УслугаДобровольногоСтрахования;

// УПЖКХ +

СпДокументовОплаты = Новый СписокЗначений;
СпДокументовОплаты.Добавить("ПлатежноеПоручениеВходящее", "Платежное поручение входящее");
СпДокументовОплаты.Добавить("ПлатежныйОрдерВходящий",     "Платежный ордер на поступление денежных средств");

СпДокументовВозвратаОплаты = Новый СписокЗначений;
СпДокументовВозвратаОплаты.Добавить("ПлатежноеПоручениеИсходящее", "Платежное поручение исходящее");
СпДокументовВозвратаОплаты.Добавить("ПлатежныйОрдерИсходящий",     "Платежный ордер на списание денежных средств");

// УПЖКХ -

#КонецОбласти

#КонецЕсли
