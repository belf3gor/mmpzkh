
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

////////////////////////////////////////////////////////////////////////////////
// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

// Предназначена для заполнения документов "Поступление на р/с" и "Списание с р/с".
//
Функция ЗаполнитьДокументыПоступленияСнятияСРасчетногоСчета(ДокументОбъект, Организация, ДанныеПоОплате, ВидДокумента, ВариантРаспределенияОплатКапРемонт, ДанныеДляВзаиморасчетов = Неопределено, 
															  мВалютаРегламентированногоУчета, СтатьяДвижения = Неопределено, мНастройкиУчетнойПолитикиТСЖ = Неопределено, ТаблицаСуммыОплатПоСтавкамНДС = Неопределено) Экспорт
	
	// !!!
	// Данная функция вызывается из:
	// 1. модуля объекта документа "Регистрация оплаты";
	// 2. модуля формы обработки "Загрузка реестра платежей" - при создании документов ПРС без создания документа РО.
	//    Если создается документ РО, то создание ПРС происходит непосредственно из РО.
	//
	// При вызове из обработки параметр "ДанныеПоОплате" имеет тип "Структура",
	// при вызове из документа - тип "СтрокаТаблицыЗначений".
	// Параметр "ТаблицаСуммыОплатПоСтавкамНДС" параметр используется при вызове функции из документа. В него передается
	// таблица значений, в которой сумма каждой строки оплаты документа распределена по ставкам НДС.
	
	Если НЕ ДанныеДляВзаиморасчетов = Неопределено Тогда
		Договор = ДанныеДляВзаиморасчетов.Договор;
		Если НЕ ДанныеДляВзаиморасчетов.Договор = Неопределено Тогда
			мВалютаРегламентированногоУчета = ДанныеДляВзаиморасчетов.Договор.ВалютаВзаиморасчетов;
		КонецЕсли;
	Иначе
		Договор = ДанныеПоОплате.Договор;
	КонецЕсли;
	
	ТекПользователь = УПЖКХ_ТиповыеМетодыКлиентСервер.ТекущийПользователь();
	
	СчетаУчета = УПЖКХ_ТиповыеМетодыСервер.ПолучитьСчетаРасчетовСКонтрагентом(
																Организация,
																ДокументОбъект.Контрагент,
																Договор);
	
	// Если отражается оплата услуг по кап. ремонту, то счет расчетов с контрагентом по услугам КР
	// может быть задан в учетной политике. Если счет для услуг КР задан, то нужно взять его.
	Если ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
		
		// Здесь нужны настройки учетной политики ЖКХ, если не определены, получим заново.
		Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
			мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ДокументОбъект.Дата, Организация);
		КонецЕсли;
		
		// Получим настройки отражения капремонта.
		ВариантОтраженияВзаиморасчетовПоКапремонту = мНастройкиУчетнойПолитикиТСЖ.ВариантОтраженияВзаиморасчетовПоКапремонту;
		СчетУчетаВзаиморасчетовПоКапремонту        = мНастройкиУчетнойПолитикиТСЖ.СчетУчетаВзаиморасчетовПоКапремонту;
		
		// Если услуги КР отражаются на отдельном счете,
		// подменим счет расчетов в структуре на нужный.
		Если ВариантОтраженияВзаиморасчетовПоКапремонту = Перечисления.КВП_ВидыСчетовРасчетовСКонтрагентамиПоКапремонту.ОтдельныеСчета Тогда
			СчетаУчета.СчетРасчетовПокупателя = СчетУчетаВзаиморасчетовПоКапремонту;
			СчетаУчета.СчетАвансовПокупателя  = СчетУчетаВзаиморасчетовПоКапремонту;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ВидДокумента = "ПоступлениеНаРасчетныйСчет" Тогда
		Если НЕ Договор = Неопределено
		   И Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ДокументОбъект.ВидОперации                    = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ПрочееПоступление;
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			ДокументОбъект.СубконтоКт1                    = ДокументОбъект.Контрагент;
			ДокументОбъект.СубконтоКт2                    = Договор;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеДенежныхСредств.ОплатаПокупателя;
		КонецЕсли;
	ИначеЕсли ВидДокумента = "СписаниеСРасчетногоСчета" Тогда
		Если НЕ Договор = Неопределено
		   И Договор.ВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.Прочее Тогда
			ДокументОбъект.ВидОперации                    = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ПрочееСписание;
			ДокументОбъект.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			ДокументОбъект.СубконтоДт1                    = ДокументОбъект.Контрагент;
			ДокументОбъект.СубконтоДт2                    = Договор;
		Иначе
			ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийСписаниеДенежныхСредств.ВозвратПокупателю;
		КонецЕсли;
	КонецЕсли;
	
	УПЖКХ_ЗаполнениеДокументовСервер.ЗаполнитьШапкуДокумента(ДокументОбъект, ТекПользователь, мВалютаРегламентированногоУчета);
	
	ДокументОбъект.СчетБанк = ПланыСчетов.Хозрасчетный.РасчетныеСчета;
	
	ДокументОбъект.РасшифровкаПлатежа.Очистить();
	
	// Расшифровка платежа.
	Если ТипЗнч(ДанныеПоОплате) = Тип("Структура") Тогда
		
		СтавкаНДС = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеОсновнойСтавкиНДСПоУмолчанию(ДокументОбъект.Дата);
		
		СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
		
		СтрокаПлатеж.ДоговорКонтрагента = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьСведенияДляВзаиморасчетовПоЛицевомуСчету(ДанныеПоОплате.ЛицевойСчет, Организация,
																					   ДанныеПоОплате.Дата, "Договор");
		
		СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
		СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
		
		СтрокаПлатеж.СуммаПлатежа        = ДанныеПоОплате.СуммаПлатежа;
		СтрокаПлатеж.СуммаВзаиморасчетов = ДанныеПоОплате.СуммаПлатежа;
		
		СтрокаПлатеж.СтавкаНДС = СтавкаНДС;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
		ЗаполнитьТЧРасшифровкаПлатежаПоТекущейСтроке(СтрокаПлатеж, мВалютаРегламентированногоУчета, ДокументОбъект.Дата, ДокументОбъект.Организация, ДокументОбъект.ВидОперации, СтатьяДвижения);
		
		ДокументОбъект.СуммаДокумента = ДанныеПоОплате.СуммаПлатежа;
		
	Иначе
		
		Отбор = Новый Структура("НомерСтроки", ДанныеПоОплате.НомерСтроки);
		СтрокиОплатПоСтавкамНДСДляЛС = ТаблицаСуммыОплатПоСтавкамНДС.НайтиСтроки(Отбор);
		
		Для Каждого СтрокаОплаты Из СтрокиОплатПоСтавкамНДСДляЛС Цикл
			
			СтрокаПлатеж = ДокументОбъект.РасшифровкаПлатежа.Добавить();
			
			СтрокаПлатеж.ДоговорКонтрагента = ДанныеПоОплате.Договор;
			
			СтрокаПлатеж.СуммаПлатежа        = СтрокаОплаты.Сумма;
			СтрокаПлатеж.СуммаВзаиморасчетов = СтрокаОплаты.Сумма;
			
			СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СчетаУчета.СчетРасчетовПокупателя;
			СтрокаПлатеж.СчетУчетаРасчетовПоАвансам     = СчетаУчета.СчетАвансовПокупателя;
			
			// Когда пени отражаются на отдельных счетах учета, то в строке с оплатой пеней подменим счета учета.
			Если СтрокаОплаты.ЭтоПениОтдельныеСчета Тогда
				
				СчетаКапремонт = (ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт);
				СтруктураСчетовУчетаРасчетовПоПени = Документы.КВП_ОтражениеНачисленийВРеглУчете.ПолучитьСтруктуруСчетаУчетаРасчетаПоПени(Организация, ДанныеПоОплате.ВидВзаиморасчетов, СчетаКапремонт);
				
				Если Не СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаРасчетов.Пустая() Тогда
					
					// Изменим исходные счета учета расчетов контрагента на счета учета по пеням из учетной политики ЖКХ.
					СтрокаПлатеж.СчетУчетаРасчетовСКонтрагентом = СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаРасчетов;
					
					// Если отдельный счет расчетов по авансам для пеней не заполнен, то оставляем счет расчетов
					// с контрагентом, в противном случае заменяем его на счет расчетов по авансам для пеней.
					Если НЕ СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаАвансов.Пустая() Тогда
						СтрокаПлатеж.СчетУчетаРасчетовПоАвансам = СтруктураСчетовУчетаРасчетовПоПени.СчетУчетаАвансов;
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЕсли;
			
			// Заполнение реквизитов НДС.
			СтрокаПлатеж.СтавкаНДС = СтрокаОплаты.СтавкаНДС;
			
			ЗаполнитьТЧРасшифровкаПлатежаПоТекущейСтроке(СтрокаПлатеж, мВалютаРегламентированногоУчета, ДокументОбъект.Дата, ДокументОбъект.Организация, ДокументОбъект.ВидОперации, СтатьяДвижения);
			
		КонецЦикла;
		
		ДокументОбъект.СуммаДокумента = ДанныеПоОплате.Сумма;
		
	КонецЕсли;
	
	Если ВариантРаспределенияОплатКапРемонт = Перечисления.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт Тогда
		ДокументОбъект.СчетОрганизации = ДанныеПоОплате.РасчетныйСчетУслугКапитальногоРемонта;
	Иначе
		ДокументОбъект.СчетОрганизации = ДанныеПоОплате.РасчетныйСчетУслуг;
	КонецЕсли;
	
	ДокументОбъект.ВалютаДокумента = мВалютаРегламентированногоУчета;
	
	Если мНастройкиУчетнойПолитикиТСЖ = Неопределено Тогда
		мНастройкиУчетнойПолитикиТСЖ = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьПараметрыУчетнойПолитикиЖКХ(ДокументОбъект.Дата, Организация);
	КонецЕсли;
	
	ПараметрыУСН = УчетУСН.СтруктураПараметровОбъектаДляУСН(ДокументОбъект);
	
	НалоговыйУчетУСН.ЗаполнитьОтражениеДокументаВУСН(ДокументОбъект, ПараметрыУСН);
	
	Возврат ДокументОбъект;
	
КонецФункции // ЗаполнитьДокументыПоступленияСнятияСРасчетногоСчета()

// Предназначена для заполнения строки ТЧ "Расшифровка платежа" в документах "Поступления на р/с" и "Списание с р/с".
//
Процедура ЗаполнитьТЧРасшифровкаПлатежаПоТекущейСтроке(СтрокаПлатеж, мВалютаРегламентированногоУчета, Дата, Организация, ВидОперации, СтатьяДвижения)
	
	СтруктураКурсаВзаиморасчетов         = УПЖКХ_ТиповыеМетодыСервер.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, КонецДня(Дата));
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	СтрокаПлатеж.СпособПогашенияЗадолженности = Перечисления.СпособыПогашенияЗадолженности.Автоматически;
	
	СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = УПЖКХ_ТиповыеМетодыСервер.СтатьяДДСПоУмолчанию(ВидОперации);
	
	Если УчетУСН.ЕстьАвансыПокупателей(ВидОперации) Тогда
		СтрокаПлатеж.ПорядокОтраженияАванса = УПЖКХ_ТиповыеМетодыСервер.ПорядокОтраженияАванса(Организация, Дата);
	КонецЕсли;
	
	Если ТипЗнч(СтатьяДвижения) = Тип("СправочникСсылка.СтатьиДвиженияДенежныхСредств") Тогда
		СтрокаПлатеж.СтатьяДвиженияДенежныхСредств = СтатьяДвижения;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьТЧРасшифровкаПлатежаПоТекущейСтроке()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
Процедура ПересчитатьСуммуНДС(СтрокаПлатежа) Экспорт
	
	ЗначениеСтавкиНДС = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(СтрокаПлатежа.СтавкаНДС);
	
	СтрокаПлатежа.СуммаНДС = СтрокаПлатежа.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	
КонецПроцедуры

// Процедура заполняет дерево задолженности долгами по начислениям и пени в разрезе месяцев.
//
Функция ПолучитьДеревоЗадолженностиПоОбъекту(Дата, Организация, ВидОперации, Объект, СтруктураНастроекКапРемонта, ФормироватьПоДолгам = Ложь, РасшифровкаРассрочки = Неопределено, мЗапросПолученияНачисленийИДолговПоЛС = Неопределено, мЗапросПолученияМесяцаНачислений = Неопределено) Экспорт
	
	ДеревоДолговНачислений = Новый ДеревоЗначений;
	
	ПараметрыЗапроса = Новый Структура;
	ПараметрыЗапроса.Вставить("Период",      Дата);
	ПараметрыЗапроса.Вставить("Организация", Организация);
	ПараметрыЗапроса.Вставить("Объект",      Объект);
	
	МесяцНачислений = ДобавитьМесяц(Дата, -1);
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу
		ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты
		ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет
		ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты
		ИЛИ ФормироватьПоДолгам Тогда
		
		ДополнитьЗапросНачислениямиИДолгамиПоОбъекту(мЗапросПолученияНачисленийИДолговПоЛС,
													 мЗапросПолученияМесяцаНачислений,
													 ПараметрыЗапроса,
													 МесяцНачислений,
													 Ложь,
													 СтруктураНастроекКапРемонта);
		
	Иначе
		
		ДополнитьЗапросПоследнейОплатойПоОбъекту(мЗапросПолученияНачисленийИДолговПоЛС,
												 мЗапросПолученияМесяцаНачислений,
												 ПараметрыЗапроса,
												 МесяцНачислений,
												 Ложь,
												 СтруктураНастроекКапРемонта);
		
	КонецЕсли;
	
	мЗапросПолученияНачисленийИДолговПоЛС.Текст = КВП_ПолучитьТекстЗапросаНачисленийИДолговПоОбъекту();
	
	РезультатЗапросаНачисленийИДолговПоОбъекту = мЗапросПолученияНачисленийИДолговПоЛС.Выполнить();
	
	// Получим дерево начислений и долгов / оплат с итогами по месяцам начисления и услугам.
	ДеревоДолговНачислений = РезультатЗапросаНачисленийИДолговПоОбъекту.Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	ТаблицаРассрочкиПоОбъекту = РезультатЗапросаНачисленийИДолговПоОбъекту.Выгрузить();
	
	Если Не РасшифровкаРассрочки = Неопределено Тогда
		КВП_ЗаполнитьРасшифровкуРассрочкиПоОбъекту(РасшифровкаРассрочки, ТаблицаРассрочкиПоОбъекту, Объект);
	КонецЕсли;
	
	Возврат ДеревоДолговНачислений;
	
КонецФункции // ДеревоЗадолженностиЗаполнить()

// Функция возвращает ссылку на договор контрагента с отбором по текущей организации.
//
Функция ПолучитьДоговорОператораПлатежей(ОператорПлатежей, Организация) Экспорт
	
	ОсновнойДоговорОператора = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	УПЖКХ_ТиповыеМетодыСервер.УстановитьДоговорКонтрагента(ОсновнойДоговорОператора, ОператорПлатежей, Организация);
	
	Если Не ОсновнойДоговорОператора.Пустая() И ОсновнойДоговорОператора.Организация = Организация Тогда
		Возврат ОсновнойДоговорОператора;
	Иначе
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Владелец = &Оператор
		|	И ДоговорыКонтрагентов.Организация = &Организация
		|	И НЕ ДоговорыКонтрагентов.ПометкаУдаления
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДоговорыКонтрагентов.Дата УБЫВ";
		
		Запрос.УстановитьПараметр("Оператор",    ОператорПлатежей);
		Запрос.УстановитьПараметр("Организация", Организация);
		
		ВыборкаДоговоров = Запрос.Выполнить().Выбрать();
		
		Если ВыборкаДоговоров.Следующий() Тогда
			Возврат ВыборкаДоговоров.Ссылка;
		Иначе
			Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Функция определяет общую сумму оплат в документе "Регистрация оплаты", для которых 
// есть проведенные документы "Операция по платежной карте".
//
// Параметры:
//  ДокументСсылка - ссылка на документ "Регистрация оплаты".
//
Функция ОпределитьСуммуОплатПлатежнымиКартами(ДокументСсылка) Экспорт
	
	СуммаДокументаРО = 0;
	
	Если НЕ (ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.КВП_РегистрацияОплаты") 
	   И ДокументСсылка.ВидОперации = ПредопределенноеЗначение("Перечисление.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты")) Тогда
		Возврат СуммаДокументаРО;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТаблицаОплат", ДокументСсылка.ЛицевыеСчета.Выгрузить());
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ТаблицаОплат.ДокументОплаты КАК ДокументОплаты,
	|	ТаблицаОплат.Сумма КАК Сумма
	|ПОМЕСТИТЬ ВрТаблицаОплат
	|ИЗ
	|	&ТаблицаОплат КАК ТаблицаОплат
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ЕстьNULL(Сумма(ТаблицаОплат.Сумма), 0) КАК Сумма
	|ИЗ
	|	ВрТаблицаОплат КАК ТаблицаОплат
	|ГДЕ
	|	ТаблицаОплат.ДокументОплаты ССЫЛКА Документ.ОплатаПлатежнойКартой
	|	И ТаблицаОплат.ДокументОплаты.Проведен";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	// Оплата по л/с включается в общую сумму оплат при условии наличия ссылки 
	// на проведенный документ "Операция по платежной карте".
	Если Выборка.Следующий() Тогда
		СуммаДокументаРО = Выборка.Сумма;
	КонецЕсли;
	
	Возврат СуммаДокументаРО;
	
КонецФункции // ОпределитьСуммуОплатПлатежнымиКартами()

////////////////////////////////////////////////////////////////////////////////
// Проблема "фантомных расшифровок платежа":
//
// Однозначно неясно каким образом, но периодически появляются клиенты, у которых в расшифровке платежа
// присутствуют строки по лицевым счетам, которые отсутствуют в основной табличной части ("фантомные расшифровки").
// Это приводит к ошибкам при ведении учета. С этой целью добавлена проверка на соответствие данных по лицевым счетам
// расшифровки платежа и данных по лицевым счетам основной табличной части. Если "фантомные расшифровки" обнаружены, то
// 1. При интерактивной записи документа (из формы), если такие "фантомные расшифровки" обнаруживаются, пользователю
//    задается вопрос с предложением выбрать необходимое действие: либо удалить такие расшифровки, либо дополнить
//    основную табличную часть оплатами по "фантомным расшифровкам".
// 2. При НЕинтерактивном проведении документа "фантомные расшифровки" удаляются и по завершению проведения документа
//    пользователю информативно выводится информация о списке лицевых счетов, для которых были обнаружены и удалены
//    ошибочные расшифровки платежа.


// Функция получает список "фантомных" лицевых счетов, т.е. тех лицевых счетов, данные по которым
// присутствуют в табличной части "Расшифровка платежа", но отсутствуют в табличной части "Лицевые счета".
// 
Функция ПолучитьСписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа(ТаблицаЛицевыхСчетов, ТаблицаРасшифровкиПлатежа) Экспорт
	
	СписокОшибочныхЛицевыхСчетов = Новый Массив;
	
	ТаблицаЛицевыхСчетовИзРасшифровкиПлатежа = ТаблицаРасшифровкиПлатежа.Выгрузить(, "Объект");
	ТаблицаЛицевыхСчетовИзРасшифровкиПлатежа.Свернуть("Объект");
	
	Для Каждого СтрокаТаблицы Из ТаблицаЛицевыхСчетовИзРасшифровкиПлатежа Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаТаблицы.Объект) Тогда
			Продолжить;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаЛицевыхСчетов.НайтиСтроки(Новый Структура("Объект", СтрокаТаблицы.Объект));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СписокОшибочныхЛицевыхСчетов.Добавить(СтрокаТаблицы.Объект);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокОшибочныхЛицевыхСчетов;
	
КонецФункции // ПолучитьСписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа()

// Процедура удаляет из табличной части "Расшифровка платежа" данные по оплатам по лицевым счетам,
// отсутствующим в табличной части "Лицевые счета".
// 
Процедура УдалитьОшибочныеРасшифровкиПлатежа(СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа, ТаблицаРасшифровкиПлатежа) Экспорт
	
	Для Каждого ЛицевойСчет Из СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа Цикл
		
		НайденныеСтроки = ТаблицаРасшифровкиПлатежа.НайтиСтроки(Новый Структура("Объект", ЛицевойСчет));
		
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТаблицаРасшифровкиПлатежа.Удалить(НайденнаяСтрока);
		КонецЦикла;
		
		УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Удалены ошибочные расшифровки платежа по лицевому счету """ + ЛицевойСчет + """");
		
	КонецЦикла;
	
КонецПроцедуры // УдалитьОшибочныеРасшифровкиПлатежа()

// Процедура дополняет табличную часть "Лицевые счета" отсутствующими данными из табличной части "Расшифровка платежа".
// 
Процедура ДополнитьОплатыИзРасшифровкиПлатежа(СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа, ТаблицаРасшифровкиПлатежа, ТаблицаЛицевыхСчетов, ДатаДокумента) Экспорт
	
	Для Каждого ЛицевойСчет Из СписокОшибочныхЛицевыхСчетовРасшифровкиПлатежа Цикл
		
		НайденныеСтроки = ТаблицаРасшифровкиПлатежа.НайтиСтроки(Новый Структура("Объект", ЛицевойСчет));
		
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока = ТаблицаЛицевыхСчетов.Добавить();
			Сумма = 0;
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				Сумма = Сумма + НайденнаяСтрока.Сумма;
			КонецЦикла;
			
			НоваяСтрока.Объект = ЛицевойСчет;
			НоваяСтрока.Сумма  = Сумма;
			НоваяСтрока.Помещение = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(НоваяСтрока.Объект, "Адрес");
			НоваяСтрока.Владелец  = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(НоваяСтрока.Объект,
																													ДатаДокумента);
			
			УПЖКХ_ТиповыеМетодыКлиентСервер.СообщитьПользователю("Добавлена оплата по лицевому счету """ + ЛицевойСчет + """");
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ДополнитьОплатыИзРасшифровкиПлатежа()

////////////////////////////////////////////////////////////////////////////////
// Проведение

// Функция возвращает параметры проведения.
Функция ПодготовитьПараметрыПроведения(ДокументСсылка, Отказ) Экспорт

	ПараметрыПроведения = Новый Структура;
	
	Запрос = Новый Запрос;
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Реквизиты.Ссылка,
	|	Реквизиты.Номер,
	|	Реквизиты.Дата,
	|	Реквизиты.ВидОперации,
	|	Реквизиты.Дом,
	|	Реквизиты.ДокументОплаты,
	|	Реквизиты.Комментарий,
	|	Реквизиты.СуммаДокумента,
	|	Реквизиты.ИсточникОплаты,
	|	Реквизиты.Контрагент,
	|	Реквизиты.ОператорПлатежей,
	|	Реквизиты.ДоговорОператораПлатежей,
	|	Реквизиты.ДокументРасчетаСОператоромПлатежей,
	|	Реквизиты.Организация,
	|	Реквизиты.Ответственный
	|ИЗ
	|	Документ.КВП_РегистрацияОплаты КАК Реквизиты
	|ГДЕ
	|	Реквизиты.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Реквизиты = Новый Структура("Ссылка,Номер,Дата,ВидОперации,Дом,ДокументОплаты,Ответственный,
								|Комментарий,СуммаДокумента,ИсточникОплаты,Контрагент,
								|ОператорПлатежей,ДоговорОператораПлатежей,ДокументРасчетаСОператоромПлатежей,Организация");
	
	ЗаполнитьЗначенияСвойств(Реквизиты, Выборка);
	
	ПараметрыПроведения.Вставить("Реквизиты", Реквизиты);
	
	Возврат ПараметрыПроведения;
	
КонецФункции

#КонецОбласти

////////////////////////////////////////////////////////////////////////////////
// РАБОТА С ЧЕКАМИ

#Область Работа_с_чеками

// Собирает данные по лицевым счетам для вывода на печать в чеке.
//
// Параметры:
//  ОтборОбъектов - Структура - лицевые счета в разрезе документов "Регистрация оплаты".
//  ПараметрыПодключения - Структура - параметры подкючения оборудования.
// 
// Возвращаемое значение:
//  Массив - массив структур данных по каждому лицевому счету.
//
Функция СобратьДанныеЧеков(ОтборОбъектов, ПараметрыПодключения) Экспорт
	
	МассивЧеков = Новый Массив;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	ТаблицаОбъектов = ПолучитьТаблицуОбъектовДляЧеков(Запрос, ОтборОбъектов);
	
	Если НЕ ТаблицаОбъектов.Количество() = 0 Тогда
		
		ИдентификаторУстройства = ПараметрыПодключения.ИдентификаторУстройства;
		
		СтруктураПараметров = Новый Структура;
		СтруктураПараметров.Вставить("ШиринаСтрокиЧека",                      ПараметрыПодключения.ШиринаСтроки);
		СтруктураПараметров.Вставить("ПечататьЧекиИзРегистрацииОплаты",       Константы.УПЖКХ_ПечататьЧекиИзРегистрацииОплаты.Получить());
		СтруктураПараметров.Вставить("ПечататьЧекиСРасшифровкойПоУслугам",    Константы.УПЖКХ_ПечататьЧекиСРасшифровкойПоУслугам.Получить());
		СтруктураПараметров.Вставить("ПечататьЧекиПриОплатеБанковскойКартой", Константы.УПЖКХ_ПечататьЧекиПриОплатеБанковскойКартой.Получить());
		
		СтруктураПараметров.Вставить("ВыводитьПризнакПредметаРасчета",     Истина);
		СтруктураПараметров.Вставить("ВыводитьПризнакСпособаРасчета",      Истина);
		врПараметрыУстройства = УПЖКХ_ТиповыеМетодыСервер.ЗначенияРеквизитовОбъекта(ИдентификаторУстройства, "ВыводитьПризнакПредметаРасчета, ВыводитьПризнакСпособаРасчета");
		ЗаполнитьЗначенияСвойств(СтруктураПараметров, врПараметрыУстройства, "ВыводитьПризнакПредметаРасчета, ВыводитьПризнакСпособаРасчета");
		
		// В таблице расшифровок оплат использована свёртка по видам услуг, размерам НДС.
		РасшифровкаОплатДляЧеков = ПолучитьРасшифровкуОплатДляЧеков(Запрос, СтруктураПараметров);
		
		Отбор = Новый Структура("Документ, ЛицевойСчет");
		
		Для Каждого ТекущаяОплата Из ТаблицаОбъектов Цикл
			
			ЗаполнитьЗначенияСвойств(Отбор, ТекущаяОплата);
			
			РасшифровкаТекущейОплаты = РасшифровкаОплатДляЧеков.Скопировать(Отбор);
			
			Если НЕ РасшифровкаТекущейОплаты.Количество() = 0 Тогда
				
				ДобавитьСведенияОбОплатеВЧек(МассивЧеков, ТекущаяОплата, РасшифровкаТекущейОплаты, СтруктураПараметров);
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат МассивЧеков;
	
КонецФункции

// Получает таблицу объектов для чеков.
//
// Параметры:
//  Запрос			 - Запрос - основной запрос с данными по оплатам.
//  ОтборОбъектов	 - Структура - лицевые счета в разрезе документов "Регистрация оплаты".
// 
// Возвращаемое значение:
//  ТаблицаЗначений - основные сведения по лицевыем счетам.
//
Функция ПолучитьТаблицуОбъектовДляЧеков(Запрос, ОтборОбъектов)
	
	ТаблицаОтбора = Новый ТаблицаЗначений;
	
	Колонки = ТаблицаОтбора.Колонки;
	Колонки.Добавить("Документ",    Новый ОписаниеТипов("ДокументСсылка.КВП_РегистрацияОплаты"));
	Колонки.Добавить("ЛицевойСчет", Новый ОписаниеТипов("СправочникСсылка.КВП_ЛицевыеСчета"));
	
	Для Каждого ТекущаяСтрокаДокумент Из ОтборОбъектов Цикл
		Если ТекущаяСтрокаДокумент.ЛицевыеСчета = Неопределено Тогда
			ТаблицаОтбора.Добавить().Документ = ТекущаяСтрокаДокумент.Документ;
			Продолжить;
		Иначе
			Для Каждого ТекСтрокаЛС Из ТекущаяСтрокаДокумент.ЛицевыеСчета Цикл
				НоваяСтрока = ТаблицаОтбора.Добавить();
				НоваяСтрока.Документ    = ТекущаяСтрокаДокумент.Документ;
				НоваяСтрока.ЛицевойСчет = ТекСтрокаЛС.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Запрос.УстановитьПараметр("ТаблицаОтбора", ТаблицаОтбора);
	Запрос.УстановитьПараметр("ТекущаяДата",   ТекущаяДата());
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(ТаблицаОтбора.Документ КАК Документ.КВП_РегистрацияОплаты) КАК Документ,
	|	ТаблицаОтбора.ЛицевойСчет КАК ЛицевойСчет
	|ПОМЕСТИТЬ врТаблицаОтбора
	|ИЗ
	|	&ТаблицаОтбора КАК ТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	врТаблицаОтбора.Документ.Организация КАК Организация,
	|	врТаблицаОтбора.Документ КАК Документ,
	|	врТаблицаОтбора.Документ.ИсточникОплаты КАК ИсточникОплаты,
	|	врТаблицаОтбора.Документ.ВариантРаспределенияОплатКапРемонт КАК ВариантРаспределенияОплатКапРемонт,
	|	врТаблицаОтбора.Документ.ВидОперации КАК ВидОперации,
	|	врТаблицаОтбора.Документ.Дата КАК ДатаДокумента,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Объект КАК ЛицевойСчет
	|ПОМЕСТИТЬ ТаблицаОбъектов
	|ИЗ
	|	врТаблицаОтбора КАК врТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|		ПО врТаблицаОтбора.Документ = КВП_РегистрацияОплатыЛицевыеСчета.Ссылка
	|			И врТаблицаОтбора.ЛицевойСчет = КВП_РегистрацияОплатыЛицевыеСчета.Объект
	|ГДЕ
	|	НЕ врТаблицаОтбора.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|	И НЕ КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.ПометкаУдаления
	|	И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Проведен
	|	И КВП_РегистрацияОплатыЛицевыеСчета.НомерЧекаККМ = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	врТаблицаОтбора.Документ.Организация,
	|	врТаблицаОтбора.Документ,
	|	врТаблицаОтбора.Документ.ИсточникОплаты,
	|	врТаблицаОтбора.Документ.ВариантРаспределенияОплатКапРемонт,
	|	врТаблицаОтбора.Документ.ВидОперации,
	|	врТаблицаОтбора.Документ.Дата,
	|	КВП_РегистрацияОплатыЛицевыеСчета.Объект
	|ИЗ
	|	врТаблицаОтбора КАК врТаблицаОтбора
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.ЛицевыеСчета КАК КВП_РегистрацияОплатыЛицевыеСчета
	|		ПО врТаблицаОтбора.Документ = КВП_РегистрацияОплатыЛицевыеСчета.Ссылка
	|ГДЕ
	|	врТаблицаОтбора.ЛицевойСчет = ЗНАЧЕНИЕ(Справочник.КВП_ЛицевыеСчета.ПустаяСсылка)
	|	И НЕ КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.ПометкаУдаления
	|	И КВП_РегистрацияОплатыЛицевыеСчета.Ссылка.Проведен
	|	И КВП_РегистрацияОплатыЛицевыеСчета.НомерЧекаККМ = 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врТаблицаОтбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ЛицевойСчет КАК ЛицевойСчет,
	|	УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец КАК ОтветственныйВладелец,
	|	ПРЕДСТАВЛЕНИЕ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) КАК ОтветственныйВладелецПредставление,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец) = ТИП(Справочник.Контрагенты)
	|			ТОГДА УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ИНН
	|		ИНАЧЕ УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних.ОтветственныйВладелец.ФизЛицо.ИНН
	|	КОНЕЦ КАК ИНН
	|ПОМЕСТИТЬ втОтветственныеСобственникиНаниматели
	|ИЗ
	|	РегистрСведений.УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчета.СрезПоследних(
	|			&ТекущаяДата,
	|			ЛицевойСчет В
	|				(ВЫБРАТЬ
	|					ТаблицаОбъектов.ЛицевойСчет
	|				ИЗ
	|					ТаблицаОбъектов КАК ТаблицаОбъектов)) КАК УПЖКХ_ОтветственныйСобственникНанимательЛицевогоСчетаСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТаблицаОбъектов.Организация КАК Организация,
	|	ТаблицаОбъектов.Документ КАК Документ,
	|	ТаблицаОбъектов.ИсточникОплаты КАК ИсточникОплаты,
	|	ТаблицаОбъектов.ВариантРаспределенияОплатКапРемонт КАК ВариантРаспределенияОплатКапРемонт,
	|	ТаблицаОбъектов.ВидОперации КАК ВидОперации,
	|	ТаблицаОбъектов.ДатаДокумента КАК ДатаДокумента,
	|	ТаблицаОбъектов.ЛицевойСчет КАК ЛицевойСчет,
	|	ЕСТЬNULL(втОтветственныеСобственникиНаниматели.ОтветственныйВладелецПредставление, """") КАК ОтветственныйВладелецПредставление,
	|	ЕСТЬNULL(втОтветственныеСобственникиНаниматели.ИНН, """") КАК ИННОтветственного
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОтветственныеСобственникиНаниматели КАК втОтветственныеСобственникиНаниматели
	|		ПО ТаблицаОбъектов.ЛицевойСчет = втОтветственныеСобственникиНаниматели.ЛицевойСчет";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьТаблицуОбъектовДляЧеков()

// Процедура - Добавить сведения об оплате в чек
//
// Параметры:
//  МассивЧеков				 - Массив - массив структур данных по каждому лицевому счету.
//  ТекущаяОплата			 - Строка таблицы - сведения по оплате текщего лицевого счета.
//  РасшифровкаТекущейОплаты - Тбалица значений	 - таблица оплат по лицевому счету.
//  СтруктураПараметров		 - Структура - параметры печати чека.
//
Процедура ДобавитьСведенияОбОплатеВЧек(МассивЧеков, ТекущаяОплата, РасшифровкаТекущейОплаты, СтруктураПараметров)
	
	НомерСекции      = 2;
	ИсточникОплаты   = ТекущаяОплата.ИсточникОплаты;
	ШиринаСтрокиЧека = СтруктураПараметров.ШиринаСтрокиЧека;
	
	ВыводитьПризнакПредметаРасчета = СтруктураПараметров.ВыводитьПризнакПредметаРасчета;
	ВыводитьПризнакСпособаРасчета  = СтруктураПараметров.ВыводитьПризнакСпособаРасчета;
	
	СуммаЧека = РасшифровкаТекущейОплаты.Итог("Сумма");
	
	ПараметрыЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыОперацииФискализацииЧека();
	
	// ОБЩИЕ РЕКВИЗИТЫ ДЛЯ ВСЕХ ТИПОВ ОБОРУДОВАНИЯ.
	
	ПараметрыЧека.ИдентификаторФискальнойЗаписи = Строка(Новый УникальныйИдентификатор);
	
	ПараметрыЧека.Организация       = ТекущаяОплата.Организация;
	ПараметрыЧека.ДокументОснование = ТекущаяОплата.Документ;
	//ПараметрыЧека.Электронно        = Ложь; // Булево,Обязательно - Чек будет предоставлен в электронной форме, без печати. Ложь-Значение по умолчанию.
	
	// ТИП РАСЧЕТА, Обязательно.
	
	Если ТекущаяОплата.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы 
	 ИЛИ ТекущаяОплата.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета Тогда
		ПараметрыЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ВозвратДенежныхСредств;
	Иначе
		ПараметрыЧека.ТипРасчета = Перечисления.ТипыРасчетаДенежнымиСредствами.ПриходДенежныхСредств;
	КонецЕсли;
	
	// ПАРАМЕТРЫ ДЛЯ ККТ ПО ФЗ-54.
	
	// Реквизиты начиная с ФФД 1.1 (Введены приказом от 9 апреля 2018 г. N ММВ-7-20/207@)
	ПараметрыЧека.Получатель    = ТекущаяОплата.ОтветственныйВладелецПредставление;  // Строка,Необязательно - Получатель (покупатель)	
	ПараметрыЧека.ПолучательИНН = ТекущаяОплата.ИННОтветственного;  // Строка,Необязательно - ИНН получателя (ИНН покупателя)
	
	// Два первых параметра заполняются автоматически. Можно задать программно.
	Кассир = "";
	СтандартнаяОбработка = Истина;
	МенеджерОборудованияКлиентСерверПереопределяемый.ОбработкаЗаполненияИмяКассира(Кассир, СтандартнаяОбработка);
	ПараметрыЧека.Кассир = ?(Не СтандартнаяОбработка, Кассир, НСтр("ru='Администратор'"));  // Строка,Обязательно - ФИО лица, осуществившего расчет с покупателем (клиентом), оформившего кассовый чек.
	
	// ПараметрыЧека.КассирИНН = Неопределено; // Строка,Необязательно - Идентификационный номер налогоплательщика кассира, при наличии.
	// ПараметрыЧека.Отправляет1СSMS = Ложь; // Булево,Обязательно - SMS отправляет средствами 1C. Ложь-Значение по умолчанию.
	// ПараметрыЧека.Отправляет1СEmail = Ложь; // Булево,Обязательно - Email отправляет средствами 1C. Ложь-Значение по умолчанию.
	
	// СИСТЕМА НАЛОГООБЛОЖЕНИЯ.
	
	ПрименяетсяЕНВД                         = УчетнаяПолитика.ПлательщикЕНВД(ТекущаяОплата.Организация, ТекущаяОплата.ДатаДокумента);
	ПрименяетсяОсобыйПорядокНалогообложения = УчетнаяПолитика.ПрименяетсяОсобыйПорядокНалогообложения(ТекущаяОплата.Организация, ТекущаяОплата.ДатаДокумента);
	ПрименяетсяТолькоЕНВД                   = ПрименяетсяОсобыйПорядокНалогообложения И ПрименяетсяЕНВД;
	Если ПрименяетсяТолькоЕНВД Тогда 
		НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ЕНВД;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходы(ТекущаяОплата.Организация, ТекущаяОплата.ДатаДокумента) Тогда
		НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоход;
	ИначеЕсли УчетнаяПолитика.ПрименяетсяУСНДоходыМинусРасходы(ТекущаяОплата.Организация, ТекущаяОплата.ДатаДокумента) Тогда
		НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.УСНДоходРасход;
	Иначе
		НалоговыйРежим = Перечисления.ТипыСистемНалогообложенияККТ.ОСН;
	КонецЕсли;
	ПараметрыЧека.СистемаНалогообложения = НалоговыйРежим; // Обязательно.
	
	// Необязательные параметры для системы налогообложения.
	// ПараметрыЧека.АдресРасчетов = ""; // Строка,Необязательно - Адрес расчетов (Тег 1009).
	// ПараметрыЧека.МестоРасчетов = ""; // Строка,Необязательно - Место расчетов (Тег 1187).
	// ПараметрыЧека.ОтправительEmail = ""; // Строка,Необязательно - Адрес электронной почты отправителя чека (Тег 1117).
	// ПараметрыЧека.ПокупательEmail = ""; // Строка,Необязательно - Адрес электронной почты покупателя.
	// ПараметрыЧека.ПокупательНомер = ""; // Строка,Необязательно - Телефонный номер покупателя.
	
	// ПРИЗНАК АГЕНТА - "Перечисление.ПризнакиАгента", (ФФД, Тег 1057, Расшифровка - таблица 10)
	
	// Необязательные параметры для признака агента:
	// ПараметрыЧека.ПризнакАгента = Неопределено; // Перечисление - Признак агента (Тег 1057).
	// ПараметрыЧека.ДанныеАгента = Новый Структура; // Структура,Заполнение необязательно - Данные агента.
	// ПараметрыЧека.ДанныеПоставщика = Новый Структура; // Структура,Заполнение необязательно - Данные поставщика.
	
	// ПАРАМЕТРЫ НЕОБХОДИМЫЕ ДЛЯ ФР
	
	// ПараметрыЧека.СерийныйНомер = Неопределено; // Строка,Необязательно - Заводской номер ККМ (совместимость с ФР).
	
	// ПАРАМЕТРЫ НЕОБХОДИМЫЕ ДЛЯ ЧЕКА ЕНВД НА ПРИНТЕРЕ ЧЕКОВ.
	
	СведенияОбОрганизации = БухгалтерскийУчетПереопределяемый.СведенияОЮрФизЛице(ТекущаяОплата.Организация, ТекущаяОплата.ДатаДокумента);
	ПараметрыЧека.ОрганизацияНазвание = СведенияОбОрганизации.НаименованиеДляПечатныхФорм; // Строка,Необязательно - Название организации (Для чека ЕНВД).
	ПараметрыЧека.ОрганизацияИНН      = СведенияОбОрганизации.ИНН; // Строка,Необязательно - ИНН организации (Для чека ЕНВД).
	ПараметрыЧека.ОрганизацияКПП      = СведенияОбОрганизации.КПП; // Строка,Необязательно - КПП организации (Для чека ЕНВД).
	ПараметрыЧека.АдресМагазина       = СведенияОбОрганизации.ФактическийАдрес; // Строка,Необязательно - Адрес магазина (Для чека ЕНВД).
	ПараметрыЧека.НомерКассы          = "00001"; // Строка,Необязательно - Номер кассы (Для чека ЕНВД).
	ПараметрыЧека.НомерЧека           = 1; // Строка,Необязательно - Номер чека  (Для чека ЕНВД).
	ПараметрыЧека.НомерСмены          = 1; // Строка,Необязательно - Номер смены (Для чека ЕНВД).
	
	// Необязательные параметры для чека ЕНВД:
	// ПараметрыЧека.НаименованиеМагазина = ""; // Строка,Необязательно - Наименование магазина (Для чека ЕНВД).
	// ПараметрыЧека.ДатаВремя            = ТекущаяДата(); // ДатаВремя, Необязательно - Дата время в чеке (Для чека ЕНВД).
	// ПараметрыЧека.ТекстШапки           = НСтр("ru='ДОБРО ПОЖАЛОВАТЬ!'");   // Строка - заполняется значением по умолчанию. 
	// ПараметрыЧека.ТекстПодвала         = НСтр("ru='СПАСИБО ЗА ПОКУПКУ!'"); // Строка - заполняется значением по умолчанию. 
	// ПараметрыЧека.КопийЧека            = 1; // Число,Необязательно - Сколько печатать копий чеков ЕНВД на принтере чеков.
	
	// ПАРАМЕТРЫ ДЛЯ ПЕЧАТИ ЧЕКА ПО ШАБЛОНУ.
	
	// Необязательные параметры.
	// ПараметрыЧека.ШаблонЧека            = Неопределено; // Ссылка,Необязательно - Пользовательский шаблон для формирования чека.
	// ПараметрыЧека.КассаККМ              = Неопределено; // Ссылка,Необязательно - Касса ККМ. 
	// ПараметрыЧека.НефискальныеДокументы = Новый Массив(); // Массив нефискальных документов. Необязательно.
	
	// ФОРМАТО-ЛОГИЧЕСКИЙ КОНТРОЛЬ - "ПеречислениеСсылка.СпособыФорматоЛогическогоКонтроля"
	
	// Необязательные параметры.
	// ПараметрыЧека.СпособФорматоЛогическогоКонтроля = Неопределено; // Перечисление,Необязательно - Способ формато-логического контроля. 
	// ПараметрыЧека.ДопустимоеРасхождениеФорматоЛогическогоКонтроля = 0.01; // Число,Необязательно - устанавливается значение по умолчанию. 
	
	ЛицевойСчет = ТекущаяОплата.ЛицевойСчет;
	
	ПараметрыТекущегоЛицевогоСчета = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыОперацииФискализацииЧека();
	ЗаполнитьЗначенияСвойств(ПараметрыТекущегоЛицевогоСчета, ПараметрыЧека, , "ТаблицаОплат, ПозицииЧека");
	
	ПараметрыТекущегоЛицевогоСчета.Вставить("ЛицевойСчет", ЛицевойСчет);
	
	// ПОЗИЦИИ ЧЕКА ДЛЯ ФИСКАЛИЗАЦИИ.
	
	ПозицииЧека = Новый Массив;
	
	// Cтроку плательщика выводим как текст.
	
	ЭтоОперацииВозврата = ТекущаяОплата.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы
					  ИЛИ ТекущаяОплата.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета;
	
	НаименованиеПлательщика = 
		?(ЭтоОперацииВозврата, "Выдать: ", "Принято от: ")                                      // Префикс строки - вид операции возврата или прихода.
		+ УПЖКХ_ОбщегоНазначенияСервер.ПолучитьОтветственногоСобственникаЛицевогоСчета(ЛицевойСчет, ТекущаяОплата.ДатаДокумента) // Ответственный собственник л/с.
		+ " (" + УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеРеквизита(ЛицевойСчет, "Наименование") + ")";       // Наименование л/с.
	
	ТекстОснование = ?(ИсточникОплаты.Пустая(), "", "Основание: " + ИсточникОплаты); // Основание.
	
	СтрокаНаименованиеПлательщикаИОснования = НаименованиеПлательщика + " " + ТекстОснование;
	
	Если СтруктураПараметров.ПечататьЧекиСРасшифровкойПоУслугам Тогда
		// Формируем массив строк плательщика. При этом соблюдаем количество символов в строке чека.
		МассивСтрокПлательщика = Новый Массив;
		врТекущийТекстСтроки = "";
		врПроверяемаяСтрока  = "";
		
		// Разделяем строку плательщика на массив частей по разделителю "пробел".
		ЧастиСтроки        = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаНаименованиеПлательщикаИОснования, " ");
		МаксимальныйИндекс = ЧастиСтроки.ВГраница();
		
		// Формирум каждую строку плательщикасоблюдая ширину чека, и заполняем данными строками массив строк плательщика.
		Для Сч = 0 ПО МаксимальныйИндекс Цикл
			ТекущаяЧастьСтроки = ЧастиСтроки[Сч];
			
			// Проверяемая строка в чеке после добавления текущей части строки плательщика.
			врПроверяемаяСтрока = врТекущийТекстСтроки + ?(ПустаяСтрока(врТекущийТекстСтроки), "", " ") + ТекущаяЧастьСтроки + " ";
			
			// Для всех частей строки плательщика производим проверку на вместимость по длине в строку чека.
			Если СтрДлина(врПроверяемаяСтрока) > ШиринаСтрокиЧека Тогда
				// Если проверяемая строка не вмещается в строку чека по количеству символов, то:
				// 1. в массив срок плательщика выводим сформированную строку до добавления к ней текущей части строки плательщика;
				ТекстоваяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыТекстовойСтрокиЧека(врТекущийТекстСтроки);
				МассивСтрокПлательщика.Добавить(ТекстоваяСтрокаПозицииЧека);
				// 2. в качестве текущей добавляемой строки плательщика используем теперь текущую часть строки плательщика.
				врТекущийТекстСтроки = ТекущаяЧастьСтроки;
				// 3. для последней итерации проверки выводим в массив строк плательщика текущую часть.
				Если Сч = МаксимальныйИндекс Тогда
					ТекстоваяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыТекстовойСтрокиЧека(врТекущийТекстСтроки);
					МассивСтрокПлательщика.Добавить(ТекстоваяСтрокаПозицииЧека);
				КонецЕсли;
				
			ИначеЕсли Сч = МаксимальныйИндекс Тогда
				// Последнюю часть добавляем в массив как есть.
				ТекстоваяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыТекстовойСтрокиЧека(врПроверяемаяСтрока);
				МассивСтрокПлательщика.Добавить(ТекстоваяСтрокаПозицииЧека);
			Иначе
				врТекущийТекстСтроки = врПроверяемаяСтрока;
			КонецЕсли;
			
		КонецЦикла;
		
		// К последней строке в массиве строк плательщика добавим слева через пробел строку общей суммы поступления/возврата денежных средств.
		ПоследняяСтрокаПлательщика      = МассивСтрокПлательщика.Получить(МассивСтрокПлательщика.ВГраница());
		ТекстПоследнейСтрокиПлательщика = ПоследняяСтрокаПлательщика.Текст;
		
		// Формируем строку суммы, слева добавляем один пробел в качестве разделителя.
		СтрокаСуммы              = Формат(СуммаЧека, "ЧДЦ=2");
		СтрокаСуммыСРазделителем = " " + СтрокаСуммы;
		
		// Проверим полученную строку с разделителем на условие по ширине строки чека.
		Если СтрДлина(ТекстПоследнейСтрокиПлательщика + СтрокаСуммыСРазделителем) <= ШиринаСтрокиЧека Тогда
			// Если полученная строка с разделителем вмещается в строку чека по количеству символов, то
			// сначала добавим разделители (пробелы) между последней частью строки плательщика и строкой суммы.
			ТекстПоследнейСтрокиПлательщикаСПробелами = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(ТекстПоследнейСтрокиПлательщика,
																									 ШиринаСтрокиЧека - СтрДлина(СтрокаСуммы),
																									 " ",
																									 "Справа");
			// Полученную строку устанавливаем в качестве последней строки в массиве строк плательщика.
			ПоследняяСтрокаПлательщика.Текст = "" + ТекстПоследнейСтрокиПлательщикаСПробелами + СтрокаСуммы;
		Иначе
			// Если полученная строка с разделителем не вмещается в строку чека по количеству символов, то
			// формируем еще одну часть строки плательщика строкой суммы. При этом слева строки суммы добавляем
			// пробелы для выравнивания суммы справа в строке чека.
			СтрокаСуммы = СтроковыеФункцииКлиентСервер.ДополнитьСтроку(СтрокаСуммы, ШиринаСтрокиЧека, " ", "Слева");
			
			ТекстоваяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыТекстовойСтрокиЧека(СтрокаСуммы);
			МассивСтрокПлательщика.Добавить(ТекстоваяСтрокаПозицииЧека);
		КонецЕсли;
		
		// Полученные строки плательщика добавляем в массив позиций чека.
		Для Каждого ТекущаяСтрока Из МассивСтрокПлательщика Цикл
			ПозицииЧека.Добавить(ТекущаяСтрока);
		КонецЦикла;
		
	Иначе
		
		Для Каждого ТекущаяСтрокаОплаты Из РасшифровкаТекущейОплаты Цикл
			
			НаименованиеПлательщикаИОснование = СтрокаНаименованиеПлательщикаИОснования;
			Основание                         = ТекстОснование;
			
			Если ТекущаяСтрокаОплаты.ЭтоПени И Не ИсточникОплаты.Пустая() Тогда
				НаименованиеПлательщикаИОснование = НаименованиеПлательщикаИОснование + " (пени)";
				Основание = Основание + " (пени)";
			КонецЕсли;
			
			ВыводитьОснованиеРаздельно = СтрДлина(НаименованиеПлательщикаИОснование) > 64;
			
			ФискальнаяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыФискальнойСтрокиЧека();
			ФискальнаяСтрокаПозицииЧека.Наименование           = ?(ВыводитьОснованиеРаздельно, НаименованиеПлательщика, НаименованиеПлательщикаИОснование);
			ФискальнаяСтрокаПозицииЧека.Количество             = 1;
			ФискальнаяСтрокаПозицииЧека.Цена                   = ТекущаяСтрокаОплаты.Сумма;
			ФискальнаяСтрокаПозицииЧека.ЦенаСоСкидками         = ФискальнаяСтрокаПозицииЧека.Цена;
			ФискальнаяСтрокаПозицииЧека.Сумма                  = ФискальнаяСтрокаПозицииЧека.Цена;
			ФискальнаяСтрокаПозицииЧека.СтавкаНДС              = ТекущаяСтрокаОплаты.СтавкаНДС;
			ФискальнаяСтрокаПозицииЧека.НомерСекции            = НомерСекции;
			
			ФискальнаяСтрокаПозицииЧека.ПризнакПредметаРасчета = ТекущаяСтрокаОплаты.ПризнакПредметаРасчета;
			ФискальнаяСтрокаПозицииЧека.ПризнакСпособаРасчета  = ТекущаяСтрокаОплаты.ПризнакСпособаРасчета;
			
			ПозицииЧека.Добавить(ФискальнаяСтрокаПозицииЧека);
			
			Если ВыводитьОснованиеРаздельно И Не ИсточникОплаты.Пустая() Тогда
				ТекстоваяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыТекстовойСтрокиЧека(Основание);
				ТекстоваяСтрокаПозицииЧека.ПереносСтроки = Истина;
				ПозицииЧека.Добавить(ТекстоваяСтрокаПозицииЧека);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// Расшифровка по услугам.
	Если СтруктураПараметров.ПечататьЧекиСРасшифровкойПоУслугам Тогда
		
		// Верхний разделитель области расшифровки.
		СтрокаРазделительРасшифровки = ".......Расшифровка оплаты.......";
		ТекстоваяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыТекстовойСтрокиЧека(СтрокаРазделительРасшифровки);
		ПозицииЧека.Добавить(ТекстоваяСтрокаПозицииЧека);
		
		// Строки расшифровки по услугам.
		Для Каждого ТекущаяСтрокаОплаты Из РасшифровкаТекущейОплаты Цикл
			ФискальнаяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыФискальнойСтрокиЧека();
			ФискальнаяСтрокаПозицииЧека.Наименование           = СтрЗаменить(СокрЛП(ТекущаяСтрокаОплаты.ВидУслугиПредставление), "  ", " ");
			ФискальнаяСтрокаПозицииЧека.Количество             = 1;
			ФискальнаяСтрокаПозицииЧека.Цена                   = ТекущаяСтрокаОплаты.Сумма;
			ФискальнаяСтрокаПозицииЧека.ЦенаСоСкидками         = ФискальнаяСтрокаПозицииЧека.Цена;
			ФискальнаяСтрокаПозицииЧека.Сумма                  = ФискальнаяСтрокаПозицииЧека.Цена;
			ФискальнаяСтрокаПозицииЧека.СтавкаНДС              = ТекущаяСтрокаОплаты.СтавкаНДС;
			ФискальнаяСтрокаПозицииЧека.НомерСекции            = НомерСекции;
			
			ФискальнаяСтрокаПозицииЧека.ПризнакПредметаРасчета = ТекущаяСтрокаОплаты.ПризнакПредметаРасчета;
			ФискальнаяСтрокаПозицииЧека.ПризнакСпособаРасчета  = ТекущаяСтрокаОплаты.ПризнакСпособаРасчета;
			
			ПозицииЧека.Добавить(ФискальнаяСтрокаПозицииЧека);
		КонецЦикла;
		
		// Нижний разделитель области расшифровки.
		СтрокаРазделительРасшифровки = "................................";
		ТекстоваяСтрокаПозицииЧека = УПЖКХ_ТиповыеМетодыКлиентСервер.ПараметрыТекстовойСтрокиЧека(СтрокаРазделительРасшифровки);
		ПозицииЧека.Добавить(ТекстоваяСтрокаПозицииЧека);
		
	КонецЕсли;
	
	ПараметрыТекущегоЛицевогоСчета.ПозицииЧека = ПозицииЧека; // Массив элементов "Структура". Обязательно.
	
	// ТАБЛИЦА ОПЛАТЫ ЧЕКА.
	ТаблицаОплат = ПараметрыТекущегоЛицевогоСчета.ТаблицаОплат; // Массив элементов "Структура". Обязательно.
	
	Если ТекущаяОплата.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеСПлатежнойКарты
	 ИЛИ ТекущаяОплата.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет
	 ИЛИ ТекущаяОплата.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета Тогда
		ТипОплаты = Перечисления.ТипыОплатыККТ.Электронно;
	Иначе
		ТипОплаты = Перечисления.ТипыОплатыККТ.Наличные;
	КонецЕсли;
	
	// Авансы:
	
	Если ВыводитьПризнакСпособаРасчета Тогда
		
		Отбор       = Новый Структура("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.Аванс);
		СуммаАванса = РасшифровкаТекущейОплаты.Скопировать(Отбор).Итог("Сумма");
		Если СуммаАванса > 0 Тогда
			ТаблицаОплат.Добавить(Новый Структура("ТипОплаты, Сумма", Перечисления.ТипыОплатыККТ.Предоплата, СуммаАванса));
		КонецЕсли;
		
		// Полная оплата:
		Отбор       = Новый Структура("ПризнакСпособаРасчета", Перечисления.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой);
		СуммаПолная = РасшифровкаТекущейОплаты.Скопировать(Отбор).Итог("Сумма");
		Если СуммаПолная > 0 Тогда
			ТаблицаОплат.Добавить(Новый Структура("ТипОплаты, Сумма", ТипОплаты, СуммаПолная));
		КонецЕсли;
		
	Иначе
		
		Сумма = РасшифровкаТекущейОплаты.Итог("Сумма");
		Если Сумма > 0 Тогда
			ТаблицаОплат.Добавить(Новый Структура("ТипОплаты, Сумма", ТипОплаты, Сумма));
		КонецЕсли;
		
	КонецЕсли;
	
	МассивЧеков.Добавить(ПараметрыТекущегоЛицевогоСчета);
	
КонецПроцедуры

// Формирует массив структур данных об оплатах для вывода в фискальный чек.
//
// Параметры:
//  Запрос				 - Запрос - основные сведения по лицевым счетам.
//  СтруктураПараметров	 - Структура - структура параметров печати чеков.
// 
// Возвращаемое значение:
//  ТаблицаЗначений.
//
Функция ПолучитьРасшифровкуОплатДляЧеков(Запрос, СтруктураПараметров)
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_УчетнаяПолитикаТСЖСрезПоследних.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА КВП_УчетнаяПолитикаТСЖСрезПоследних.СтавкаНДСДляОтраженияПени = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_СтавкиНДСДляПениПриОтраженииВРеглУчете.БезНДС)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК ОтражатьПениПоСтавкеБезНДС
	|ПОМЕСТИТЬ врОтражатьПениПоСтавкеБезНДС
	|ИЗ
	|	РегистрСведений.КВП_УчетнаяПолитикаТСЖ.СрезПоследних(
	|			&ТекущаяДата,
	|			Организация В
	|				(ВЫБРАТЬ
	|					ТаблицаОбъектов.Организация КАК ДокументОрганизация
	|				ИЗ
	|					ТаблицаОбъектов КАК ТаблицаОбъектов)) КАК КВП_УчетнаяПолитикаТСЖСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаОбъектов.Документ КАК Документ,
	|	ТаблицаОбъектов.Организация КАК Организация,
	|	ТаблицаОбъектов.ЛицевойСчет КАК ЛицевойСчет,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга КАК Услуга,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги КАК ВидУслуги,
	|	ПРЕДСТАВЛЕНИЕ(КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги) КАК ВидУслугиПредставление,
	|	ВЫБОР
	|		КОГДА НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги = ЗНАЧЕНИЕ(Справочник.КВП_ВидыУслуг.ПустаяСсылка)
	|				И (КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги.СпособВыводаВКвитанциях = ""Тариф сворачивать, количество суммировать""
	|					ИЛИ КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги.СпособВыводаВКвитанциях = ""Количество сворачивать, тариф суммировать"")
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК НеобходимоСвернуть,
	|	СУММА(ВЫБОР
	|			КОГДА НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма = 0
	|					И КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма > КВП_РегистрацияОплатыРасшифровкаПлатежа.ДолгСумма
	|				ТОГДА КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма - КВП_РегистрацияОплатыРасшифровкаПлатежа.ДолгСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК ПереплатаПоНачислениям,
	|	СУММА(ВЫБОР
	|			КОГДА КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма = 0
	|				ТОГДА 0
	|			КОГДА КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма <= КВП_РегистрацияОплатыРасшифровкаПлатежа.ДолгСумма
	|				ТОГДА КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма
	|			КОГДА КВП_РегистрацияОплатыРасшифровкаПлатежа.Сумма > КВП_РегистрацияОплатыРасшифровкаПлатежа.ДолгСумма
	|				ТОГДА КВП_РегистрацияОплатыРасшифровкаПлатежа.ДолгСумма
	|			ИНАЧЕ 0
	|		КОНЕЦ + КВП_РегистрацияОплатыРасшифровкаПлатежа.Рассрочка) КАК Сумма,
	|	СУММА(КВП_РегистрацияОплатыРасшифровкаПлатежа.Пени) КАК Пени,
	|	ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Услуга.ВидСтавкиНДС, ВЫБОР
	|			КОГДА ТаблицаОбъектов.ВариантРаспределенияОплатКапРемонт = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)
	|			ИНАЧЕ &ВидСтавкиНДСИзПерсональныхНастроек
	|		КОНЕЦ) КАК ВидСтавкиНДС,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Услуга.Услуга, ИСТИНА) = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Товар)
	|	КОНЕЦ КАК ПризнакПредметаРасчета
	|ПОМЕСТИТЬ втТаблицаРасшифровка
	|ИЗ
	|	ТаблицаОбъектов КАК ТаблицаОбъектов
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.КВП_РегистрацияОплаты.РасшифровкаПлатежа КАК КВП_РегистрацияОплатыРасшифровкаПлатежа
	|		ПО ТаблицаОбъектов.Документ = КВП_РегистрацияОплатыРасшифровкаПлатежа.Ссылка
	|			И ТаблицаОбъектов.ЛицевойСчет = КВП_РегистрацияОплатыРасшифровкаПлатежа.Объект
	|
	|СГРУППИРОВАТЬ ПО
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга,
	|	КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги,
	|	ТаблицаОбъектов.Документ,
	|	ТаблицаОбъектов.Организация,
	|	ТаблицаОбъектов.ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА НЕ КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги = ЗНАЧЕНИЕ(Справочник.КВП_ВидыУслуг.ПустаяСсылка)
	|				И (КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги.СпособВыводаВКвитанциях = ""Тариф сворачивать, количество суммировать""
	|					ИЛИ КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.ВидУслуги.СпособВыводаВКвитанциях = ""Количество сворачивать, тариф суммировать"")
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ,
	|	ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Услуга.ВидСтавкиНДС, ВЫБОР
	|			КОГДА ТаблицаОбъектов.ВариантРаспределенияОплатКапРемонт = ЗНАЧЕНИЕ(Перечисление.УПЖКХ_ВариантыРаспределенияОплатыПриРаздельномУчетеКР.УслугиКапРемонт)
	|				ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)
	|			ИНАЧЕ &ВидСтавкиНДСИзПерсональныхНастроек
	|		КОНЕЦ),
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(КВП_РегистрацияОплатыРасшифровкаПлатежа.Услуга.Услуга.Услуга, ИСТИНА) = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Услуга)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.ПризнакиПредметаРасчета.Товар)
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТаблицаРасшифровка.Документ КАК Документ,
	|	втТаблицаРасшифровка.ЛицевойСчет КАК ЛицевойСчет,
	|	втТаблицаРасшифровка.Услуга КАК Услуга,
	|	втТаблицаРасшифровка.ВидУслугиПредставление КАК ВидУслугиПредставление,
	|	втТаблицаРасшифровка.ВидСтавкиНДС КАК ВидСтавкиНДС,
	|	втТаблицаРасшифровка.ПереплатаПоНачислениям КАК Сумма,
	|	ЛОЖЬ КАК ЭтоПени,
	|	ИСТИНА КАК ЭтоАванс,
	|	втТаблицаРасшифровка.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.Аванс) КАК ПризнакСпособаРасчета,
	|	втТаблицаРасшифровка.НеобходимоСвернуть КАК НеобходимоСвернуть
	|ПОМЕСТИТЬ втДанныеПоВидамОплат
	|ИЗ
	|	втТаблицаРасшифровка КАК втТаблицаРасшифровка
	|ГДЕ
	|	втТаблицаРасшифровка.ПереплатаПоНачислениям > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТаблицаРасшифровка.Документ,
	|	втТаблицаРасшифровка.ЛицевойСчет,
	|	втТаблицаРасшифровка.Услуга,
	|	втТаблицаРасшифровка.ВидУслугиПредставление,
	|	втТаблицаРасшифровка.ВидСтавкиНДС,
	|	втТаблицаРасшифровка.Сумма,
	|	ЛОЖЬ,
	|	ЛОЖЬ,
	|	втТаблицаРасшифровка.ПризнакПредметаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой),
	|	втТаблицаРасшифровка.НеобходимоСвернуть
	|ИЗ
	|	втТаблицаРасшифровка КАК втТаблицаРасшифровка
	|ГДЕ
	|	втТаблицаРасшифровка.Сумма > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втТаблицаРасшифровка.Документ,
	|	втТаблицаРасшифровка.ЛицевойСчет,
	|	втТаблицаРасшифровка.Услуга,
	|	втТаблицаРасшифровка.ВидУслугиПредставление,
	|	ВЫБОР
	|		КОГДА ЕСТЬNULL(врОтражатьПениПоСтавкеБезНДС.ОтражатьПениПоСтавкеБезНДС, ИСТИНА) = ИСТИНА
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.ВидыСтавокНДС.БезНДС)
	|		ИНАЧЕ втТаблицаРасшифровка.ВидСтавкиНДС
	|	КОНЕЦ,
	|	втТаблицаРасшифровка.Пени,
	|	ИСТИНА,
	|	ЛОЖЬ,
	|	втТаблицаРасшифровка.ПризнакПредметаРасчета,
	|	ЗНАЧЕНИЕ(Перечисление.ПризнакиСпособаРасчета.ПередачаСПолнойОплатой),
	|	втТаблицаРасшифровка.НеобходимоСвернуть
	|ИЗ
	|	втТаблицаРасшифровка КАК втТаблицаРасшифровка
	|		ЛЕВОЕ СОЕДИНЕНИЕ врОтражатьПениПоСтавкеБезНДС КАК врОтражатьПениПоСтавкеБезНДС
	|		ПО втТаблицаРасшифровка.Организация = врОтражатьПениПоСтавкеБезНДС.Организация
	|ГДЕ
	|	втТаблицаРасшифровка.Пени > 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втТаблицаРасшифровка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ врОтражатьПениПоСтавкеБезНДС";
	
	// Если чек печатается с расшифровкой, то получим суммы в разрезе услуг и ставок НДС,
	// если без расшифровки, то получим суммы только в разрезе ставок НДС.
	Если СтруктураПараметров.ПечататьЧекиСРасшифровкойПоУслугам Тогда
		
		Запрос.Текст = Запрос.Текст +"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"+
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	втДанныеПоВидамОплат.Документ КАК Документ,
		|	втДанныеПоВидамОплат.ЛицевойСчет КАК ЛицевойСчет,
		|	втДанныеПоВидамОплат.ВидУслугиПредставление КАК ВидУслугиПредставление,
		|	втДанныеПоВидамОплат.ВидСтавкиНДС КАК ВидСтавкиНДС,
		|	СУММА(втДанныеПоВидамОплат.Сумма) КАК Сумма,
		|	втДанныеПоВидамОплат.ЭтоПени КАК ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
		|ИЗ
		|	втДанныеПоВидамОплат КАК втДанныеПоВидамОплат
		|ГДЕ
		|	втДанныеПоВидамОплат.НеобходимоСвернуть
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеПоВидамОплат.Документ,
		|	втДанныеПоВидамОплат.ЛицевойСчет,
		|	втДанныеПоВидамОплат.ВидУслугиПредставление,
		|	втДанныеПоВидамОплат.ВидСтавкиНДС,
		|	втДанныеПоВидамОплат.ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втДанныеПоВидамОплат.Документ,
		|	втДанныеПоВидамОплат.ЛицевойСчет,
		|	втДанныеПоВидамОплат.ВидУслугиПредставление,
		|	втДанныеПоВидамОплат.ВидСтавкиНДС,
		|	СУММА(втДанныеПоВидамОплат.Сумма),
		|	втДанныеПоВидамОплат.ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета
		|ИЗ
		|	втДанныеПоВидамОплат КАК втДанныеПоВидамОплат
		|ГДЕ
		|	НЕ втДанныеПоВидамОплат.НеобходимоСвернуть
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеПоВидамОплат.Документ,
		|	втДанныеПоВидамОплат.ЛицевойСчет,
		|	втДанныеПоВидамОплат.Услуга,
		|	втДанныеПоВидамОплат.ВидСтавкиНДС,
		|	втДанныеПоВидамОплат.ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета,
		|	втДанныеПоВидамОплат.ВидУслугиПредставление";
		
	Иначе
		
		Запрос.Текст = Запрос.Текст +"
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|"+
		"ВЫБРАТЬ
		|	втДанныеПоВидамОплат.Документ КАК Документ,
		|	втДанныеПоВидамОплат.ЛицевойСчет КАК ЛицевойСчет,
		|	втДанныеПоВидамОплат.ВидСтавкиНДС КАК ВидСтавкиНДС,
		|	СУММА(втДанныеПоВидамОплат.Сумма) КАК Сумма,
		|	втДанныеПоВидамОплат.ЭтоПени КАК ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета КАК ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета КАК ПризнакСпособаРасчета
		|ИЗ
		|	втДанныеПоВидамОплат КАК втДанныеПоВидамОплат
		|
		|СГРУППИРОВАТЬ ПО
		|	втДанныеПоВидамОплат.Документ,
		|	втДанныеПоВидамОплат.ЛицевойСчет,
		|	втДанныеПоВидамОплат.ВидСтавкиНДС,
		|	втДанныеПоВидамОплат.ЭтоПени,
		|	втДанныеПоВидамОплат.ПризнакПредметаРасчета,
		|	втДанныеПоВидамОплат.ПризнакСпособаРасчета";
		
	КонецЕсли;
	
	ТекущаяДата           = ТекущаяДата();
	СтавкаНДСПеречисление = УПЖКХ_ОбщегоНазначенияСервер.ПолучитьЗначениеОсновнойСтавкиНДСПоУмолчанию(ТекущаяДата);
	
	Запрос.УстановитьПараметр("ВидСтавкиНДСИзПерсональныхНастроек", Перечисления.ВидыСтавокНДС.ВидСтавки(СтавкаНДСПеречисление));
	
	РасшифровкаОплатДляЧеков = Запрос.Выполнить().Выгрузить();
	
	РасшифровкаОплатДляЧеков.Колонки.Добавить("СтавкаНДС");
	
	Для Каждого ТекущаяСтрока Из РасшифровкаОплатДляЧеков Цикл
		
		Если ТекущаяСтрока.ЭтоПени И СтруктураПараметров.ПечататьЧекиСРасшифровкойПоУслугам Тогда 
			ТекущаяСтрока.ВидУслугиПредставление = "" + ТекущаяСтрока.ВидУслугиПредставление + " (пени)";
		КонецЕсли;
		
		Если ТекущаяСтрока.ВидСтавкиНДС = Перечисления.ВидыСтавокНДС.БезНДС Тогда
			ТекущаяСтрока.СтавкаНДС = Неопределено;
		Иначе
			ТекущаяСтрока.СтавкаНДС = УПЖКХ_ТиповыеМетодыВызовСервера.ПолучитьСтавкуНДС(Перечисления.СтавкиНДС.СтавкаНДС(ТекущаяСтрока.ВидСтавкиНДС, ТекущаяДата));
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РасшифровкаОплатДляЧеков;
	
КонецФункции // ПолучитьРасшифровкуОплатДляЧеков()

#КонецОбласти // Работа_с_чеками

////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ И ФУНКЦИИ ПЕЧАТИ

#Область ПроцедурыИФункцииПечати

// Формирует структуру из параметров макета для заполнения табличного документа.
Функция ПолучитьСтруктуруДляЗаполнения()
	
	Состав = "ТекстШапкиРасшифровки,ПлатПолуч,ЛС,ФИОПлатПолуч,ЛСФИО,ЛСАдрес,ОбщПлощадь,КолвоПроживающих,"
		   + "ПолучательПлатежа,ИННОрганизации,РСчетОрганизации,АдресОрганизации,ТелефонОрганизации,ТекстНачислено,"
		   + "НачисленияОплаченоВозвращено,ТекстНачислено,ПениОплаченоВозвращено,РассрочкаОплаченоВозвращено,ПериодОплаты,"
		   + "ВидУслуги,НачисленоПоУслуге,ОплаченоПоУслуге,ПениНачислено,ПениОплачено,РассрочкаНачислено,РассрочкаОплачено,"
		   + "ПериодОплаты,ИтогоНачисленоЗаМесяц,ИтогоОплаченоВозвращеноЗаМесяц,ПениНачисленоЗаМесяц,ПениОплаченоВозвращеноЗаМесяц,"
		   + "РассрочкаНачисленоЗаМесяц,РассрочкаОплаченоВозвращеноЗаМесяц,ВсегоНачислено,ВсегоОплаченоВозвращено,ВсегоНачисленоПени,"
		   + "ВсегоОплаченоВозвращеноПени,ВсегоНачисленоРассрочка,ВсегоОплаченоВозвращеноРассрочка,ВидУслугиИтог,ИтогоНачисленоПоУслуге,"
		   + "ИтогоОплаченоВозвращено,ИтогоНачисленоПени,ИтогоНачисленоВозвращеноПени,ИтогоНачисленоРассрочка,ИтогоНачисленоВозвращеноРассрочка,"
		   + "ПереплатаЗадолженность,ДатаДокумента,СуммаЗадолженностиПереплаты,ОплаченоВозвращено,ВсегоОплаченоВозвращено,ЗадолженностьПереплата,"
		   + "СуммаЗадолженностиПереплаты";
	
	Возврат Новый Структура(Состав);
	
КонецФункции // ПолучитьСтруктуруДляЗаполнения()

// Формирует таблицу с оплатами, которая группируется по лицевому счету и услуге.
Функция ДанныеОбОплатеСГруппировками(РасшифровкаПлатежа, ТекОбъект = Неопределено)
	
	Запрос = Новый Запрос;

	Если НЕ ТекОбъект = Неопределено Тогда
		УсловиеЛС = "И Объект = &ЛицевойСчет";
		Запрос.УстановитьПараметр("ЛицевойСчет", ТекОбъект.Объект);
	Иначе
		УсловиеЛС = "";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.Объект,
	|	РасшифровкаПлатежа.Услуга,
	|	РасшифровкаПлатежа.Сумма,
	|	РасшифровкаПлатежа.Пени,
	|	РасшифровкаПлатежа.Рассрочка,
	|	РасшифровкаПлатежа.МесяцНачисления,
	|	РасшифровкаПлатежа.ДолгСумма,
	|	РасшифровкаПлатежа.ДолгПени,
	|	РасшифровкаПлатежа.ДолгРассрочка,
	|	РасшифровкаПлатежа.ФлагРедСумма,
	|	РасшифровкаПлатежа.ФлагРедПени,
	|	РасшифровкаПлатежа.ФлагРедРассрочка
	|ПОМЕСТИТЬ втРасшифровкаПлатежа
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРасшифровкаПлатежа.Объект КАК Объект,
	|	втРасшифровкаПлатежа.Услуга.Наименование КАК Наименование,
	|	СУММА(ЕСТЬNULL(втРасшифровкаПлатежа.Сумма, 0)) КАК СуммаОплата,
	|	СУММА(ЕСТЬNULL(втРасшифровкаПлатежа.Пени, 0)) КАК ПениОплата,
	|	СУММА(ЕСТЬNULL(втРасшифровкаПлатежа.Рассрочка, 0)) КАК РассрочкаОплата,
	|	СУММА(ЕСТЬNULL(втРасшифровкаПлатежа.ДолгСумма, 0)) КАК ДолгСуммаОплата,
	|	СУММА(ЕСТЬNULL(втРасшифровкаПлатежа.ДолгПени, 0)) КАК ДолгПениОплата,
	|	СУММА(ЕСТЬNULL(втРасшифровкаПлатежа.ДолгРассрочка, 0)) КАК ДолгРассрочкаОплата
	|ИЗ
	|	втРасшифровкаПлатежа КАК втРасшифровкаПлатежа
	|ГДЕ
	|	ИСТИНА
	|	" + УсловиеЛС + "
	|
	|СГРУППИРОВАТЬ ПО
	|	втРасшифровкаПлатежа.Объект,
	|	втРасшифровкаПлатежа.Услуга.Наименование";
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	Результат = Запрос.Выполнить().Выгрузить();
	
	Возврат Результат;
КонецФункции // ДанныеОбОплатеСГруппировками()

// Формирует таблицу с оплатами по услугам в разрезе месяцев начисления.
//
Функция ДанныеОбОплатеПоМесяцамНачисления(РасшифровкаПлатежа, ТекОбъект = Неопределено)
	
	Запрос = Новый Запрос;
	
	Если НЕ ТекОбъект = Неопределено Тогда
		УсловиеЛС = "И Объект = &ЛицевойСчет";
		Запрос.УстановитьПараметр("ЛицевойСчет", ТекОбъект.Объект);
	Иначе
		УсловиеЛС = "";
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	РасшифровкаПлатежа.Объект,
	|	РасшифровкаПлатежа.Услуга,
	|	РасшифровкаПлатежа.Сумма,
	|	РасшифровкаПлатежа.Пени,
	|	РасшифровкаПлатежа.Рассрочка,
	|	РасшифровкаПлатежа.МесяцНачисления,
	|	РасшифровкаПлатежа.ДолгСумма,
	|	РасшифровкаПлатежа.ДолгПени,
	|	РасшифровкаПлатежа.ДолгРассрочка,
	|	РасшифровкаПлатежа.ФлагРедСумма,
	|	РасшифровкаПлатежа.ФлагРедПени,
	|	РасшифровкаПлатежа.ФлагРедРассрочка
	|ПОМЕСТИТЬ втРасшифровкаПлатежа
	|ИЗ
	|	&РасшифровкаПлатежа КАК РасшифровкаПлатежа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРасшифровкаПлатежа.Объект КАК Объект,
	|	втРасшифровкаПлатежа.Услуга.Наименование КАК Наименование,
	|	СУММА(втРасшифровкаПлатежа.Сумма) КАК Сумма,
	|	СУММА(втРасшифровкаПлатежа.Пени) КАК Пени,
	|	СУММА(втРасшифровкаПлатежа.Рассрочка) КАК Рассрочка,
	|	СУММА(втРасшифровкаПлатежа.ДолгСумма) КАК ДолгСумма,
	|	СУММА(втРасшифровкаПлатежа.ДолгПени) КАК ДолгПени,
	|	СУММА(втРасшифровкаПлатежа.ДолгРассрочка) КАК ДолгРассрочка,
	|	втРасшифровкаПлатежа.МесяцНачисления КАК МесяцНачисления
	|ИЗ
	|	втРасшифровкаПлатежа КАК втРасшифровкаПлатежа
	|ГДЕ
	|	ИСТИНА
	|	" + УсловиеЛС + "
	|
	|СГРУППИРОВАТЬ ПО
	|	втРасшифровкаПлатежа.Объект,
	|	втРасшифровкаПлатежа.Услуга.Наименование,
	|	втРасшифровкаПлатежа.МесяцНачисления
	|
	|УПОРЯДОЧИТЬ ПО
	|	Объект,
	|	МесяцНачисления,
	|	Услуга.Наименование
	|ИТОГИ ПО
	|	Объект,
	|	МесяцНачисления";
	
	Запрос.УстановитьПараметр("РасшифровкаПлатежа", РасшифровкаПлатежа);
	
	Результат = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Возврат Результат;
КонецФункции // ДанныеОбОплатеПоМесяцамНачисления()

// Функция получает номер лицевого счета в его наименовании.
//
// Параметры:
//  ИсхСтрока    - строка, наименование лицевого счета.
//
// Возвращаемое значение:
//  Строка       - номер лицевого счета.
Функция ПолучитьНомерЛС(Знач ИсхСтрока)
	
	СписокЦифр = Новый СписокЗначений();
	СписокЦифр.Добавить("0");
	СписокЦифр.Добавить("1");
	СписокЦифр.Добавить("2");
	СписокЦифр.Добавить("3");
	СписокЦифр.Добавить("4");
	СписокЦифр.Добавить("5");
	СписокЦифр.Добавить("6");
	СписокЦифр.Добавить("7");
	СписокЦифр.Добавить("8");
	СписокЦифр.Добавить("9");
	
	ИсхСтрока     = СокрЛП(ИсхСтрока);
	ВсегоСимволов = СтрДлина(ИсхСтрока);
	НоваяСтрока   = "";
	Для Сч = 1 По ВсегоСимволов Цикл
		Если СписокЦифр.НайтиПоЗначению(Сред(ИсхСтрока, Сч, 1)) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = НоваяСтрока + Сред(ИсхСтрока, Сч, 1);
	КонецЦикла;
	
	Если ПустаяСтрока(НоваяСтрока) Тогда
		НоваяСтрока = "0";
	КонецЕсли;
	
	Возврат НоваяСтрока;
	
КонецФункции // ПолучитьНомерЛС()

// Формирует наименование организации в зависимости от настройки
// "Для печатных форм использовать".
Функция ПолучитьНаименованиеОрганизации(Организация)
	
	НаименованиеДляПечати = "";
	Если Организация.ВариантНаименованияДляПечатныхФорм = Перечисления.ВариантыНаименованияДляПечатныхФорм.СокращенноеНаименование Тогда
		НаименованиеДляПечати = Организация.НаименованиеСокращенное
	Иначе
		НаименованиеДляПечати = Организация.НаименованиеПолное;
	КонецЕсли;
	
	Возврат НаименованиеДляПечати;
КонецФункции // ПолучитьНаименованиеОрганизации()

// Функция формирует табличный документ перед выводом на печать.
//
// Параметры:
//  ТабДокумент   - ТабличныйДокумент, документ, содержащий расшифровки оплат(возвратов).
//  ТаблицаСГруппировками - ТаблицаЗначений, содержит сгруппированные сведения об оплате(возврате),
//                  в разрезе лицевых счетов.
//  ТаблицаСМесяцами - ТаблицаЗначений, содержит сгруппированные сведения об оплате(возврате),
//                  в разрезе лицевых счетов и месяцев начисления.
//  ВидОперации   - Строка, содержит информацию о виде операции документа.
//
// Возвращаемое значение:
//  Табличный документ - содержит подготовленную для печати табличную часть.
//
Функция ФормированиеТабличногоДокументаДляТекДокумента(ТабДокументОбщий, ТаблицаСГруппировками, ТаблицаСМесяцами, ТекДокумент, ПараметрыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	ДанныеОбОрганизации              = УПЖКХ_ТиповыеМетодыСервер.СведенияОЮрФизЛице(ТекДокумент.Организация, ТекДокумент.Дата);
	НаименованиеОрганизацииДляПечати = ПолучитьНаименованиеОрганизации(ТекДокумент.Организация);
	
	ЭтоОплата = ВидОплатыЯвляетсяОплатойУслуг(ТекДокумент.ВидОперации);
	
	Если ЭтоОплата Тогда
		Если ТекДокумент.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу Тогда
			ТекстШапки = "Расшифровка поступления платежей в кассу";
		ИначеЕсли ТекДокумент.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты Тогда
			ТекстШапки = "Расшифровка поступления платежей из автоматизированной системы приема оплаты";
		ИначеЕсли ТекДокумент.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет Тогда
			ТекстШапки = "Расшифровка поступления платежей на расчетный счет";
		КонецЕсли;
		ТекстПлатПолуч                    = "плательщике";
		ТекстФИОПлатПлатПолуч             = "плательщика";
		ТекстНачислено                    = "К оплате";
		ТекстНачисленияОплаченоВозвращено = "Оплачено";
		ТекстПениОплаченоВозвращено       = "Оплачено";
		ТекстРассрочкаОплаченоВозвращено  = "Оплачено";
		ТекстОплаченоВозвращено           = "оплачено";
	ИначеЕсли Не ЭтоОплата Тогда
		Если ТекДокумент.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыИзКассы Тогда
			ТекстШапки = "Расшифровка возврата денежных средств из кассы";
		ИначеЕсли ТекДокумент.ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ВозвратОплатыСРасчетногоСчета Тогда
			ТекстШапки = "Расшифровка возврата денежных средств с расчетного счета";
		КонецЕсли;
		ТекстПлатПолуч                    = "получателе";
		ТекстФИОПлатПлатПолуч             = "получателя";
		ТекстНачислено                    = "Оплачено";
		ТекстНачисленияОплаченоВозвращено = "Возвращено";
		ТекстПениОплаченоВозвращено       = "Возвращено";
		ТекстРассрочкаОплаченоВозвращено  = "Возвращено";
		ТекстОплаченоВозвращено           = "возвращено";
	КонецЕсли;
	
	
	// Используются для проверки существования областей макета.
	ИмеетсяСтрокаПериодаОплатыВозврата             = Ложь;
	ИмеетсяСтрокаТаблицыРасшифровки                = Ложь;
	ИмеетсяПодвалТаблицыРасшифровкиЗаМесяц         = Ложь;
	ИмеетсяСтрокаИтогов                            = Ложь;
	ИмеетсяПустаяСтрока                            = Ложь;
	ИмеетсяШапкаРасшифровки                        = Ложь;
	ИмеетсяШапкаТаблицыРасшифровки                 = Ложь;
	ИмеетсяСведенияОКонтрагентах                   = Ложь;
	ИмеетсяСтрокаЗадолженностиПереплатыДоОплаты    = Ложь;
	ИмеетсяСтрокаЗадолженностиПереплатыПослеОплаты = Ложь;
	ИмеетсяЛинияОтреза                             = Ложь;
	ИмеетсяСтрокаИтоговПоУслуге                    = Ложь;
	ИмеетсяВсегоОплаченоВозвращено                 = Ложь;
	
	// Счетчики посещения проверки существования области.
	СчПустаяСтрока                            = 1;
	СчШапкаРасшифровки                        = 1;
	СчСведенияОКонтрагентах                   = 1;
	СчШапкаТаблицыРасшифровки                 = 1;
	СчПериодаОплатыВозврата                   = 1;
	СчСтрокаТаблицыРасшифровки                = 1;
	СчПодвалТаблицыРасшифровкиЗаМесяц         = 1;
	СчСтрокаИтогов                            = 1;
	СчСтрокаИтоговПоУслуге                    = 1;
	СчСтрокаЗадолженностиПереплатыПослеОплаты = 1;
	СчСтрокаЗадолженностиПереплатыДоОплаты    = 1;
	СчЛинияОтреза                             = 1;
	СчВсегоНачисленоОплачено                  = 1;
	СчВсегоОплаченоВозвращено                 = 1;
	
	// Структура для заполнения параметров.
	СтруктураДляЗаполнения = ПолучитьСтруктуруДляЗаполнения();
	
	Для Каждого ЛицевойСчет Из ТаблицаСМесяцами.Строки Цикл
		
		Макет = УПЖКХ_ТиповыеМетодыСервер.ПолучитьМакет("Документ.КВП_РегистрацияОплаты.ПФ_MXL_Расшифровка");
		
		Если НЕ ИмеетсяПустаяСтрока Тогда
			Если СчПустаяСтрока = 1 Тогда
				Если НЕ Макет.Области.Найти("ПустаяСтрока") = Неопределено Тогда
					ИмеетсяПустаяСтрока = Истина;
					ПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
					ТабДокумент.Вывести(ПустаяСтрока);
				КонецЕсли;
				СчПустаяСтрока = СчПустаяСтрока + 1;
			КонецЕсли;
		Иначе
			ТабДокумент.Вывести(ПустаяСтрока);
		КонецЕсли;
		
		Если НЕ ИмеетсяШапкаРасшифровки Тогда
			Если СчШапкаРасшифровки = 1 Тогда
				Если НЕ Макет.Области.Найти("ШапкаРасшифровки") = Неопределено Тогда
					ИмеетсяШапкаРасшифровки = Истина;
					ОбластьШапка = Макет.ПолучитьОбласть("ШапкаРасшифровки");
					СтруктураДляЗаполнения.ТекстШапкиРасшифровки = ТекстШапки;
					ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, СтруктураДляЗаполнения);
					ТабДокумент.Вывести(ОбластьШапка);
					Если ИмеетсяПустаяСтрока Тогда
						ТабДокумент.Вывести(ПустаяСтрока);
					КонецЕсли;
				КонецЕсли;
				СчШапкаРасшифровки = СчШапкаРасшифровки + 1;
			КонецЕсли;
		Иначе
			ЗаполнитьЗначенияСвойств(ОбластьШапка.Параметры, СтруктураДляЗаполнения);
			ТабДокумент.Вывести(ОбластьШапка);
			Если ИмеетсяПустаяСтрока Тогда
				ТабДокумент.Вывести(ПустаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ИмеетсяСведенияОКонтрагентах Тогда
			Если СчСведенияОКонтрагентах = 1 Тогда
				Если НЕ Макет.Области.Найти("СведенияОКонтрагентах") = Неопределено Тогда
					
					ИмеетсяСведенияОКонтрагентах = Истина;
					СведенияОКонтрагентах = Макет.ПолучитьОбласть("СведенияОКонтрагентах");
					
					ДанныеПоЛС = СформироватьДанныеПоЛицевомуСчету(ЛицевойСчет.Объект, ТекДокумент.Дата, , );
					// Сведения о плательщике.
					СтруктураДляЗаполнения.ПлатПолуч          = ТекстПлатПолуч;
					СтруктураДляЗаполнения.ЛС                 = ПолучитьНомерЛС(ЛицевойСчет.Объект);
					СтруктураДляЗаполнения.ЛСФИО              = ДанныеПоЛС.Ответственный;
					СтруктураДляЗаполнения.ФИОПлатПолуч       = ТекстФИОПлатПлатПолуч;
					СтруктураДляЗаполнения.ЛСАдрес            = ДанныеПоЛС.Адрес;
					СтруктураДляЗаполнения.ОбщПлощадь         = ДанныеПоЛС.ОбщаяПлощадь;
					СтруктураДляЗаполнения.КолвоПроживающих   = ДанныеПоЛС.КоличествоПроживающих;
					// Сведения об организации.
					СтруктураДляЗаполнения.ПолучательПлатежа  = ПолучитьНаименованиеОрганизации(ТекДокумент.Организация);
					СтруктураДляЗаполнения.ИННОрганизации     = ДанныеОбОрганизации.ИНН;
					СтруктураДляЗаполнения.РСчетОрганизации   = ДанныеОбОрганизации.НомерСчета;
					СтруктураДляЗаполнения.АдресОрганизации   = ДанныеОбОрганизации.ЮридическийАдрес;
					СтруктураДляЗаполнения.ТелефонОрганизации = ДанныеОбОрганизации.Телефоны;
					
					ЗаполнитьЗначенияСвойств(СведенияОКонтрагентах.Параметры, СтруктураДляЗаполнения);
					ТабДокумент.Вывести(СведенияОКонтрагентах);
					Если ИмеетсяПустаяСтрока Тогда
						ТабДокумент.Вывести(ПустаяСтрока);
					КонецЕсли;
				КонецЕсли;
				СчСведенияОКонтрагентах = СчСведенияОКонтрагентах + 1;
			КонецЕсли;
		Иначе
			ДанныеПоЛС = СформироватьДанныеПоЛицевомуСчету(ЛицевойСчет.Объект, ТекДокумент.Дата, , );
			
			// Сведения о плательщике.
			СтруктураДляЗаполнения.ПлатПолуч          = ТекстПлатПолуч;
			СтруктураДляЗаполнения.ЛС                 = ПолучитьНомерЛС(ЛицевойСчет.Объект);
			СтруктураДляЗаполнения.ЛСФИО              = ДанныеПоЛС.Ответственный;
			СтруктураДляЗаполнения.ФИОПлатПолуч       = ТекстФИОПлатПлатПолуч;
			СтруктураДляЗаполнения.ЛСАдрес            = ДанныеПоЛС.Адрес;
			СтруктураДляЗаполнения.ОбщПлощадь         = ДанныеПоЛС.ОбщаяПлощадь;
			СтруктураДляЗаполнения.КолвоПроживающих   = ДанныеПоЛС.КоличествоПроживающих;
			// Сведения об организации.
			СтруктураДляЗаполнения.ПолучательПлатежа  = ПолучитьНаименованиеОрганизации(ТекДокумент.Организация);
			СтруктураДляЗаполнения.ИННОрганизации     = ДанныеОбОрганизации.ИНН;
			СтруктураДляЗаполнения.РСчетОрганизации   = ДанныеОбОрганизации.НомерСчета;
			СтруктураДляЗаполнения.АдресОрганизации   = ДанныеОбОрганизации.ЮридическийАдрес;
			СтруктураДляЗаполнения.ТелефонОрганизации = ДанныеОбОрганизации.Телефоны;
			
			ЗаполнитьЗначенияСвойств(СведенияОКонтрагентах.Параметры, СтруктураДляЗаполнения);
			ТабДокумент.Вывести(СведенияОКонтрагентах);
			Если ИмеетсяПустаяСтрока Тогда
				ТабДокумент.Вывести(ПустаяСтрока);
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ИмеетсяШапкаТаблицыРасшифровки Тогда
			Если СчШапкаТаблицыРасшифровки = 1 Тогда
				Если НЕ Макет.Области.Найти("ШапкаТаблицыРасшифровки") = Неопределено Тогда
					ИмеетсяШапкаТаблицыРасшифровки = Истина;
					ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицыРасшифровки");
					
					СтруктураДляЗаполнения.НачисленияОплаченоВозвращено = ТекстНачисленияОплаченоВозвращено;
					СтруктураДляЗаполнения.ПениОплаченоВозвращено       = ТекстПениОплаченоВозвращено;
					СтруктураДляЗаполнения.РассрочкаОплаченоВозвращено  = ТекстРассрочкаОплаченоВозвращено;
					СтруктураДляЗаполнения.ТекстНачислено               = ТекстНачислено;
					
					ЗаполнитьЗначенияСвойств(ОбластьШапкаТаблицы.Параметры, СтруктураДляЗаполнения);
					ТабДокумент.Вывести(ОбластьШапкаТаблицы);
				КонецЕсли;
				СчШапкаТаблицыРасшифровки = СчШапкаТаблицыРасшифровки + 1;
			КонецЕсли;
		Иначе
			СтруктураДляЗаполнения.НачисленияОплаченоВозвращено = ТекстНачисленияОплаченоВозвращено;
			СтруктураДляЗаполнения.ПениОплаченоВозвращено       = ТекстПениОплаченоВозвращено;
			СтруктураДляЗаполнения.РассрочкаОплаченоВозвращено  = ТекстРассрочкаОплаченоВозвращено;
			СтруктураДляЗаполнения.ТекстНачислено               = ТекстНачислено;
			
			ЗаполнитьЗначенияСвойств(ОбластьШапкаТаблицы.Параметры, СтруктураДляЗаполнения);
			ТабДокумент.Вывести(ОбластьШапкаТаблицы);
		КонецЕсли;
		
		// Используются для вывода итоговых данных за расчетный период.
		ВсегоНачислено          = 0;
		ВсегоОплачено           = 0;
		ВсегоНачисленоПени      = 0;
		ВсегоОплаченоПени       = 0;
		ВсегоНачисленоРассрочка = 0;
		ВсегоОплаченоРассрочка  = 0;
		
		Для Каждого МесяцНачисления Из ЛицевойСчет.Строки Цикл
			
			Если МесяцНачисления.МесяцНачисления = "Остаток по рассрочке" Тогда
				ПериодОплаты = "Остаток по рассрочке";
			Иначе
				ПериодОплаты = "" + Формат(МесяцНачисления.МесяцНачисления, "ДФ=MMMM") + " " + Формат(МесяцНачисления.МесяцНачисления, "ДФ=yyyy");
			КонецЕсли;
			
			Если НЕ ИмеетсяСтрокаПериодаОплатыВозврата Тогда
				Если СчПериодаОплатыВозврата = 1 Тогда
					Если НЕ Макет.Области.Найти("СтрокаПериодаОплатыВозврата") = Неопределено Тогда
						ИмеетсяСтрокаПериодаОплатыВозврата         = Истина;
						ОбластьПериодОплаты                        = Макет.ПолучитьОбласть("СтрокаПериодаОплатыВозврата");
						СтруктураДляЗаполнения.ПериодОплаты = ПериодОплаты;
						
						ЗаполнитьЗначенияСвойств(ОбластьПериодОплаты.Параметры, СтруктураДляЗаполнения);
						ТабДокумент.Вывести(ОбластьПериодОплаты);
					КонецЕсли;
					СчПериодаОплатыВозврата = СчПериодаОплатыВозврата + 1;
				КонецЕсли;
			Иначе
				СтруктураДляЗаполнения.ПериодОплаты = ПериодОплаты;
				
				ЗаполнитьЗначенияСвойств(ОбластьПериодОплаты.Параметры, СтруктураДляЗаполнения);
				ТабДокумент.Вывести(ОбластьПериодОплаты);
			КонецЕсли;
			
			ИтогоНачисленоЗаМесяц          = 0;
			ИтогоОплаченоЗаМесяц           = 0;
			ИтогоНачисленоПениЗаМесяц      = 0;
			ИтогоОплаченоПениЗаМесяц       = 0;
			ИтогоНачисленоРассрочкаЗаМесяц = 0;
			ИтогоОплаченоРассрочкаЗаМесяц  = 0;
			
			Для Каждого Услуга Из МесяцНачисления.Строки Цикл
				
				Если НЕ ИмеетсяСтрокаТаблицыРасшифровки Тогда
					Если СчСтрокаТаблицыРасшифровки = 1 Тогда
						Если НЕ Макет.Области.Найти("СтрокаТаблицыРасшифровки") = Неопределено Тогда
							ИмеетсяСтрокаТаблицыРасшифровки = Истина;
							СтрокаТаблицы = Макет.ПолучитьОбласть("СтрокаТаблицыРасшифровки");
							СтруктураДляЗаполнения.ВидУслуги          = Услуга.Наименование;
							СтруктураДляЗаполнения.НачисленоПоУслуге  = Услуга.ДолгСумма;
							СтруктураДляЗаполнения.ОплаченоПоУслуге   = Услуга.Сумма;
							СтруктураДляЗаполнения.ПениНачислено      = Услуга.ДолгПени;
							СтруктураДляЗаполнения.ПениОплачено       = Услуга.Пени;
							СтруктураДляЗаполнения.РассрочкаНачислено = Услуга.ДолгРассрочка;
							СтруктураДляЗаполнения.РассрочкаОплачено  = Услуга.Рассрочка;
							
							ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, СтруктураДляЗаполнения);
							ТабДокумент.Вывести(СтрокаТаблицы);
						КонецЕсли;
						СчСтрокаТаблицыРасшифровки = СчСтрокаТаблицыРасшифровки + 1;
					КонецЕсли;
				Иначе
					СтруктураДляЗаполнения.ВидУслуги          = Услуга.Наименование;
					СтруктураДляЗаполнения.НачисленоПоУслуге  = Услуга.ДолгСумма;
					СтруктураДляЗаполнения.ОплаченоПоУслуге   = Услуга.Сумма;
					СтруктураДляЗаполнения.ПениНачислено      = Услуга.ДолгПени;
					СтруктураДляЗаполнения.ПениОплачено       = Услуга.Пени;
					СтруктураДляЗаполнения.РассрочкаНачислено = Услуга.ДолгРассрочка;
					СтруктураДляЗаполнения.РассрочкаОплачено  = Услуга.Рассрочка;
					
					ЗаполнитьЗначенияСвойств(СтрокаТаблицы.Параметры, СтруктураДляЗаполнения);
					ТабДокумент.Вывести(СтрокаТаблицы);
				КонецЕсли;
				
				ИтогоНачисленоЗаМесяц          = ИтогоНачисленоЗаМесяц + Услуга.ДолгСумма;
				ИтогоОплаченоЗаМесяц           = ИтогоОплаченоЗаМесяц + Услуга.Сумма;
				ИтогоНачисленоПениЗаМесяц      = ИтогоНачисленоПениЗаМесяц + Услуга.ДолгПени;
				ИтогоОплаченоПениЗаМесяц       = ИтогоОплаченоПениЗаМесяц + Услуга.Пени;
				ИтогоНачисленоРассрочкаЗаМесяц = ИтогоНачисленоРассрочкаЗаМесяц + Услуга.ДолгРассрочка;
				ИтогоОплаченоРассрочкаЗаМесяц  = ИтогоОплаченоРассрочкаЗаМесяц + Услуга.Рассрочка;
				
			КонецЦикла;
			
			Если НЕ ИмеетсяПодвалТаблицыРасшифровкиЗаМесяц Тогда
				Если СчПодвалТаблицыРасшифровкиЗаМесяц = 1 Тогда
					Если НЕ Макет.Области.Найти("ПодвалТаблицыРасшифровкиЗаМесяц") = Неопределено Тогда
						ИмеетсяПодвалТаблицыРасшифровкиЗаМесяц = Истина;
						ПодвалТаблицыРасшифровкиЗаМесяц = Макет.ПолучитьОбласть("ПодвалТаблицыРасшифровкиЗаМесяц");
						СтруктураДляЗаполнения.ПериодОплаты                       = ?(ПериодОплаты = "Остаток по рассрочке", "остаток по рассрочке", ПериодОплаты);
						СтруктураДляЗаполнения.ИтогоНачисленоЗаМесяц              = ИтогоНачисленоЗаМесяц;
						СтруктураДляЗаполнения.ИтогоОплаченоВозвращеноЗаМесяц     = ИтогоОплаченоЗаМесяц;
						СтруктураДляЗаполнения.ПениНачисленоЗаМесяц               = ИтогоНачисленоПениЗаМесяц;
						СтруктураДляЗаполнения.ПениОплаченоВозвращеноЗаМесяц      = ИтогоОплаченоПениЗаМесяц;
						СтруктураДляЗаполнения.РассрочкаНачисленоЗаМесяц          = ИтогоНачисленоРассрочкаЗаМесяц;
						СтруктураДляЗаполнения.РассрочкаОплаченоВозвращеноЗаМесяц = ИтогоОплаченоРассрочкаЗаМесяц;
						
						ЗаполнитьЗначенияСвойств(ПодвалТаблицыРасшифровкиЗаМесяц.Параметры, СтруктураДляЗаполнения);
						ТабДокумент.Вывести(ПодвалТаблицыРасшифровкиЗаМесяц);
					КонецЕсли;
					СчПодвалТаблицыРасшифровкиЗаМесяц = СчПодвалТаблицыРасшифровкиЗаМесяц + 1;
				КонецЕсли;
			Иначе
				СтруктураДляЗаполнения.ПериодОплаты                       = ?(ПериодОплаты = "Остаток по рассрочке", "остаток по рассрочке", ПериодОплаты);
				СтруктураДляЗаполнения.ИтогоНачисленоЗаМесяц              = ИтогоНачисленоЗаМесяц;
				СтруктураДляЗаполнения.ИтогоОплаченоВозвращеноЗаМесяц     = ИтогоОплаченоЗаМесяц;
				СтруктураДляЗаполнения.ПениНачисленоЗаМесяц               = ИтогоНачисленоПениЗаМесяц;
				СтруктураДляЗаполнения.ПениОплаченоВозвращеноЗаМесяц      = ИтогоОплаченоПениЗаМесяц;
				СтруктураДляЗаполнения.РассрочкаНачисленоЗаМесяц          = ИтогоНачисленоРассрочкаЗаМесяц;
				СтруктураДляЗаполнения.РассрочкаОплаченоВозвращеноЗаМесяц = ИтогоОплаченоРассрочкаЗаМесяц;
				
				ЗаполнитьЗначенияСвойств(ПодвалТаблицыРасшифровкиЗаМесяц.Параметры, СтруктураДляЗаполнения);
				ТабДокумент.Вывести(ПодвалТаблицыРасшифровкиЗаМесяц);
			КонецЕсли;
			
			ВсегоНачислено          = ВсегоНачислено + ИтогоНачисленоЗаМесяц;
			ВсегоОплачено           = ВсегоОплачено + ИтогоОплаченоЗаМесяц;
			ВсегоНачисленоПени      = ВсегоНачисленоПени + ИтогоНачисленоПениЗаМесяц;
			ВсегоОплаченоПени       = ВсегоОплаченоПени + ИтогоОплаченоПениЗаМесяц;
			ВсегоНачисленоРассрочка = ВсегоНачисленоРассрочка + ИтогоНачисленоРассрочкаЗаМесяц;
			ВсегоОплаченоРассрочка  = ВсегоОплаченоРассрочка + ИтогоОплаченоРассрочкаЗаМесяц;
			
		КонецЦикла;
		
		Если НЕ ИмеетсяСтрокаИтогов Тогда
			Если СчСтрокаИтогов = 1 Тогда
				Если НЕ Макет.Области.Найти("СтрокаИтогов") = Неопределено Тогда
					ИмеетсяСтрокаИтогов = Истина;
					СтрокаИтогов                                            = Макет.ПолучитьОбласть("СтрокаИтогов");
					СтруктураДляЗаполнения.ВсегоНачислено                   = ВсегоНачислено;
					СтруктураДляЗаполнения.ВсегоОплаченоВозвращено          = ВсегоОплачено;
					СтруктураДляЗаполнения.ВсегоНачисленоПени               = ВсегоНачисленоПени;
					СтруктураДляЗаполнения.ВсегоОплаченоВозвращеноПени      = ВсегоОплаченоПени;
					СтруктураДляЗаполнения.ВсегоНачисленоРассрочка          = ВсегоНачисленоРассрочка;
					СтруктураДляЗаполнения.ВсегоОплаченоВозвращеноРассрочка = ВсегоОплаченоРассрочка;
					
					ЗаполнитьЗначенияСвойств(СтрокаИтогов.Параметры, СтруктураДляЗаполнения);
					Если ИмеетсяСтрокаИтогов Тогда
						ТабДокумент.Вывести(ПустаяСтрока);
					КонецЕсли;
					ТабДокумент.Вывести(СтрокаИтогов);
				КонецЕсли;
				СчСтрокаИтогов = СчСтрокаИтогов + 1;
			КонецЕсли;
		Иначе
			СтруктураДляЗаполнения.ВсегоНачислено                   = ВсегоНачислено;
			СтруктураДляЗаполнения.ВсегоОплаченоВозвращено          = ВсегоОплачено;
			СтруктураДляЗаполнения.ВсегоНачисленоПени               = ВсегоНачисленоПени;
			СтруктураДляЗаполнения.ВсегоОплаченоВозвращеноПени      = ВсегоОплаченоПени;
			СтруктураДляЗаполнения.ВсегоНачисленоРассрочка          = ВсегоНачисленоРассрочка;
			СтруктураДляЗаполнения.ВсегоОплаченоВозвращеноРассрочка = ВсегоОплаченоРассрочка;
			
			ЗаполнитьЗначенияСвойств(СтрокаИтогов.Параметры, СтруктураДляЗаполнения);
			Если ИмеетсяПустаяСтрока Тогда
				ТабДокумент.Вывести(ПустаяСтрока);
			КонецЕсли;
			ТабДокумент.Вывести(СтрокаИтогов);
		КонецЕсли;
		
		Отбор = Новый Структура("Объект", ЛицевойСчет.Объект);
		
		ТаблицаГруппировокПоУслугам = ТаблицаСГруппировками.НайтиСтроки(Отбор);
		
		Если НЕ ТаблицаГруппировокПоУслугам.Количество() = 0 Тогда
			
			Для Каждого Услуга Из ТаблицаГруппировокПоУслугам Цикл
				
				Если НЕ ИмеетсяСтрокаИтоговПоУслуге Тогда
					Если СчСтрокаИтоговПоУслуге = 1 Тогда
						Если НЕ Макет.Области.Найти("СтрокаИтоговПоУслуге") = Неопределено Тогда
							СтрокаИтоговПоУслуге = Макет.ПолучитьОбласть("СтрокаИтоговПоУслуге");
							ИмеетсяСтрокаИтоговПоУслуге = Истина;
							СтруктураДляЗаполнения.ВидУслугиИтог                     = Услуга.Наименование;
							СтруктураДляЗаполнения.ИтогоНачисленоПоУслуге            = Услуга.ДолгСуммаОплата;
							СтруктураДляЗаполнения.ИтогоОплаченоВозвращено           = Услуга.СуммаОплата;
							СтруктураДляЗаполнения.ИтогоНачисленоПени                = Услуга.ДолгПениОплата;
							СтруктураДляЗаполнения.ИтогоНачисленоВозвращеноПени      = Услуга.ПениОплата;
							СтруктураДляЗаполнения.ИтогоНачисленоРассрочка           = Услуга.ДолгРассрочкаОплата;
							СтруктураДляЗаполнения.ИтогоНачисленоВозвращеноРассрочка = Услуга.РассрочкаОплата;
							
							ЗаполнитьЗначенияСвойств(СтрокаИтоговПоУслуге.Параметры, СтруктураДляЗаполнения);
							ТабДокумент.Вывести(СтрокаИтоговПоУслуге);
						КонецЕсли;
						СчСтрокаИтоговПоУслуге = СчСтрокаИтоговПоУслуге + 1;
					КонецЕсли;
				Иначе
					СтруктураДляЗаполнения.ВидУслугиИтог                     = Услуга.Наименование;
					СтруктураДляЗаполнения.ИтогоНачисленоПоУслуге            = Услуга.ДолгСуммаОплата;
					СтруктураДляЗаполнения.ИтогоОплаченоВозвращено           = Услуга.СуммаОплата;
					СтруктураДляЗаполнения.ИтогоНачисленоПени                = Услуга.ДолгПениОплата;
					СтруктураДляЗаполнения.ИтогоНачисленоВозвращеноПени      = Услуга.ПениОплата;
					СтруктураДляЗаполнения.ИтогоНачисленоРассрочка           = Услуга.ДолгРассрочкаОплата;
					СтруктураДляЗаполнения.ИтогоНачисленоВозвращеноРассрочка = Услуга.РассрочкаОплата;
					
					ЗаполнитьЗначенияСвойств(СтрокаИтоговПоУслуге.Параметры, СтруктураДляЗаполнения);
					ТабДокумент.Вывести(СтрокаИтоговПоУслуге);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ИмеетсяПустаяСтрока Тогда
			ТабДокумент.Вывести(ПустаяСтрока);
		КонецЕсли;
		СуммаЗадолженностиПереплаты = ПолучитьСуммуЗадолженностиПерелатыПоЛС(ЛицевойСчет.Объект, ТекДокумент);
		
		Если НЕ СуммаЗадолженностиПереплаты = 0 Тогда
			
			Если НЕ ИмеетсяСтрокаЗадолженностиПереплатыДоОплаты Тогда
				Если СчСтрокаЗадолженностиПереплатыДоОплаты = 1 Тогда
					Если НЕ Макет.Области.Найти("СтрокаЗадолженностиПереплатыДоОплаты") = Неопределено Тогда
						ИмеетсяСтрокаЗадолженностиПереплатыДоОплаты = Истина;
						СтрокаЗадолженностиПереплатыДоОплаты = Макет.ПолучитьОбласть("СтрокаЗадолженностиПереплатыДоОплаты");
						ДатаДокумента = Формат(ТекДокумент.Дата, "ДФ=dd.MM.yyyy");
						
						СтруктураДляЗаполнения.ДатаДокумента = ДатаДокумента;
						Если СуммаЗадолженностиПереплаты > 0 Тогда
							СтруктураДляЗаполнения.ПереплатаЗадолженность      = "Переплата";
							СтруктураДляЗаполнения.СуммаЗадолженностиПереплаты = СуммаЗадолженностиПереплаты;
						ИначеЕсли СуммаЗадолженностиПереплаты < 0 Тогда
							СтруктураДляЗаполнения.ПереплатаЗадолженность      = "Задолженность";
							СтруктураДляЗаполнения.СуммаЗадолженностиПереплаты = (-1) * СуммаЗадолженностиПереплаты;
						КонецЕсли;
						ЗаполнитьЗначенияСвойств(СтрокаЗадолженностиПереплатыДоОплаты.Параметры, СтруктураДляЗаполнения);
						ТабДокумент.Вывести(СтрокаЗадолженностиПереплатыДоОплаты);
					КонецЕсли;
					СчСтрокаЗадолженностиПереплатыДоОплаты = СчСтрокаЗадолженностиПереплатыДоОплаты + 1;
				КонецЕсли;
			Иначе
				ДатаДокумента = Формат(ТекДокумент.Дата, "ДФ=dd.MM.yyyy");
				СтруктураДляЗаполнения.ДатаДокумента = ДатаДокумента;
				Если СуммаЗадолженностиПереплаты > 0 Тогда
					СтруктураДляЗаполнения.ПереплатаЗадолженность      = "Переплата";
					СтруктураДляЗаполнения.СуммаЗадолженностиПереплаты = СуммаЗадолженностиПереплаты;
				ИначеЕсли СуммаЗадолженностиПереплаты < 0 Тогда
					СтруктураДляЗаполнения.ПереплатаЗадолженность      = "Задолженность";
					СтруктураДляЗаполнения.СуммаЗадолженностиПереплаты = (-1) * СуммаЗадолженностиПереплаты;
				КонецЕсли;
				ЗаполнитьЗначенияСвойств(СтрокаЗадолженностиПереплатыДоОплаты.Параметры, СтруктураДляЗаполнения);
				ТабДокумент.Вывести(СтрокаЗадолженностиПереплатыДоОплаты);
			КонецЕсли;
			
		КонецЕсли;
		
		ВсегоОплаченоВозвращеноСумма = ВсегоОплачено + ВсегоОплаченоПени + ВсегоОплаченоРассрочка;
		
		Если НЕ ИмеетсяВсегоОплаченоВозвращено Тогда
			Если СчВсегоОплаченоВозвращено = 1 Тогда
				Если НЕ Макет.Области.Найти("ВсегоОплаченоВозвращено") = Неопределено Тогда
					ВсегоОплаченоВозвращено = Макет.ПолучитьОбласть("ВсегоОплаченоВозвращено");
					
					СтруктураДляЗаполнения.ОплаченоВозвращено      = ТекстОплаченоВозвращено;
					СтруктураДляЗаполнения.ВсегоОплаченоВозвращено = ВсегоОплаченоВозвращеноСумма;
					
					ЗаполнитьЗначенияСвойств(ВсегоОплаченоВозвращено.Параметры, СтруктураДляЗаполнения);
					ТабДокумент.Вывести(ВсегоОплаченоВозвращено);
				КонецЕсли;
			КонецЕсли;
			СчВсегоОплаченоВозвращено = СчВсегоОплаченоВозвращено + 1;
		Иначе
			СтруктураДляЗаполнения.ОплаченоВозвращено      = ТекстОплаченоВозвращено;
			СтруктураДляЗаполнения.ВсегоОплаченоВозвращено = ВсегоОплаченоВозвращеноСумма;
			
			ЗаполнитьЗначенияСвойств(ВсегоОплаченоВозвращено.Параметры, СтруктураДляЗаполнения);
			ТабДокумент.Вывести(ВсегоОплаченоВозвращено);
		КонецЕсли;
		
		Если ЭтоОплата Тогда
			РазницаОплатаНачисления = ВсегоОплаченоВозвращеноСумма - (ВсегоНачислено + ВсегоНачисленоПени + ВсегоНачисленоРассрочка);
		ИначеЕсли Не ЭтоОплата Тогда
			РазницаОплатаНачисления = СуммаЗадолженностиПереплаты - ВсегоОплаченоВозвращеноСумма;
		КонецЕсли;
			
		Если НЕ РазницаОплатаНачисления = 0 Тогда
			
			Если НЕ ИмеетсяСтрокаЗадолженностиПереплатыПослеОплаты Тогда
				Если СчСтрокаЗадолженностиПереплатыПослеОплаты = 1 Тогда 
					Если НЕ Макет.Области.Найти("СтрокаЗадолженностиПереплатыПослеОплаты") = Неопределено Тогда
						ИмеетсяСтрокаЗадолженностиПереплатыПослеОплаты = Истина;
						СтрокаЗадолженностиПереплатыПослеОплаты = Макет.ПолучитьОбласть("СтрокаЗадолженностиПереплатыПослеОплаты");
						
						Если РазницаОплатаНачисления > 0 Тогда
							СтруктураДляЗаполнения.ЗадолженностьПереплата = "Переплата после проведения " + ?(ЭтоОплата, "оплаты", "возврата");
							СтруктураДляЗаполнения.СуммаЗадолженностиПереплаты = РазницаОплатаНачисления;
						ИначеЕсли РазницаОплатаНачисления < 0 Тогда
							СтруктураДляЗаполнения.ЗадолженностьПереплата = "Задолженность после проведения " + ?(ЭтоОплата, "оплаты", "возврата");
							СтруктураДляЗаполнения.СуммаЗадолженностиПереплаты = (-1) * РазницаОплатаНачисления;
						КонецЕсли;
						
						ЗаполнитьЗначенияСвойств(СтрокаЗадолженностиПереплатыПослеОплаты.Параметры, СтруктураДляЗаполнения);
						ТабДокумент.Вывести(СтрокаЗадолженностиПереплатыПослеОплаты);
					КонецЕсли;
					СчСтрокаЗадолженностиПереплатыПослеОплаты = СчСтрокаЗадолженностиПереплатыПослеОплаты + 1
				КонецЕсли;
			Иначе
				
				Если РазницаОплатаНачисления > 0 Тогда
					СтруктураДляЗаполнения.ЗадолженностьПереплата = "Переплата после проведения " + ?(ЭтоОплата, "оплаты", "возврата");
					СтруктураДляЗаполнения.СуммаЗадолженностиПереплаты = РазницаОплатаНачисления;
				ИначеЕсли РазницаОплатаНачисления < 0 Тогда
					СтруктураДляЗаполнения.ЗадолженностьПереплата = "Задолженность после проведения " + ?(ЭтоОплата, "оплаты", "возврата");
					СтруктураДляЗаполнения.СуммаЗадолженностиПереплаты = (-1) * РазницаОплатаНачисления;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаЗадолженностиПереплатыПослеОплаты.Параметры, СтруктураДляЗаполнения);
				ТабДокумент.Вывести(СтрокаЗадолженностиПереплатыПослеОплаты);
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ИмеетсяЛинияОтреза Тогда
			Если СчЛинияОтреза = 1 Тогда
				Если НЕ Макет.Области.Найти("ЛинияОтреза") = Неопределено Тогда
					ИмеетсяЛинияОтреза = Истина;
					ЛинияОтреза = Макет.ПолучитьОбласть("ЛинияОтреза");
					ТабДокумент.Вывести(ЛинияОтреза);
				КонецЕсли;
				СчЛинияОтреза = СчЛинияОтреза + 1;
			КонецЕсли;
		Иначе
			ТабДокумент.Вывести(ЛинияОтреза);
		КонецЕсли;
		
		ТабДокументОбщий.ВывестиГоризонтальныйРазделительСтраниц();
		
		ТабДокументОбщий.Вывести(ТабДокумент);
		ТабДокумент.Очистить();
		
	КонецЦикла;
	
	Возврат ТабДокументОбщий;
КонецФункции // ФормированиеТабличногоДокументаДляТекДокумента()

// Функция формирует результирующий табличный документ перед выводом на печать.
//
// Параметры:
//  МассивОбъект - Массив, содержит массив объектов, для которых необходимо сформировать
//                 табличные документы.
// ПараметрыПечати - Структура, содержащая параметры для вывода данных в табличный документ.
//
// Возвращаемое значение:
//  ТабличныйДокумент - результирующий табличный документ для вывода на печать.
//
Функция ФормированиеТабличногоДокументаДляВсехОбъектов(МассивОбъектов, ПараметрыПечати)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Для Каждого ТекОбъект Из МассивОбъектов Цикл
		
		// Пока распечатать расшифровку можно по всем объектам.
		ДанныеПоТекущемуЛССГруппировками = ДанныеОбОплатеСГруппировками(ТекОбъект.РасшифровкаПлатежа);
		ДанныеПоТекущемуЛССМесяцами      = ДанныеОбОплатеПоМесяцамНачисления(ТекОбъект.РасшифровкаПлатежа);
		ФормированиеТабличногоДокументаДляТекДокумента(ТабДокумент, ДанныеПоТекущемуЛССГруппировками, ДанныеПоТекущемуЛССМесяцами, ТекОбъект, ПараметрыПечати);
		
	КонецЦикла;
	
	Возврат ТабДокумент;
	
КонецФункции // ФормированиеТабличногоДокументаДляВсехОбъектов()

// Функция определяет сумма задолженности для лицевого счет на момент времени документа.
//
// Параметры:
//  ЛицевойСчет   - СправочникСсылка.КВП_ЛицевыеСчета, лицевой счет, по которому определяется задолженность.
//
// Возвращаемое значение:
//  Число        - содержит сумму задолженности.
//
Функция ПолучитьСуммуЗадолженностиПерелатыПоЛС(ЛицевойСчет, ТекДокумент)
	
	мЗапросПоНачислениям = Новый Запрос;
	мЗапросПоНачислениям.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КВП_НачисленияНаЛицевыеСчетаОстатки.ЛицевойСчет КАК ЛицевойСчет,
	|	ВЫБОР
	|		КОГДА НЕ КВП_НачисленияНаЛицевыеСчетаОстатки.ВидНачисления = &ВидыНачисленияПени
	|				И НЕ КВП_НачисленияНаЛицевыеСчетаОстатки.ВидНачисления = &ВидыНачисленияРассрочка
	|			ТОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДолга,
	|	ВЫБОР
	|		КОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.ВидНачисления = &ВидыНачисленияПени
	|			ТОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДолгаПени,
	|	ВЫБОР
	|		КОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.ВидНачисления = &ВидыНачисленияРассрочка
	|			ТОГДА КВП_НачисленияНаЛицевыеСчетаОстатки.СуммаНачисленияОстаток
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДолгаРассрочка
	|ИЗ
	|	РегистрНакопления.КВП_ВзаиморасчетыПоЛицевымСчетам.Остатки(
	|			&ДатаДокумента,
	|			Организация = &Организация
	|				И ЛицевойСчет = &ЛицевойСчет) КАК КВП_НачисленияНаЛицевыеСчетаОстатки
	|ИТОГИ
	|	СУММА(СуммаДолга),
	|	СУММА(СуммаДолгаПени),
	|	СУММА(СуммаДолгаРассрочка)
	|ПО
	|	ЛицевойСчет";
	
	
	мЗапросПоНачислениям.УстановитьПараметр("Организация",             ТекДокумент.Организация);
	мЗапросПоНачислениям.УстановитьПараметр("ДатаДокумента",           ТекДокумент.Дата);
	мЗапросПоНачислениям.УстановитьПараметр("ЛицевойСчет",             ЛицевойСчет);
	мЗапросПоНачислениям.УстановитьПараметр("ВидыНачисленияПени",      Перечисления.КВП_ВидыНачисленияОстатки.Пени);
	мЗапросПоНачислениям.УстановитьПараметр("ВидыНачисленияРассрочка", Перечисления.КВП_ВидыНачисленияОстатки.Рассрочка);
	
	ДолгПоНачислениям = 0;
	ДолгПоПени        = 0;
	ДолгПоРассрочке   = 0;
	
	Выборка = мЗапросПоНачислениям.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДолгПоНачислениям = (-1) * Выборка.СуммаДолга;
		ДолгПоПени        = (-1) * Выборка.СуммаДолгаПени;
		ДолгПоРассрочке   = (-1) * Выборка.СуммаДолгаРассрочка;
	КонецЕсли;
	
	СуммаЗадолженностиПереплаты = ДолгПоНачислениям + ДолгПоПени + ДолгПоРассрочке;
	
	Возврат СуммаЗадолженностиПереплаты;
КонецФункции // ПолучитьСуммуЗадолженностиПерелатыПоЛС()

// Функция определяется, является ли документ оплатой.
Функция ВидОплатыЯвляетсяОплатойУслуг(ВидОперации) Экспорт
	
	Если ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеВКассу
	 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеИзАвтоматизированныхСистемПриемаОплаты
	 ИЛИ ВидОперации = Перечисления.КВП_ВидыОперацийРегистрацииОплаты.ПоступлениеНаБанковскийСчет Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Сформировать печатные формы объектов.
//
// ВХОДЯЩИЕ:
//   ИменаМакетов    - Строка    - Имена макетов, перечисленные через запятую.
//   МассивОбъектов  - Массив    - Массив ссылок на объекты которые нужно распечатать.
//   ПараметрыПечати - Структура - Структура дополнительных параметров печати.
//
// ИСХОДЯЩИЕ:
//   КоллекцияПечатныхФорм - Таблица значений - Сформированные табличные документы.
//   ПараметрыВывода       - Структура        - Параметры сформированных табличных документов.
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, 
	КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;

	Если УПЖКХ_ТиповыеМетодыСервер.НужноПечататьМакет(КоллекцияПечатныхФорм, "Расшифровка") Тогда

		УПЖКХ_ТиповыеМетодыСервер.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, 
																   "Расшифровка", 
																   "Расшифровка", 
																   ФормированиеТабличногоДокументаДляВсехОбъектов(МассивОбъектов,
																												  ПараметрыПечати));

	КонецЕсли;
	
КонецПроцедуры

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати.
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли