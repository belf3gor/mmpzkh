#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

Процедура ПередЗаписью(Отказ)
	
	Если ЭтоНовый() Тогда
		
		Если НЕ ЗначениеЗаполнено(РежимВыгрузкиПриНеобходимости) Тогда
			РежимВыгрузкиПриНеобходимости = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
		КонецЕсли;
		
	КонецЕсли;
	
	Если НЕ ИспользоватьОтборПоОрганизациям И Организации.Количество() <> 0 Тогда
		Организации.Очистить();
	ИначеЕсли Организации.Количество() = 0 И ИспользоватьОтборПоОрганизациям Тогда
		ИспользоватьОтборПоОрганизациям = Ложь;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ПравилаОтправкиДокументов) Тогда
		ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
	КонецЕсли;
	
	Если ПравилаОтправкиДокументов = "НеСинхронизировать" Тогда
		РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.НеВыгружать;
	Иначе
		РежимВыгрузкиДокументов = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПоУсловию;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	//Создание предопределенных элементов для значений по умолчанию.
	
	Если ЗначениеЗаполнено(СтатьяЗатрат) Тогда
		
		Назначение = "ПрочиеЗатраты";
		ОбработатьИмяПредопределенныхДанных(СтатьяЗатрат, Назначение);
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяПрочихДоходовРасходов) Тогда
		
		Назначение = "ПрочиеВнереализационныеДоходыРасходы";
		ОбработатьИмяПредопределенныхДанных(СтатьяПрочихДоходовРасходов, Назначение);
		
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

Процедура ОбработатьИмяПредопределенныхДанных(СсылкаНаЭлемент, Назначение)
	
	Если Не ЗначениеЗаполнено(Назначение) Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		
		СтарыйПредопределенный = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник." + СсылкаНаЭлемент.Метаданные().Имя + "." + Назначение);
		Если ЗначениеЗаполнено(СтарыйПредопределенный) И СтарыйПредопределенный <> СсылкаНаЭлемент Тогда
			
			СтарыйОбъект = СтарыйПредопределенный.ПолучитьОбъект();
			СтарыйОбъект.Заблокировать();
			СтарыйОбъект.ИмяПредопределенныхДанных = "";
			СтарыйОбъект.Записать();                                 			
			СтарыйОбъект.Разблокировать();
			
		КонецЕсли;
		
		Объект = СсылкаНаЭлемент.ПолучитьОбъект();
		Объект.ИмяПредопределенныхДанных = Назначение;
		Объект.Записать();
		
	Исключение
		
		СобытиеЖурнала = НСтр("ru = 'Данные.Изменение'");
		
		ТекстСообщения = НСтр("ru = 'Не удалось установить предопределенным объект'") + " '" + СсылкаНаЭлемент + "'!
			|"+ ОписаниеОшибки();
		
		ЗаписьЖурналаРегистрации(СобытиеЖурнала,
			УровеньЖурналаРегистрации.Ошибка,
			Метаданные(),
			Ссылка,
			ТекстСообщения
		);
	КонецПопытки;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	ИнициализироватьОбъект(ДанныеЗаполнения);
	
КонецПроцедуры

#Область СлужебныеПроцедурыИФункции

Процедура ИнициализироватьОбъект(ДанныеЗаполнения)
	
	Если Не ДанныеЗаполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РежимВыгрузкиПриНеобходимости = Перечисления.РежимыВыгрузкиОбъектовОбмена.ВыгружатьПриНеобходимости;
	
	// настройка отборов
	ПравилаОтправкиДокументов = "АвтоматическаяСинхронизация";
	ДатаНачалаВыгрузкиДокументов = НачалоГода(ТекущаяДата());
	ИспользоватьОтборПоОрганизациям = Ложь;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

